
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.GroupsScalarFieldEnum = makeEnum({
  id: 'id',
  group_name: 'group_name',
  date_created: 'date_created'
});

exports.Prisma.Groups_IngredientsScalarFieldEnum = makeEnum({
  group_id: 'group_id',
  ingredient_id: 'ingredient_id'
});

exports.Prisma.Groups_modsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  group_id: 'group_id'
});

exports.Prisma.Groups_specsScalarFieldEnum = makeEnum({
  group_id: 'group_id',
  spec_id: 'spec_id'
});

exports.Prisma.Groups_usersScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  group_id: 'group_id'
});

exports.Prisma.IngredientScalarFieldEnum = makeEnum({
  id: 'id',
  date_created: 'date_created',
  name: 'name',
  amount: 'amount',
  unit: 'unit',
  price: 'price',
  source: 'source',
  postedById: 'postedById'
});

exports.Prisma.QuantitiesScalarFieldEnum = makeEnum({
  id: 'id',
  spec_id: 'spec_id',
  ingredient_id: 'ingredient_id',
  amount: 'amount',
  unit: 'unit'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RecipeScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  origin: 'origin',
  history: 'history',
  postedById: 'postedById'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SpecsScalarFieldEnum = makeEnum({
  id: 'id',
  postedById: 'postedById',
  instructions: 'instructions',
  glassware: 'glassware',
  ice: 'ice',
  recipeId: 'recipeId'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.User_dataScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  user_bio: 'user_bio',
  work_place: 'work_place',
  profile_picture: 'profile_picture'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  user_name: 'user_name',
  first_name: 'first_name',
  last_name: 'last_name',
  date_joined: 'date_joined',
  email: 'email',
  password: 'password'
});

exports.Prisma.Users_ingredientsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  ingredient_id: 'ingredient_id'
});

exports.Prisma.Users_specsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  spec_id: 'spec_id'
});


exports.Prisma.ModelName = makeEnum({
  Groups: 'Groups',
  Groups_Ingredients: 'Groups_Ingredients',
  groups_mods: 'groups_mods',
  groups_specs: 'groups_specs',
  groups_users: 'groups_users',
  Ingredient: 'Ingredient',
  quantities: 'quantities',
  Recipe: 'Recipe',
  specs: 'specs',
  user_data: 'user_data',
  Users: 'Users',
  users_ingredients: 'users_ingredients',
  users_specs: 'users_specs'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
