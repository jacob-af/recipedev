
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.6.0
 * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
 */
Prisma.prismaVersion = {
  client: "5.6.0",
  engine: "e95e739751f42d8ca026f6b910f5a2dc5adeaeee"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  firstName: 'firstName',
  lastName: 'lastName',
  dateJoined: 'dateJoined',
  lastEdited: 'lastEdited',
  email: 'email',
  password: 'password'
};

exports.Prisma.FollowScalarFieldEnum = {
  followedById: 'followedById',
  followingId: 'followingId',
  relationship: 'relationship'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  photo: 'photo'
};

exports.Prisma.RecipeBookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
};

exports.Prisma.RecipeBookUserScalarFieldEnum = {
  userId: 'userId',
  recipeBookId: 'recipeBookId',
  permission: 'permission'
};

exports.Prisma.BuildScalarFieldEnum = {
  id: 'id',
  buildName: 'buildName',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById',
  recipeId: 'recipeId',
  instructions: 'instructions',
  notes: 'notes',
  glassware: 'glassware',
  ice: 'ice'
};

exports.Prisma.BuildUserScalarFieldEnum = {
  userId: 'userId',
  buildId: 'buildId',
  permission: 'permission'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  name: 'name',
  origin: 'origin',
  history: 'history',
  createdById: 'createdById',
  editedById: 'editedById'
};

exports.Prisma.RecipeBookBuildScalarFieldEnum = {
  buildId: 'buildId',
  recipeBookId: 'recipeBookId'
};

exports.Prisma.TouchScalarFieldEnum = {
  id: 'id',
  buildId: 'buildId',
  order: 'order',
  amount: 'amount',
  unit: 'unit',
  genericIngredientId: 'genericIngredientId',
  specificIngredientId: 'specificIngredientId',
  version: 'version'
};

exports.Prisma.ArchivedTouchScalarFieldEnum = {
  id: 'id',
  buildId: 'buildId',
  order: 'order',
  amount: 'amount',
  unit: 'unit',
  genericIngredientId: 'genericIngredientId',
  specificIngredientId: 'specificIngredientId',
  version: 'version'
};

exports.Prisma.GenericIngredientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SpecificIngredientScalarFieldEnum = {
  id: 'id',
  dateCreated: 'dateCreated',
  createdById: 'createdById',
  genericIngredientId: 'genericIngredientId',
  name: 'name',
  description: 'description',
  price: 'price',
  amount: 'amount',
  unit: 'unit',
  source: 'source'
};

exports.Prisma.IngredientUserScalarFieldEnum = {
  ingredientId: 'ingredientId',
  userId: 'userId',
  permission: 'permission'
};

exports.Prisma.IngredientPreferenceScalarFieldEnum = {
  genericIngredientId: 'genericIngredientId',
  specificIngredientId: 'specificIngredientId',
  userId: 'userId'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
};

exports.Prisma.InventoryUserScalarFieldEnum = {
  userId: 'userId',
  inventoryId: 'inventoryId',
  permission: 'permission'
};

exports.Prisma.StorageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
};

exports.Prisma.InventoryStorageScalarFieldEnum = {
  inventoryId: 'inventoryId',
  storageId: 'storageId'
};

exports.Prisma.IngredientStorageScalarFieldEnum = {
  ingredientId: 'ingredientId',
  storageId: 'storageId',
  quantity: 'quantity'
};

exports.Prisma.StorageUserScalarFieldEnum = {
  userId: 'userId',
  storageId: 'storageId',
  permission: 'permission'
};

exports.Prisma.CrewScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
};

exports.Prisma.CrewUserScalarFieldEnum = {
  userId: 'userId',
  crewId: 'crewId',
  permission: 'permission'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Follow: 'Follow',
  Profile: 'Profile',
  RecipeBook: 'RecipeBook',
  RecipeBookUser: 'RecipeBookUser',
  Build: 'Build',
  BuildUser: 'BuildUser',
  Recipe: 'Recipe',
  RecipeBookBuild: 'RecipeBookBuild',
  Touch: 'Touch',
  ArchivedTouch: 'ArchivedTouch',
  GenericIngredient: 'GenericIngredient',
  SpecificIngredient: 'SpecificIngredient',
  IngredientUser: 'IngredientUser',
  IngredientPreference: 'IngredientPreference',
  Inventory: 'Inventory',
  InventoryUser: 'InventoryUser',
  Storage: 'Storage',
  InventoryStorage: 'InventoryStorage',
  IngredientStorage: 'IngredientStorage',
  StorageUser: 'StorageUser',
  Crew: 'Crew',
  CrewUser: 'CrewUser'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
