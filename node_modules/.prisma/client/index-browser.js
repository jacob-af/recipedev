
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BuildScalarFieldEnum = makeEnum({
  id: 'id',
  buildName: 'buildName',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById',
  recipeId: 'recipeId',
  instructions: 'instructions',
  notes: 'notes',
  glassware: 'glassware',
  ice: 'ice'
});

exports.Prisma.BuildUserScalarFieldEnum = makeEnum({
  userId: 'userId',
  buildId: 'buildId',
  permission: 'permission'
});

exports.Prisma.CrewScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
});

exports.Prisma.GenericIngredientScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description'
});

exports.Prisma.IngredientPreferenceScalarFieldEnum = makeEnum({
  genericIngredientID: 'genericIngredientID',
  specificIngredientID: 'specificIngredientID',
  userId: 'userId'
});

exports.Prisma.IngredientStorageScalarFieldEnum = makeEnum({
  ingredientId: 'ingredientId',
  storageId: 'storageId',
  quantity: 'quantity'
});

exports.Prisma.InventoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
});

exports.Prisma.InventoryStorageScalarFieldEnum = makeEnum({
  inventoryId: 'inventoryId',
  storageId: 'storageId'
});

exports.Prisma.InventoryUserScalarFieldEnum = makeEnum({
  userId: 'userId',
  inventoryId: 'inventoryId',
  permission: 'permission'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  photo: 'photo'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RecipeBookBuildScalarFieldEnum = makeEnum({
  buildId: 'buildId',
  recipeBookId: 'recipeBookId'
});

exports.Prisma.RecipeBookScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
});

exports.Prisma.RecipeBookUserScalarFieldEnum = makeEnum({
  userId: 'userId',
  recipeBookId: 'recipeBookId',
  permission: 'permission'
});

exports.Prisma.RecipeScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  origin: 'origin',
  history: 'history',
  createdById: 'createdById'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SpecificIngredientScalarFieldEnum = makeEnum({
  id: 'id',
  dateCreated: 'dateCreated',
  createdById: 'createdById',
  genericIngredientId: 'genericIngredientId',
  name: 'name',
  description: 'description',
  price: 'price',
  amount: 'amount',
  unit: 'unit',
  source: 'source'
});

exports.Prisma.StorageScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  createdById: 'createdById',
  editedById: 'editedById'
});

exports.Prisma.StorageUserScalarFieldEnum = makeEnum({
  userId: 'userId',
  storageId: 'storageId',
  permission: 'permission'
});

exports.Prisma.TouchScalarFieldEnum = makeEnum({
  id: 'id',
  buildId: 'buildId',
  order: 'order',
  amount: 'amount',
  unit: 'unit',
  genericIngredientID: 'genericIngredientID',
  specificIngredientID: 'specificIngredientID'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserCrewScalarFieldEnum = makeEnum({
  userId: 'userId',
  crewId: 'crewId',
  permission: 'permission'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  userName: 'userName',
  firstName: 'firstName',
  lastName: 'lastName',
  dateJoined: 'dateJoined',
  lastEdited: 'lastEdited',
  email: 'email',
  password: 'password'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Profile: 'Profile',
  RecipeBook: 'RecipeBook',
  RecipeBookUser: 'RecipeBookUser',
  Build: 'Build',
  BuildUser: 'BuildUser',
  Recipe: 'Recipe',
  RecipeBookBuild: 'RecipeBookBuild',
  Touch: 'Touch',
  GenericIngredient: 'GenericIngredient',
  SpecificIngredient: 'SpecificIngredient',
  IngredientPreference: 'IngredientPreference',
  Inventory: 'Inventory',
  InventoryUser: 'InventoryUser',
  Storage: 'Storage',
  InventoryStorage: 'InventoryStorage',
  IngredientStorage: 'IngredientStorage',
  StorageUser: 'StorageUser',
  Crew: 'Crew',
  UserCrew: 'UserCrew'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
