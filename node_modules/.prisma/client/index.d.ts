
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Groups
 * 
 */
export type Groups = {
  id: number
  groupName: string
  dateCreated: Date
}

/**
 * Model GroupsIngredients
 * 
 */
export type GroupsIngredients = {
  groupId: number
  ingredientId: number
}

/**
 * Model GroupsMods
 * 
 */
export type GroupsMods = {
  userId: number
  groupId: number
}

/**
 * Model GroupVersion
 * 
 */
export type GroupVersion = {
  groupId: number
  versionId: number
}

/**
 * Model GroupsUsers
 * 
 */
export type GroupsUsers = {
  userId: number
  groupId: number
}

/**
 * Model Ingredient
 * 
 */
export type Ingredient = {
  id: number
  date_created: Date
  name: string
  amount: number | null
  unit: string | null
  price: Prisma.Decimal | null
  source: string | null
  postedById: number | null
}

/**
 * Model Spec
 * 
 */
export type Spec = {
  id: number
  ingredientId: number | null
  order: number | null
  amount: number | null
  unit: string | null
  versionId: number | null
  postedById: number | null
}

/**
 * Model Recipe
 * 
 */
export type Recipe = {
  id: number
  createdAt: Date
  name: string
  origin: string
  history: string | null
  postedById: number | null
}

/**
 * Model Version
 * 
 */
export type Version = {
  id: number
  versionName: string
  postedById: number | null
  instructions: string | null
  glassware: string | null
  ice: string | null
  recipeId: number | null
}

/**
 * Model UserData
 * 
 */
export type UserData = {
  id: number
  userId: number | null
  userBio: string | null
  workPlace: string | null
  profilePicture: string | null
}

/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  user_name: string
  first_name: string | null
  last_name: string | null
  date_joined: Date
  email: string
  password: string
}

/**
 * Model SharedIngredient
 * 
 */
export type SharedIngredient = {
  userId: number
  ingredientId: number
}

/**
 * Model SharedVersion
 * 
 */
export type SharedVersion = {
  userId: number
  versionId: number
}

/**
 * Model AdminOnVersion
 * 
 */
export type AdminOnVersion = {
  userId: number
  versionId: number
  assignedById: number
  assignedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Groups
 * const groups = await prisma.groups.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Groups
   * const groups = await prisma.groups.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.groups`: Exposes CRUD operations for the **Groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.GroupsDelegate<GlobalReject>;

  /**
   * `prisma.groupsIngredients`: Exposes CRUD operations for the **GroupsIngredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupsIngredients
    * const groupsIngredients = await prisma.groupsIngredients.findMany()
    * ```
    */
  get groupsIngredients(): Prisma.GroupsIngredientsDelegate<GlobalReject>;

  /**
   * `prisma.groupsMods`: Exposes CRUD operations for the **GroupsMods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupsMods
    * const groupsMods = await prisma.groupsMods.findMany()
    * ```
    */
  get groupsMods(): Prisma.GroupsModsDelegate<GlobalReject>;

  /**
   * `prisma.groupVersion`: Exposes CRUD operations for the **GroupVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupVersions
    * const groupVersions = await prisma.groupVersion.findMany()
    * ```
    */
  get groupVersion(): Prisma.GroupVersionDelegate<GlobalReject>;

  /**
   * `prisma.groupsUsers`: Exposes CRUD operations for the **GroupsUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupsUsers
    * const groupsUsers = await prisma.groupsUsers.findMany()
    * ```
    */
  get groupsUsers(): Prisma.GroupsUsersDelegate<GlobalReject>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<GlobalReject>;

  /**
   * `prisma.spec`: Exposes CRUD operations for the **Spec** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specs
    * const specs = await prisma.spec.findMany()
    * ```
    */
  get spec(): Prisma.SpecDelegate<GlobalReject>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<GlobalReject>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<GlobalReject>;

  /**
   * `prisma.userData`: Exposes CRUD operations for the **UserData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserData
    * const userData = await prisma.userData.findMany()
    * ```
    */
  get userData(): Prisma.UserDataDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.sharedIngredient`: Exposes CRUD operations for the **SharedIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SharedIngredients
    * const sharedIngredients = await prisma.sharedIngredient.findMany()
    * ```
    */
  get sharedIngredient(): Prisma.SharedIngredientDelegate<GlobalReject>;

  /**
   * `prisma.sharedVersion`: Exposes CRUD operations for the **SharedVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SharedVersions
    * const sharedVersions = await prisma.sharedVersion.findMany()
    * ```
    */
  get sharedVersion(): Prisma.SharedVersionDelegate<GlobalReject>;

  /**
   * `prisma.adminOnVersion`: Exposes CRUD operations for the **AdminOnVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminOnVersions
    * const adminOnVersions = await prisma.adminOnVersion.findMany()
    * ```
    */
  get adminOnVersion(): Prisma.AdminOnVersionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Groups: 'Groups',
    GroupsIngredients: 'GroupsIngredients',
    GroupsMods: 'GroupsMods',
    GroupVersion: 'GroupVersion',
    GroupsUsers: 'GroupsUsers',
    Ingredient: 'Ingredient',
    Spec: 'Spec',
    Recipe: 'Recipe',
    Version: 'Version',
    UserData: 'UserData',
    Users: 'Users',
    SharedIngredient: 'SharedIngredient',
    SharedVersion: 'SharedVersion',
    AdminOnVersion: 'AdminOnVersion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GroupsCountOutputType
   */


  export type GroupsCountOutputType = {
    groupsIngredients: number
    GroupsMods: number
    GroupVersion: number
    GroupsUsers: number
  }

  export type GroupsCountOutputTypeSelect = {
    groupsIngredients?: boolean
    GroupsMods?: boolean
    GroupVersion?: boolean
    GroupsUsers?: boolean
  }

  export type GroupsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GroupsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GroupsCountOutputType
    : S extends undefined
    ? never
    : S extends GroupsCountOutputTypeArgs
    ?'include' extends U
    ? GroupsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GroupsCountOutputType ? GroupsCountOutputType[P] : never
  } 
    : GroupsCountOutputType
  : GroupsCountOutputType




  // Custom InputTypes

  /**
   * GroupsCountOutputType without action
   */
  export type GroupsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupsCountOutputType
     * 
    **/
    select?: GroupsCountOutputTypeSelect | null
  }



  /**
   * Count Type IngredientCountOutputType
   */


  export type IngredientCountOutputType = {
    groupsIngredients: number
    spec: number
    sharedIngredient: number
  }

  export type IngredientCountOutputTypeSelect = {
    groupsIngredients?: boolean
    spec?: boolean
    sharedIngredient?: boolean
  }

  export type IngredientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | IngredientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? IngredientCountOutputType
    : S extends undefined
    ? never
    : S extends IngredientCountOutputTypeArgs
    ?'include' extends U
    ? IngredientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof IngredientCountOutputType ? IngredientCountOutputType[P] : never
  } 
    : IngredientCountOutputType
  : IngredientCountOutputType




  // Custom InputTypes

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     * 
    **/
    select?: IngredientCountOutputTypeSelect | null
  }



  /**
   * Count Type RecipeCountOutputType
   */


  export type RecipeCountOutputType = {
    version: number
  }

  export type RecipeCountOutputTypeSelect = {
    version?: boolean
  }

  export type RecipeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RecipeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RecipeCountOutputType
    : S extends undefined
    ? never
    : S extends RecipeCountOutputTypeArgs
    ?'include' extends U
    ? RecipeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RecipeCountOutputType ? RecipeCountOutputType[P] : never
  } 
    : RecipeCountOutputType
  : RecipeCountOutputType




  // Custom InputTypes

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     * 
    **/
    select?: RecipeCountOutputTypeSelect | null
  }



  /**
   * Count Type VersionCountOutputType
   */


  export type VersionCountOutputType = {
    groupVersion: number
    sharedVersion: number
    specs: number
    adminOnVersion: number
  }

  export type VersionCountOutputTypeSelect = {
    groupVersion?: boolean
    sharedVersion?: boolean
    specs?: boolean
    adminOnVersion?: boolean
  }

  export type VersionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VersionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VersionCountOutputType
    : S extends undefined
    ? never
    : S extends VersionCountOutputTypeArgs
    ?'include' extends U
    ? VersionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VersionCountOutputType ? VersionCountOutputType[P] : never
  } 
    : VersionCountOutputType
  : VersionCountOutputType




  // Custom InputTypes

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VersionCountOutputType
     * 
    **/
    select?: VersionCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    groupsMods: number
    groupsUsers: number
    userData: number
    sharedIngredient: number
    sharedVersion: number
    recipes: number
    version: number
    ingredients: number
    spec: number
    adminOnVersion: number
  }

  export type UsersCountOutputTypeSelect = {
    groupsMods?: boolean
    groupsUsers?: boolean
    userData?: boolean
    sharedIngredient?: boolean
    sharedVersion?: boolean
    recipes?: boolean
    version?: boolean
    ingredients?: boolean
    spec?: boolean
    adminOnVersion?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupsSumAggregateOutputType = {
    id: number | null
  }

  export type GroupsMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    dateCreated: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    dateCreated: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    groupName: number
    dateCreated: number
    _all: number
  }


  export type GroupsAvgAggregateInputType = {
    id?: true
  }

  export type GroupsSumAggregateInputType = {
    id?: true
  }

  export type GroupsMinAggregateInputType = {
    id?: true
    groupName?: true
    dateCreated?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    groupName?: true
    dateCreated?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    groupName?: true
    dateCreated?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which Groups to aggregate.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs = {
    where?: GroupsWhereInput
    orderBy?: Enumerable<GroupsOrderByWithAggregationInput>
    by: Array<GroupsScalarFieldEnum>
    having?: GroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _avg?: GroupsAvgAggregateInputType
    _sum?: GroupsSumAggregateInputType
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    id: number
    groupName: string
    dateCreated: Date
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsSelect = {
    id?: boolean
    groupName?: boolean
    dateCreated?: boolean
    groupsIngredients?: boolean | GroupsIngredientsFindManyArgs
    GroupsMods?: boolean | GroupsModsFindManyArgs
    GroupVersion?: boolean | GroupVersionFindManyArgs
    GroupsUsers?: boolean | GroupsUsersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsInclude = {
    groupsIngredients?: boolean | GroupsIngredientsFindManyArgs
    GroupsMods?: boolean | GroupsModsFindManyArgs
    GroupVersion?: boolean | GroupVersionFindManyArgs
    GroupsUsers?: boolean | GroupsUsersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsGetPayload<
    S extends boolean | null | undefined | GroupsArgs,
    U = keyof S
      > = S extends true
        ? Groups
    : S extends undefined
    ? never
    : S extends GroupsArgs | GroupsFindManyArgs
    ?'include' extends U
    ? Groups  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groupsIngredients' ? Array < GroupsIngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'GroupsMods' ? Array < GroupsModsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'GroupVersion' ? Array < GroupVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'GroupsUsers' ? Array < GroupsUsersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groupsIngredients' ? Array < GroupsIngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'GroupsMods' ? Array < GroupsModsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'GroupVersion' ? Array < GroupVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'GroupsUsers' ? Array < GroupsUsersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Groups ? Groups[P] : never
  } 
    : Groups
  : Groups


  type GroupsCountArgs = Merge<
    Omit<GroupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }
  >

  export interface GroupsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups that matches the filter.
     * @param {GroupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupsFindManyArgs>(
      args?: SelectSubset<T, GroupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Groups>>, PrismaPromise<Array<GroupsGetPayload<T>>>>

    /**
     * Create a Groups.
     * @param {GroupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends GroupsCreateArgs>(
      args: SelectSubset<T, GroupsCreateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Create many Groups.
     *     @param {GroupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsCreateManyArgs>(
      args?: SelectSubset<T, GroupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {GroupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends GroupsDeleteArgs>(
      args: SelectSubset<T, GroupsDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Update one Groups.
     * @param {GroupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsUpdateArgs>(
      args: SelectSubset<T, GroupsUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Delete zero or more Groups.
     * @param {GroupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsUpdateManyArgs>(
      args: SelectSubset<T, GroupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {GroupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsUpsertArgs>(
      args: SelectSubset<T, GroupsUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find one Groups that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsFindUniqueOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find the first Groups that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupsCountArgs>(
      args?: Subset<T, GroupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groupsIngredients<T extends GroupsIngredientsFindManyArgs = {}>(args?: Subset<T, GroupsIngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsIngredients>>, PrismaPromise<Array<GroupsIngredientsGetPayload<T>>>>;

    GroupsMods<T extends GroupsModsFindManyArgs = {}>(args?: Subset<T, GroupsModsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsMods>>, PrismaPromise<Array<GroupsModsGetPayload<T>>>>;

    GroupVersion<T extends GroupVersionFindManyArgs = {}>(args?: Subset<T, GroupVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupVersion>>, PrismaPromise<Array<GroupVersionGetPayload<T>>>>;

    GroupsUsers<T extends GroupsUsersFindManyArgs = {}>(args?: Subset<T, GroupsUsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsUsers>>, PrismaPromise<Array<GroupsUsersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups base type for findUnique actions
   */
  export type GroupsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups: findUnique
   */
  export interface GroupsFindUniqueArgs extends GroupsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups base type for findFirst actions
   */
  export type GroupsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     * 
    **/
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }

  /**
   * Groups: findFirst
   */
  export interface GroupsFindFirstArgs extends GroupsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups findMany
   */
  export type GroupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Groups create
   */
  export type GroupsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to create a Groups.
     * 
    **/
    data: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
  }


  /**
   * Groups createMany
   */
  export type GroupsCreateManyArgs = {
    /**
     * The data used to create many Groups.
     * 
    **/
    data: Enumerable<GroupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups update
   */
  export type GroupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to update a Groups.
     * 
    **/
    data: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
    /**
     * Choose, which Groups to update.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups updateMany
   */
  export type GroupsUpdateManyArgs = {
    /**
     * The data used to update Groups.
     * 
    **/
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups upsert
   */
  export type GroupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The filter to search for the Groups to update in case it exists.
     * 
    **/
    where: GroupsWhereUniqueInput
    /**
     * In case the Groups found by the `where` argument doesn't exist, create a new Groups with this data.
     * 
    **/
    create: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
    /**
     * In case the Groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
  }


  /**
   * Groups delete
   */
  export type GroupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter which Groups to delete.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups deleteMany
   */
  export type GroupsDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups: findUniqueOrThrow
   */
  export type GroupsFindUniqueOrThrowArgs = GroupsFindUniqueArgsBase
      

  /**
   * Groups: findFirstOrThrow
   */
  export type GroupsFindFirstOrThrowArgs = GroupsFindFirstArgsBase
      

  /**
   * Groups without action
   */
  export type GroupsArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
  }



  /**
   * Model GroupsIngredients
   */


  export type AggregateGroupsIngredients = {
    _count: GroupsIngredientsCountAggregateOutputType | null
    _avg: GroupsIngredientsAvgAggregateOutputType | null
    _sum: GroupsIngredientsSumAggregateOutputType | null
    _min: GroupsIngredientsMinAggregateOutputType | null
    _max: GroupsIngredientsMaxAggregateOutputType | null
  }

  export type GroupsIngredientsAvgAggregateOutputType = {
    groupId: number | null
    ingredientId: number | null
  }

  export type GroupsIngredientsSumAggregateOutputType = {
    groupId: number | null
    ingredientId: number | null
  }

  export type GroupsIngredientsMinAggregateOutputType = {
    groupId: number | null
    ingredientId: number | null
  }

  export type GroupsIngredientsMaxAggregateOutputType = {
    groupId: number | null
    ingredientId: number | null
  }

  export type GroupsIngredientsCountAggregateOutputType = {
    groupId: number
    ingredientId: number
    _all: number
  }


  export type GroupsIngredientsAvgAggregateInputType = {
    groupId?: true
    ingredientId?: true
  }

  export type GroupsIngredientsSumAggregateInputType = {
    groupId?: true
    ingredientId?: true
  }

  export type GroupsIngredientsMinAggregateInputType = {
    groupId?: true
    ingredientId?: true
  }

  export type GroupsIngredientsMaxAggregateInputType = {
    groupId?: true
    ingredientId?: true
  }

  export type GroupsIngredientsCountAggregateInputType = {
    groupId?: true
    ingredientId?: true
    _all?: true
  }

  export type GroupsIngredientsAggregateArgs = {
    /**
     * Filter which GroupsIngredients to aggregate.
     * 
    **/
    where?: GroupsIngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsIngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsIngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsIngredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupsIngredients
    **/
    _count?: true | GroupsIngredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsIngredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsIngredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsIngredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsIngredientsMaxAggregateInputType
  }

  export type GetGroupsIngredientsAggregateType<T extends GroupsIngredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupsIngredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupsIngredients[P]>
      : GetScalarType<T[P], AggregateGroupsIngredients[P]>
  }




  export type GroupsIngredientsGroupByArgs = {
    where?: GroupsIngredientsWhereInput
    orderBy?: Enumerable<GroupsIngredientsOrderByWithAggregationInput>
    by: Array<GroupsIngredientsScalarFieldEnum>
    having?: GroupsIngredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsIngredientsCountAggregateInputType | true
    _avg?: GroupsIngredientsAvgAggregateInputType
    _sum?: GroupsIngredientsSumAggregateInputType
    _min?: GroupsIngredientsMinAggregateInputType
    _max?: GroupsIngredientsMaxAggregateInputType
  }


  export type GroupsIngredientsGroupByOutputType = {
    groupId: number
    ingredientId: number
    _count: GroupsIngredientsCountAggregateOutputType | null
    _avg: GroupsIngredientsAvgAggregateOutputType | null
    _sum: GroupsIngredientsSumAggregateOutputType | null
    _min: GroupsIngredientsMinAggregateOutputType | null
    _max: GroupsIngredientsMaxAggregateOutputType | null
  }

  type GetGroupsIngredientsGroupByPayload<T extends GroupsIngredientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsIngredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsIngredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsIngredientsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsIngredientsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsIngredientsSelect = {
    groupId?: boolean
    ingredientId?: boolean
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientArgs
  }

  export type GroupsIngredientsInclude = {
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientArgs
  }

  export type GroupsIngredientsGetPayload<
    S extends boolean | null | undefined | GroupsIngredientsArgs,
    U = keyof S
      > = S extends true
        ? GroupsIngredients
    : S extends undefined
    ? never
    : S extends GroupsIngredientsArgs | GroupsIngredientsFindManyArgs
    ?'include' extends U
    ? GroupsIngredients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof GroupsIngredients ? GroupsIngredients[P] : never
  } 
    : GroupsIngredients
  : GroupsIngredients


  type GroupsIngredientsCountArgs = Merge<
    Omit<GroupsIngredientsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsIngredientsCountAggregateInputType | true
    }
  >

  export interface GroupsIngredientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GroupsIngredients that matches the filter.
     * @param {GroupsIngredientsFindUniqueArgs} args - Arguments to find a GroupsIngredients
     * @example
     * // Get one GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsIngredientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsIngredientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupsIngredients'> extends True ? CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients | null >, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T> | null >>

    /**
     * Find the first GroupsIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsFindFirstArgs} args - Arguments to find a GroupsIngredients
     * @example
     * // Get one GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsIngredientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsIngredientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupsIngredients'> extends True ? CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients | null >, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T> | null >>

    /**
     * Find zero or more GroupsIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findMany()
     * 
     * // Get first 10 GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findMany({ take: 10 })
     * 
     * // Only select the `groupId`
     * const groupsIngredientsWithGroupIdOnly = await prisma.groupsIngredients.findMany({ select: { groupId: true } })
     * 
    **/
    findMany<T extends GroupsIngredientsFindManyArgs>(
      args?: SelectSubset<T, GroupsIngredientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupsIngredients>>, PrismaPromise<Array<GroupsIngredientsGetPayload<T>>>>

    /**
     * Create a GroupsIngredients.
     * @param {GroupsIngredientsCreateArgs} args - Arguments to create a GroupsIngredients.
     * @example
     * // Create one GroupsIngredients
     * const GroupsIngredients = await prisma.groupsIngredients.create({
     *   data: {
     *     // ... data to create a GroupsIngredients
     *   }
     * })
     * 
    **/
    create<T extends GroupsIngredientsCreateArgs>(
      args: SelectSubset<T, GroupsIngredientsCreateArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Create many GroupsIngredients.
     *     @param {GroupsIngredientsCreateManyArgs} args - Arguments to create many GroupsIngredients.
     *     @example
     *     // Create many GroupsIngredients
     *     const groupsIngredients = await prisma.groupsIngredients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsIngredientsCreateManyArgs>(
      args?: SelectSubset<T, GroupsIngredientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupsIngredients.
     * @param {GroupsIngredientsDeleteArgs} args - Arguments to delete one GroupsIngredients.
     * @example
     * // Delete one GroupsIngredients
     * const GroupsIngredients = await prisma.groupsIngredients.delete({
     *   where: {
     *     // ... filter to delete one GroupsIngredients
     *   }
     * })
     * 
    **/
    delete<T extends GroupsIngredientsDeleteArgs>(
      args: SelectSubset<T, GroupsIngredientsDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Update one GroupsIngredients.
     * @param {GroupsIngredientsUpdateArgs} args - Arguments to update one GroupsIngredients.
     * @example
     * // Update one GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsIngredientsUpdateArgs>(
      args: SelectSubset<T, GroupsIngredientsUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Delete zero or more GroupsIngredients.
     * @param {GroupsIngredientsDeleteManyArgs} args - Arguments to filter GroupsIngredients to delete.
     * @example
     * // Delete a few GroupsIngredients
     * const { count } = await prisma.groupsIngredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsIngredientsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsIngredientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupsIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsIngredientsUpdateManyArgs>(
      args: SelectSubset<T, GroupsIngredientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupsIngredients.
     * @param {GroupsIngredientsUpsertArgs} args - Arguments to update or create a GroupsIngredients.
     * @example
     * // Update or create a GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.upsert({
     *   create: {
     *     // ... data to create a GroupsIngredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupsIngredients we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsIngredientsUpsertArgs>(
      args: SelectSubset<T, GroupsIngredientsUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Find one GroupsIngredients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsIngredientsFindUniqueOrThrowArgs} args - Arguments to find a GroupsIngredients
     * @example
     * // Get one GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsIngredientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsIngredientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Find the first GroupsIngredients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsFindFirstOrThrowArgs} args - Arguments to find a GroupsIngredients
     * @example
     * // Get one GroupsIngredients
     * const groupsIngredients = await prisma.groupsIngredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsIngredientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsIngredientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsIngredientsClient<GroupsIngredients>, Prisma__GroupsIngredientsClient<GroupsIngredientsGetPayload<T>>>

    /**
     * Count the number of GroupsIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsCountArgs} args - Arguments to filter GroupsIngredients to count.
     * @example
     * // Count the number of GroupsIngredients
     * const count = await prisma.groupsIngredients.count({
     *   where: {
     *     // ... the filter for the GroupsIngredients we want to count
     *   }
     * })
    **/
    count<T extends GroupsIngredientsCountArgs>(
      args?: Subset<T, GroupsIngredientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsIngredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupsIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsIngredientsAggregateArgs>(args: Subset<T, GroupsIngredientsAggregateArgs>): PrismaPromise<GetGroupsIngredientsAggregateType<T>>

    /**
     * Group by GroupsIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsIngredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsIngredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsIngredientsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsIngredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsIngredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsIngredientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupsIngredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsIngredientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    ingredients<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupsIngredients base type for findUnique actions
   */
  export type GroupsIngredientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * Filter, which GroupsIngredients to fetch.
     * 
    **/
    where: GroupsIngredientsWhereUniqueInput
  }

  /**
   * GroupsIngredients: findUnique
   */
  export interface GroupsIngredientsFindUniqueArgs extends GroupsIngredientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsIngredients base type for findFirst actions
   */
  export type GroupsIngredientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * Filter, which GroupsIngredients to fetch.
     * 
    **/
    where?: GroupsIngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsIngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupsIngredients.
     * 
    **/
    cursor?: GroupsIngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsIngredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupsIngredients.
     * 
    **/
    distinct?: Enumerable<GroupsIngredientsScalarFieldEnum>
  }

  /**
   * GroupsIngredients: findFirst
   */
  export interface GroupsIngredientsFindFirstArgs extends GroupsIngredientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsIngredients findMany
   */
  export type GroupsIngredientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * Filter, which GroupsIngredients to fetch.
     * 
    **/
    where?: GroupsIngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsIngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupsIngredients.
     * 
    **/
    cursor?: GroupsIngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsIngredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsIngredientsScalarFieldEnum>
  }


  /**
   * GroupsIngredients create
   */
  export type GroupsIngredientsCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * The data needed to create a GroupsIngredients.
     * 
    **/
    data: XOR<GroupsIngredientsCreateInput, GroupsIngredientsUncheckedCreateInput>
  }


  /**
   * GroupsIngredients createMany
   */
  export type GroupsIngredientsCreateManyArgs = {
    /**
     * The data used to create many GroupsIngredients.
     * 
    **/
    data: Enumerable<GroupsIngredientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupsIngredients update
   */
  export type GroupsIngredientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * The data needed to update a GroupsIngredients.
     * 
    **/
    data: XOR<GroupsIngredientsUpdateInput, GroupsIngredientsUncheckedUpdateInput>
    /**
     * Choose, which GroupsIngredients to update.
     * 
    **/
    where: GroupsIngredientsWhereUniqueInput
  }


  /**
   * GroupsIngredients updateMany
   */
  export type GroupsIngredientsUpdateManyArgs = {
    /**
     * The data used to update GroupsIngredients.
     * 
    **/
    data: XOR<GroupsIngredientsUpdateManyMutationInput, GroupsIngredientsUncheckedUpdateManyInput>
    /**
     * Filter which GroupsIngredients to update
     * 
    **/
    where?: GroupsIngredientsWhereInput
  }


  /**
   * GroupsIngredients upsert
   */
  export type GroupsIngredientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * The filter to search for the GroupsIngredients to update in case it exists.
     * 
    **/
    where: GroupsIngredientsWhereUniqueInput
    /**
     * In case the GroupsIngredients found by the `where` argument doesn't exist, create a new GroupsIngredients with this data.
     * 
    **/
    create: XOR<GroupsIngredientsCreateInput, GroupsIngredientsUncheckedCreateInput>
    /**
     * In case the GroupsIngredients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsIngredientsUpdateInput, GroupsIngredientsUncheckedUpdateInput>
  }


  /**
   * GroupsIngredients delete
   */
  export type GroupsIngredientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
    /**
     * Filter which GroupsIngredients to delete.
     * 
    **/
    where: GroupsIngredientsWhereUniqueInput
  }


  /**
   * GroupsIngredients deleteMany
   */
  export type GroupsIngredientsDeleteManyArgs = {
    /**
     * Filter which GroupsIngredients to delete
     * 
    **/
    where?: GroupsIngredientsWhereInput
  }


  /**
   * GroupsIngredients: findUniqueOrThrow
   */
  export type GroupsIngredientsFindUniqueOrThrowArgs = GroupsIngredientsFindUniqueArgsBase
      

  /**
   * GroupsIngredients: findFirstOrThrow
   */
  export type GroupsIngredientsFindFirstOrThrowArgs = GroupsIngredientsFindFirstArgsBase
      

  /**
   * GroupsIngredients without action
   */
  export type GroupsIngredientsArgs = {
    /**
     * Select specific fields to fetch from the GroupsIngredients
     * 
    **/
    select?: GroupsIngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsIngredientsInclude | null
  }



  /**
   * Model GroupsMods
   */


  export type AggregateGroupsMods = {
    _count: GroupsModsCountAggregateOutputType | null
    _avg: GroupsModsAvgAggregateOutputType | null
    _sum: GroupsModsSumAggregateOutputType | null
    _min: GroupsModsMinAggregateOutputType | null
    _max: GroupsModsMaxAggregateOutputType | null
  }

  export type GroupsModsAvgAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsModsSumAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsModsMinAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsModsMaxAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsModsCountAggregateOutputType = {
    userId: number
    groupId: number
    _all: number
  }


  export type GroupsModsAvgAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsModsSumAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsModsMinAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsModsMaxAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsModsCountAggregateInputType = {
    userId?: true
    groupId?: true
    _all?: true
  }

  export type GroupsModsAggregateArgs = {
    /**
     * Filter which GroupsMods to aggregate.
     * 
    **/
    where?: GroupsModsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsMods to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsModsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsModsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsMods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsMods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupsMods
    **/
    _count?: true | GroupsModsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsModsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsModsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsModsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsModsMaxAggregateInputType
  }

  export type GetGroupsModsAggregateType<T extends GroupsModsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupsMods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupsMods[P]>
      : GetScalarType<T[P], AggregateGroupsMods[P]>
  }




  export type GroupsModsGroupByArgs = {
    where?: GroupsModsWhereInput
    orderBy?: Enumerable<GroupsModsOrderByWithAggregationInput>
    by: Array<GroupsModsScalarFieldEnum>
    having?: GroupsModsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsModsCountAggregateInputType | true
    _avg?: GroupsModsAvgAggregateInputType
    _sum?: GroupsModsSumAggregateInputType
    _min?: GroupsModsMinAggregateInputType
    _max?: GroupsModsMaxAggregateInputType
  }


  export type GroupsModsGroupByOutputType = {
    userId: number
    groupId: number
    _count: GroupsModsCountAggregateOutputType | null
    _avg: GroupsModsAvgAggregateOutputType | null
    _sum: GroupsModsSumAggregateOutputType | null
    _min: GroupsModsMinAggregateOutputType | null
    _max: GroupsModsMaxAggregateOutputType | null
  }

  type GetGroupsModsGroupByPayload<T extends GroupsModsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsModsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsModsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsModsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsModsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsModsSelect = {
    userId?: boolean
    groupId?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type GroupsModsInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type GroupsModsGetPayload<
    S extends boolean | null | undefined | GroupsModsArgs,
    U = keyof S
      > = S extends true
        ? GroupsMods
    : S extends undefined
    ? never
    : S extends GroupsModsArgs | GroupsModsFindManyArgs
    ?'include' extends U
    ? GroupsMods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof GroupsMods ? GroupsMods[P] : never
  } 
    : GroupsMods
  : GroupsMods


  type GroupsModsCountArgs = Merge<
    Omit<GroupsModsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsModsCountAggregateInputType | true
    }
  >

  export interface GroupsModsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GroupsMods that matches the filter.
     * @param {GroupsModsFindUniqueArgs} args - Arguments to find a GroupsMods
     * @example
     * // Get one GroupsMods
     * const groupsMods = await prisma.groupsMods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsModsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsModsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupsMods'> extends True ? CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsModsClient<GroupsMods | null >, Prisma__GroupsModsClient<GroupsModsGetPayload<T> | null >>

    /**
     * Find the first GroupsMods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsFindFirstArgs} args - Arguments to find a GroupsMods
     * @example
     * // Get one GroupsMods
     * const groupsMods = await prisma.groupsMods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsModsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsModsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupsMods'> extends True ? CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsModsClient<GroupsMods | null >, Prisma__GroupsModsClient<GroupsModsGetPayload<T> | null >>

    /**
     * Find zero or more GroupsMods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupsMods
     * const groupsMods = await prisma.groupsMods.findMany()
     * 
     * // Get first 10 GroupsMods
     * const groupsMods = await prisma.groupsMods.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const groupsModsWithUserIdOnly = await prisma.groupsMods.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends GroupsModsFindManyArgs>(
      args?: SelectSubset<T, GroupsModsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupsMods>>, PrismaPromise<Array<GroupsModsGetPayload<T>>>>

    /**
     * Create a GroupsMods.
     * @param {GroupsModsCreateArgs} args - Arguments to create a GroupsMods.
     * @example
     * // Create one GroupsMods
     * const GroupsMods = await prisma.groupsMods.create({
     *   data: {
     *     // ... data to create a GroupsMods
     *   }
     * })
     * 
    **/
    create<T extends GroupsModsCreateArgs>(
      args: SelectSubset<T, GroupsModsCreateArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Create many GroupsMods.
     *     @param {GroupsModsCreateManyArgs} args - Arguments to create many GroupsMods.
     *     @example
     *     // Create many GroupsMods
     *     const groupsMods = await prisma.groupsMods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsModsCreateManyArgs>(
      args?: SelectSubset<T, GroupsModsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupsMods.
     * @param {GroupsModsDeleteArgs} args - Arguments to delete one GroupsMods.
     * @example
     * // Delete one GroupsMods
     * const GroupsMods = await prisma.groupsMods.delete({
     *   where: {
     *     // ... filter to delete one GroupsMods
     *   }
     * })
     * 
    **/
    delete<T extends GroupsModsDeleteArgs>(
      args: SelectSubset<T, GroupsModsDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Update one GroupsMods.
     * @param {GroupsModsUpdateArgs} args - Arguments to update one GroupsMods.
     * @example
     * // Update one GroupsMods
     * const groupsMods = await prisma.groupsMods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsModsUpdateArgs>(
      args: SelectSubset<T, GroupsModsUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Delete zero or more GroupsMods.
     * @param {GroupsModsDeleteManyArgs} args - Arguments to filter GroupsMods to delete.
     * @example
     * // Delete a few GroupsMods
     * const { count } = await prisma.groupsMods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsModsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsModsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupsMods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupsMods
     * const groupsMods = await prisma.groupsMods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsModsUpdateManyArgs>(
      args: SelectSubset<T, GroupsModsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupsMods.
     * @param {GroupsModsUpsertArgs} args - Arguments to update or create a GroupsMods.
     * @example
     * // Update or create a GroupsMods
     * const groupsMods = await prisma.groupsMods.upsert({
     *   create: {
     *     // ... data to create a GroupsMods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupsMods we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsModsUpsertArgs>(
      args: SelectSubset<T, GroupsModsUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Find one GroupsMods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsModsFindUniqueOrThrowArgs} args - Arguments to find a GroupsMods
     * @example
     * // Get one GroupsMods
     * const groupsMods = await prisma.groupsMods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsModsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsModsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Find the first GroupsMods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsFindFirstOrThrowArgs} args - Arguments to find a GroupsMods
     * @example
     * // Get one GroupsMods
     * const groupsMods = await prisma.groupsMods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsModsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsModsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsModsClient<GroupsMods>, Prisma__GroupsModsClient<GroupsModsGetPayload<T>>>

    /**
     * Count the number of GroupsMods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsCountArgs} args - Arguments to filter GroupsMods to count.
     * @example
     * // Count the number of GroupsMods
     * const count = await prisma.groupsMods.count({
     *   where: {
     *     // ... the filter for the GroupsMods we want to count
     *   }
     * })
    **/
    count<T extends GroupsModsCountArgs>(
      args?: Subset<T, GroupsModsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsModsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupsMods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsModsAggregateArgs>(args: Subset<T, GroupsModsAggregateArgs>): PrismaPromise<GetGroupsModsAggregateType<T>>

    /**
     * Group by GroupsMods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsModsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsModsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsModsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsModsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsModsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsModsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupsMods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsModsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupsMods base type for findUnique actions
   */
  export type GroupsModsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * Filter, which GroupsMods to fetch.
     * 
    **/
    where: GroupsModsWhereUniqueInput
  }

  /**
   * GroupsMods: findUnique
   */
  export interface GroupsModsFindUniqueArgs extends GroupsModsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsMods base type for findFirst actions
   */
  export type GroupsModsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * Filter, which GroupsMods to fetch.
     * 
    **/
    where?: GroupsModsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsMods to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsModsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupsMods.
     * 
    **/
    cursor?: GroupsModsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsMods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsMods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupsMods.
     * 
    **/
    distinct?: Enumerable<GroupsModsScalarFieldEnum>
  }

  /**
   * GroupsMods: findFirst
   */
  export interface GroupsModsFindFirstArgs extends GroupsModsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsMods findMany
   */
  export type GroupsModsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * Filter, which GroupsMods to fetch.
     * 
    **/
    where?: GroupsModsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsMods to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsModsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupsMods.
     * 
    **/
    cursor?: GroupsModsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsMods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsMods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsModsScalarFieldEnum>
  }


  /**
   * GroupsMods create
   */
  export type GroupsModsCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * The data needed to create a GroupsMods.
     * 
    **/
    data: XOR<GroupsModsCreateInput, GroupsModsUncheckedCreateInput>
  }


  /**
   * GroupsMods createMany
   */
  export type GroupsModsCreateManyArgs = {
    /**
     * The data used to create many GroupsMods.
     * 
    **/
    data: Enumerable<GroupsModsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupsMods update
   */
  export type GroupsModsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * The data needed to update a GroupsMods.
     * 
    **/
    data: XOR<GroupsModsUpdateInput, GroupsModsUncheckedUpdateInput>
    /**
     * Choose, which GroupsMods to update.
     * 
    **/
    where: GroupsModsWhereUniqueInput
  }


  /**
   * GroupsMods updateMany
   */
  export type GroupsModsUpdateManyArgs = {
    /**
     * The data used to update GroupsMods.
     * 
    **/
    data: XOR<GroupsModsUpdateManyMutationInput, GroupsModsUncheckedUpdateManyInput>
    /**
     * Filter which GroupsMods to update
     * 
    **/
    where?: GroupsModsWhereInput
  }


  /**
   * GroupsMods upsert
   */
  export type GroupsModsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * The filter to search for the GroupsMods to update in case it exists.
     * 
    **/
    where: GroupsModsWhereUniqueInput
    /**
     * In case the GroupsMods found by the `where` argument doesn't exist, create a new GroupsMods with this data.
     * 
    **/
    create: XOR<GroupsModsCreateInput, GroupsModsUncheckedCreateInput>
    /**
     * In case the GroupsMods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsModsUpdateInput, GroupsModsUncheckedUpdateInput>
  }


  /**
   * GroupsMods delete
   */
  export type GroupsModsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
    /**
     * Filter which GroupsMods to delete.
     * 
    **/
    where: GroupsModsWhereUniqueInput
  }


  /**
   * GroupsMods deleteMany
   */
  export type GroupsModsDeleteManyArgs = {
    /**
     * Filter which GroupsMods to delete
     * 
    **/
    where?: GroupsModsWhereInput
  }


  /**
   * GroupsMods: findUniqueOrThrow
   */
  export type GroupsModsFindUniqueOrThrowArgs = GroupsModsFindUniqueArgsBase
      

  /**
   * GroupsMods: findFirstOrThrow
   */
  export type GroupsModsFindFirstOrThrowArgs = GroupsModsFindFirstArgsBase
      

  /**
   * GroupsMods without action
   */
  export type GroupsModsArgs = {
    /**
     * Select specific fields to fetch from the GroupsMods
     * 
    **/
    select?: GroupsModsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsModsInclude | null
  }



  /**
   * Model GroupVersion
   */


  export type AggregateGroupVersion = {
    _count: GroupVersionCountAggregateOutputType | null
    _avg: GroupVersionAvgAggregateOutputType | null
    _sum: GroupVersionSumAggregateOutputType | null
    _min: GroupVersionMinAggregateOutputType | null
    _max: GroupVersionMaxAggregateOutputType | null
  }

  export type GroupVersionAvgAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type GroupVersionSumAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type GroupVersionMinAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type GroupVersionMaxAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type GroupVersionCountAggregateOutputType = {
    groupId: number
    versionId: number
    _all: number
  }


  export type GroupVersionAvgAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type GroupVersionSumAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type GroupVersionMinAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type GroupVersionMaxAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type GroupVersionCountAggregateInputType = {
    groupId?: true
    versionId?: true
    _all?: true
  }

  export type GroupVersionAggregateArgs = {
    /**
     * Filter which GroupVersion to aggregate.
     * 
    **/
    where?: GroupVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupVersions
    **/
    _count?: true | GroupVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupVersionMaxAggregateInputType
  }

  export type GetGroupVersionAggregateType<T extends GroupVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupVersion[P]>
      : GetScalarType<T[P], AggregateGroupVersion[P]>
  }




  export type GroupVersionGroupByArgs = {
    where?: GroupVersionWhereInput
    orderBy?: Enumerable<GroupVersionOrderByWithAggregationInput>
    by: Array<GroupVersionScalarFieldEnum>
    having?: GroupVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupVersionCountAggregateInputType | true
    _avg?: GroupVersionAvgAggregateInputType
    _sum?: GroupVersionSumAggregateInputType
    _min?: GroupVersionMinAggregateInputType
    _max?: GroupVersionMaxAggregateInputType
  }


  export type GroupVersionGroupByOutputType = {
    groupId: number
    versionId: number
    _count: GroupVersionCountAggregateOutputType | null
    _avg: GroupVersionAvgAggregateOutputType | null
    _sum: GroupVersionSumAggregateOutputType | null
    _min: GroupVersionMinAggregateOutputType | null
    _max: GroupVersionMaxAggregateOutputType | null
  }

  type GetGroupVersionGroupByPayload<T extends GroupVersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupVersionGroupByOutputType[P]>
            : GetScalarType<T[P], GroupVersionGroupByOutputType[P]>
        }
      >
    >


  export type GroupVersionSelect = {
    groupId?: boolean
    versionId?: boolean
    groups?: boolean | GroupsArgs
    version?: boolean | VersionArgs
  }

  export type GroupVersionInclude = {
    groups?: boolean | GroupsArgs
    version?: boolean | VersionArgs
  }

  export type GroupVersionGetPayload<
    S extends boolean | null | undefined | GroupVersionArgs,
    U = keyof S
      > = S extends true
        ? GroupVersion
    : S extends undefined
    ? never
    : S extends GroupVersionArgs | GroupVersionFindManyArgs
    ?'include' extends U
    ? GroupVersion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof GroupVersion ? GroupVersion[P] : never
  } 
    : GroupVersion
  : GroupVersion


  type GroupVersionCountArgs = Merge<
    Omit<GroupVersionFindManyArgs, 'select' | 'include'> & {
      select?: GroupVersionCountAggregateInputType | true
    }
  >

  export interface GroupVersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GroupVersion that matches the filter.
     * @param {GroupVersionFindUniqueArgs} args - Arguments to find a GroupVersion
     * @example
     * // Get one GroupVersion
     * const groupVersion = await prisma.groupVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupVersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupVersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupVersion'> extends True ? CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>> : CheckSelect<T, Prisma__GroupVersionClient<GroupVersion | null >, Prisma__GroupVersionClient<GroupVersionGetPayload<T> | null >>

    /**
     * Find the first GroupVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionFindFirstArgs} args - Arguments to find a GroupVersion
     * @example
     * // Get one GroupVersion
     * const groupVersion = await prisma.groupVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupVersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupVersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupVersion'> extends True ? CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>> : CheckSelect<T, Prisma__GroupVersionClient<GroupVersion | null >, Prisma__GroupVersionClient<GroupVersionGetPayload<T> | null >>

    /**
     * Find zero or more GroupVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupVersions
     * const groupVersions = await prisma.groupVersion.findMany()
     * 
     * // Get first 10 GroupVersions
     * const groupVersions = await prisma.groupVersion.findMany({ take: 10 })
     * 
     * // Only select the `groupId`
     * const groupVersionWithGroupIdOnly = await prisma.groupVersion.findMany({ select: { groupId: true } })
     * 
    **/
    findMany<T extends GroupVersionFindManyArgs>(
      args?: SelectSubset<T, GroupVersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupVersion>>, PrismaPromise<Array<GroupVersionGetPayload<T>>>>

    /**
     * Create a GroupVersion.
     * @param {GroupVersionCreateArgs} args - Arguments to create a GroupVersion.
     * @example
     * // Create one GroupVersion
     * const GroupVersion = await prisma.groupVersion.create({
     *   data: {
     *     // ... data to create a GroupVersion
     *   }
     * })
     * 
    **/
    create<T extends GroupVersionCreateArgs>(
      args: SelectSubset<T, GroupVersionCreateArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Create many GroupVersions.
     *     @param {GroupVersionCreateManyArgs} args - Arguments to create many GroupVersions.
     *     @example
     *     // Create many GroupVersions
     *     const groupVersion = await prisma.groupVersion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupVersionCreateManyArgs>(
      args?: SelectSubset<T, GroupVersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupVersion.
     * @param {GroupVersionDeleteArgs} args - Arguments to delete one GroupVersion.
     * @example
     * // Delete one GroupVersion
     * const GroupVersion = await prisma.groupVersion.delete({
     *   where: {
     *     // ... filter to delete one GroupVersion
     *   }
     * })
     * 
    **/
    delete<T extends GroupVersionDeleteArgs>(
      args: SelectSubset<T, GroupVersionDeleteArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Update one GroupVersion.
     * @param {GroupVersionUpdateArgs} args - Arguments to update one GroupVersion.
     * @example
     * // Update one GroupVersion
     * const groupVersion = await prisma.groupVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupVersionUpdateArgs>(
      args: SelectSubset<T, GroupVersionUpdateArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Delete zero or more GroupVersions.
     * @param {GroupVersionDeleteManyArgs} args - Arguments to filter GroupVersions to delete.
     * @example
     * // Delete a few GroupVersions
     * const { count } = await prisma.groupVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupVersionDeleteManyArgs>(
      args?: SelectSubset<T, GroupVersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupVersions
     * const groupVersion = await prisma.groupVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupVersionUpdateManyArgs>(
      args: SelectSubset<T, GroupVersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupVersion.
     * @param {GroupVersionUpsertArgs} args - Arguments to update or create a GroupVersion.
     * @example
     * // Update or create a GroupVersion
     * const groupVersion = await prisma.groupVersion.upsert({
     *   create: {
     *     // ... data to create a GroupVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupVersion we want to update
     *   }
     * })
    **/
    upsert<T extends GroupVersionUpsertArgs>(
      args: SelectSubset<T, GroupVersionUpsertArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Find one GroupVersion that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupVersionFindUniqueOrThrowArgs} args - Arguments to find a GroupVersion
     * @example
     * // Get one GroupVersion
     * const groupVersion = await prisma.groupVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupVersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupVersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Find the first GroupVersion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionFindFirstOrThrowArgs} args - Arguments to find a GroupVersion
     * @example
     * // Get one GroupVersion
     * const groupVersion = await prisma.groupVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupVersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupVersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupVersionClient<GroupVersion>, Prisma__GroupVersionClient<GroupVersionGetPayload<T>>>

    /**
     * Count the number of GroupVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionCountArgs} args - Arguments to filter GroupVersions to count.
     * @example
     * // Count the number of GroupVersions
     * const count = await prisma.groupVersion.count({
     *   where: {
     *     // ... the filter for the GroupVersions we want to count
     *   }
     * })
    **/
    count<T extends GroupVersionCountArgs>(
      args?: Subset<T, GroupVersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupVersionAggregateArgs>(args: Subset<T, GroupVersionAggregateArgs>): PrismaPromise<GetGroupVersionAggregateType<T>>

    /**
     * Group by GroupVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupVersionGroupByArgs['orderBy'] }
        : { orderBy?: GroupVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupVersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupVersion base type for findUnique actions
   */
  export type GroupVersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * Filter, which GroupVersion to fetch.
     * 
    **/
    where: GroupVersionWhereUniqueInput
  }

  /**
   * GroupVersion: findUnique
   */
  export interface GroupVersionFindUniqueArgs extends GroupVersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupVersion base type for findFirst actions
   */
  export type GroupVersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * Filter, which GroupVersion to fetch.
     * 
    **/
    where?: GroupVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupVersions.
     * 
    **/
    cursor?: GroupVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupVersions.
     * 
    **/
    distinct?: Enumerable<GroupVersionScalarFieldEnum>
  }

  /**
   * GroupVersion: findFirst
   */
  export interface GroupVersionFindFirstArgs extends GroupVersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupVersion findMany
   */
  export type GroupVersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * Filter, which GroupVersions to fetch.
     * 
    **/
    where?: GroupVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupVersions.
     * 
    **/
    cursor?: GroupVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupVersions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupVersionScalarFieldEnum>
  }


  /**
   * GroupVersion create
   */
  export type GroupVersionCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * The data needed to create a GroupVersion.
     * 
    **/
    data: XOR<GroupVersionCreateInput, GroupVersionUncheckedCreateInput>
  }


  /**
   * GroupVersion createMany
   */
  export type GroupVersionCreateManyArgs = {
    /**
     * The data used to create many GroupVersions.
     * 
    **/
    data: Enumerable<GroupVersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupVersion update
   */
  export type GroupVersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * The data needed to update a GroupVersion.
     * 
    **/
    data: XOR<GroupVersionUpdateInput, GroupVersionUncheckedUpdateInput>
    /**
     * Choose, which GroupVersion to update.
     * 
    **/
    where: GroupVersionWhereUniqueInput
  }


  /**
   * GroupVersion updateMany
   */
  export type GroupVersionUpdateManyArgs = {
    /**
     * The data used to update GroupVersions.
     * 
    **/
    data: XOR<GroupVersionUpdateManyMutationInput, GroupVersionUncheckedUpdateManyInput>
    /**
     * Filter which GroupVersions to update
     * 
    **/
    where?: GroupVersionWhereInput
  }


  /**
   * GroupVersion upsert
   */
  export type GroupVersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * The filter to search for the GroupVersion to update in case it exists.
     * 
    **/
    where: GroupVersionWhereUniqueInput
    /**
     * In case the GroupVersion found by the `where` argument doesn't exist, create a new GroupVersion with this data.
     * 
    **/
    create: XOR<GroupVersionCreateInput, GroupVersionUncheckedCreateInput>
    /**
     * In case the GroupVersion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupVersionUpdateInput, GroupVersionUncheckedUpdateInput>
  }


  /**
   * GroupVersion delete
   */
  export type GroupVersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
    /**
     * Filter which GroupVersion to delete.
     * 
    **/
    where: GroupVersionWhereUniqueInput
  }


  /**
   * GroupVersion deleteMany
   */
  export type GroupVersionDeleteManyArgs = {
    /**
     * Filter which GroupVersions to delete
     * 
    **/
    where?: GroupVersionWhereInput
  }


  /**
   * GroupVersion: findUniqueOrThrow
   */
  export type GroupVersionFindUniqueOrThrowArgs = GroupVersionFindUniqueArgsBase
      

  /**
   * GroupVersion: findFirstOrThrow
   */
  export type GroupVersionFindFirstOrThrowArgs = GroupVersionFindFirstArgsBase
      

  /**
   * GroupVersion without action
   */
  export type GroupVersionArgs = {
    /**
     * Select specific fields to fetch from the GroupVersion
     * 
    **/
    select?: GroupVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupVersionInclude | null
  }



  /**
   * Model GroupsUsers
   */


  export type AggregateGroupsUsers = {
    _count: GroupsUsersCountAggregateOutputType | null
    _avg: GroupsUsersAvgAggregateOutputType | null
    _sum: GroupsUsersSumAggregateOutputType | null
    _min: GroupsUsersMinAggregateOutputType | null
    _max: GroupsUsersMaxAggregateOutputType | null
  }

  export type GroupsUsersAvgAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsUsersSumAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsUsersMinAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsUsersMaxAggregateOutputType = {
    userId: number | null
    groupId: number | null
  }

  export type GroupsUsersCountAggregateOutputType = {
    userId: number
    groupId: number
    _all: number
  }


  export type GroupsUsersAvgAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsUsersSumAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsUsersMinAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsUsersMaxAggregateInputType = {
    userId?: true
    groupId?: true
  }

  export type GroupsUsersCountAggregateInputType = {
    userId?: true
    groupId?: true
    _all?: true
  }

  export type GroupsUsersAggregateArgs = {
    /**
     * Filter which GroupsUsers to aggregate.
     * 
    **/
    where?: GroupsUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupsUsers
    **/
    _count?: true | GroupsUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsUsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsUsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsUsersMaxAggregateInputType
  }

  export type GetGroupsUsersAggregateType<T extends GroupsUsersAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupsUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupsUsers[P]>
      : GetScalarType<T[P], AggregateGroupsUsers[P]>
  }




  export type GroupsUsersGroupByArgs = {
    where?: GroupsUsersWhereInput
    orderBy?: Enumerable<GroupsUsersOrderByWithAggregationInput>
    by: Array<GroupsUsersScalarFieldEnum>
    having?: GroupsUsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsUsersCountAggregateInputType | true
    _avg?: GroupsUsersAvgAggregateInputType
    _sum?: GroupsUsersSumAggregateInputType
    _min?: GroupsUsersMinAggregateInputType
    _max?: GroupsUsersMaxAggregateInputType
  }


  export type GroupsUsersGroupByOutputType = {
    userId: number
    groupId: number
    _count: GroupsUsersCountAggregateOutputType | null
    _avg: GroupsUsersAvgAggregateOutputType | null
    _sum: GroupsUsersSumAggregateOutputType | null
    _min: GroupsUsersMinAggregateOutputType | null
    _max: GroupsUsersMaxAggregateOutputType | null
  }

  type GetGroupsUsersGroupByPayload<T extends GroupsUsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsUsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsUsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsUsersGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsUsersGroupByOutputType[P]>
        }
      >
    >


  export type GroupsUsersSelect = {
    userId?: boolean
    groupId?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type GroupsUsersInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type GroupsUsersGetPayload<
    S extends boolean | null | undefined | GroupsUsersArgs,
    U = keyof S
      > = S extends true
        ? GroupsUsers
    : S extends undefined
    ? never
    : S extends GroupsUsersArgs | GroupsUsersFindManyArgs
    ?'include' extends U
    ? GroupsUsers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof GroupsUsers ? GroupsUsers[P] : never
  } 
    : GroupsUsers
  : GroupsUsers


  type GroupsUsersCountArgs = Merge<
    Omit<GroupsUsersFindManyArgs, 'select' | 'include'> & {
      select?: GroupsUsersCountAggregateInputType | true
    }
  >

  export interface GroupsUsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GroupsUsers that matches the filter.
     * @param {GroupsUsersFindUniqueArgs} args - Arguments to find a GroupsUsers
     * @example
     * // Get one GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsUsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsUsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupsUsers'> extends True ? CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>> : CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers | null >, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T> | null >>

    /**
     * Find the first GroupsUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersFindFirstArgs} args - Arguments to find a GroupsUsers
     * @example
     * // Get one GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsUsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsUsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupsUsers'> extends True ? CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>> : CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers | null >, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T> | null >>

    /**
     * Find zero or more GroupsUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findMany()
     * 
     * // Get first 10 GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const groupsUsersWithUserIdOnly = await prisma.groupsUsers.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends GroupsUsersFindManyArgs>(
      args?: SelectSubset<T, GroupsUsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupsUsers>>, PrismaPromise<Array<GroupsUsersGetPayload<T>>>>

    /**
     * Create a GroupsUsers.
     * @param {GroupsUsersCreateArgs} args - Arguments to create a GroupsUsers.
     * @example
     * // Create one GroupsUsers
     * const GroupsUsers = await prisma.groupsUsers.create({
     *   data: {
     *     // ... data to create a GroupsUsers
     *   }
     * })
     * 
    **/
    create<T extends GroupsUsersCreateArgs>(
      args: SelectSubset<T, GroupsUsersCreateArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Create many GroupsUsers.
     *     @param {GroupsUsersCreateManyArgs} args - Arguments to create many GroupsUsers.
     *     @example
     *     // Create many GroupsUsers
     *     const groupsUsers = await prisma.groupsUsers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsUsersCreateManyArgs>(
      args?: SelectSubset<T, GroupsUsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GroupsUsers.
     * @param {GroupsUsersDeleteArgs} args - Arguments to delete one GroupsUsers.
     * @example
     * // Delete one GroupsUsers
     * const GroupsUsers = await prisma.groupsUsers.delete({
     *   where: {
     *     // ... filter to delete one GroupsUsers
     *   }
     * })
     * 
    **/
    delete<T extends GroupsUsersDeleteArgs>(
      args: SelectSubset<T, GroupsUsersDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Update one GroupsUsers.
     * @param {GroupsUsersUpdateArgs} args - Arguments to update one GroupsUsers.
     * @example
     * // Update one GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsUsersUpdateArgs>(
      args: SelectSubset<T, GroupsUsersUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Delete zero or more GroupsUsers.
     * @param {GroupsUsersDeleteManyArgs} args - Arguments to filter GroupsUsers to delete.
     * @example
     * // Delete a few GroupsUsers
     * const { count } = await prisma.groupsUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsUsersDeleteManyArgs>(
      args?: SelectSubset<T, GroupsUsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupsUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsUsersUpdateManyArgs>(
      args: SelectSubset<T, GroupsUsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupsUsers.
     * @param {GroupsUsersUpsertArgs} args - Arguments to update or create a GroupsUsers.
     * @example
     * // Update or create a GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.upsert({
     *   create: {
     *     // ... data to create a GroupsUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupsUsers we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsUsersUpsertArgs>(
      args: SelectSubset<T, GroupsUsersUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Find one GroupsUsers that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsUsersFindUniqueOrThrowArgs} args - Arguments to find a GroupsUsers
     * @example
     * // Get one GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsUsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsUsersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Find the first GroupsUsers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersFindFirstOrThrowArgs} args - Arguments to find a GroupsUsers
     * @example
     * // Get one GroupsUsers
     * const groupsUsers = await prisma.groupsUsers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsUsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsUsersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsUsersClient<GroupsUsers>, Prisma__GroupsUsersClient<GroupsUsersGetPayload<T>>>

    /**
     * Count the number of GroupsUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersCountArgs} args - Arguments to filter GroupsUsers to count.
     * @example
     * // Count the number of GroupsUsers
     * const count = await prisma.groupsUsers.count({
     *   where: {
     *     // ... the filter for the GroupsUsers we want to count
     *   }
     * })
    **/
    count<T extends GroupsUsersCountArgs>(
      args?: Subset<T, GroupsUsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupsUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsUsersAggregateArgs>(args: Subset<T, GroupsUsersAggregateArgs>): PrismaPromise<GetGroupsUsersAggregateType<T>>

    /**
     * Group by GroupsUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsUsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsUsersGroupByArgs['orderBy'] }
        : { orderBy?: GroupsUsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupsUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsUsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupsUsers base type for findUnique actions
   */
  export type GroupsUsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * Filter, which GroupsUsers to fetch.
     * 
    **/
    where: GroupsUsersWhereUniqueInput
  }

  /**
   * GroupsUsers: findUnique
   */
  export interface GroupsUsersFindUniqueArgs extends GroupsUsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsUsers base type for findFirst actions
   */
  export type GroupsUsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * Filter, which GroupsUsers to fetch.
     * 
    **/
    where?: GroupsUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupsUsers.
     * 
    **/
    cursor?: GroupsUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupsUsers.
     * 
    **/
    distinct?: Enumerable<GroupsUsersScalarFieldEnum>
  }

  /**
   * GroupsUsers: findFirst
   */
  export interface GroupsUsersFindFirstArgs extends GroupsUsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupsUsers findMany
   */
  export type GroupsUsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * Filter, which GroupsUsers to fetch.
     * 
    **/
    where?: GroupsUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupsUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsUsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupsUsers.
     * 
    **/
    cursor?: GroupsUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupsUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupsUsers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsUsersScalarFieldEnum>
  }


  /**
   * GroupsUsers create
   */
  export type GroupsUsersCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * The data needed to create a GroupsUsers.
     * 
    **/
    data: XOR<GroupsUsersCreateInput, GroupsUsersUncheckedCreateInput>
  }


  /**
   * GroupsUsers createMany
   */
  export type GroupsUsersCreateManyArgs = {
    /**
     * The data used to create many GroupsUsers.
     * 
    **/
    data: Enumerable<GroupsUsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupsUsers update
   */
  export type GroupsUsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * The data needed to update a GroupsUsers.
     * 
    **/
    data: XOR<GroupsUsersUpdateInput, GroupsUsersUncheckedUpdateInput>
    /**
     * Choose, which GroupsUsers to update.
     * 
    **/
    where: GroupsUsersWhereUniqueInput
  }


  /**
   * GroupsUsers updateMany
   */
  export type GroupsUsersUpdateManyArgs = {
    /**
     * The data used to update GroupsUsers.
     * 
    **/
    data: XOR<GroupsUsersUpdateManyMutationInput, GroupsUsersUncheckedUpdateManyInput>
    /**
     * Filter which GroupsUsers to update
     * 
    **/
    where?: GroupsUsersWhereInput
  }


  /**
   * GroupsUsers upsert
   */
  export type GroupsUsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * The filter to search for the GroupsUsers to update in case it exists.
     * 
    **/
    where: GroupsUsersWhereUniqueInput
    /**
     * In case the GroupsUsers found by the `where` argument doesn't exist, create a new GroupsUsers with this data.
     * 
    **/
    create: XOR<GroupsUsersCreateInput, GroupsUsersUncheckedCreateInput>
    /**
     * In case the GroupsUsers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsUsersUpdateInput, GroupsUsersUncheckedUpdateInput>
  }


  /**
   * GroupsUsers delete
   */
  export type GroupsUsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
    /**
     * Filter which GroupsUsers to delete.
     * 
    **/
    where: GroupsUsersWhereUniqueInput
  }


  /**
   * GroupsUsers deleteMany
   */
  export type GroupsUsersDeleteManyArgs = {
    /**
     * Filter which GroupsUsers to delete
     * 
    **/
    where?: GroupsUsersWhereInput
  }


  /**
   * GroupsUsers: findUniqueOrThrow
   */
  export type GroupsUsersFindUniqueOrThrowArgs = GroupsUsersFindUniqueArgsBase
      

  /**
   * GroupsUsers: findFirstOrThrow
   */
  export type GroupsUsersFindFirstOrThrowArgs = GroupsUsersFindFirstArgsBase
      

  /**
   * GroupsUsers without action
   */
  export type GroupsUsersArgs = {
    /**
     * Select specific fields to fetch from the GroupsUsers
     * 
    **/
    select?: GroupsUsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsUsersInclude | null
  }



  /**
   * Model Ingredient
   */


  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
    postedById: number | null
  }

  export type IngredientSumAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
    postedById: number | null
  }

  export type IngredientMinAggregateOutputType = {
    id: number | null
    date_created: Date | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: number | null
    date_created: Date | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    date_created: number
    name: number
    amount: number
    unit: number
    price: number
    source: number
    postedById: number
    _all: number
  }


  export type IngredientAvgAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    postedById?: true
  }

  export type IngredientSumAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    postedById?: true
  }

  export type IngredientMinAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
    _all?: true
  }

  export type IngredientAggregateArgs = {
    /**
     * Filter which Ingredient to aggregate.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs = {
    where?: IngredientWhereInput
    orderBy?: Enumerable<IngredientOrderByWithAggregationInput>
    by: Array<IngredientScalarFieldEnum>
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _avg?: IngredientAvgAggregateInputType
    _sum?: IngredientSumAggregateInputType
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }


  export type IngredientGroupByOutputType = {
    id: number
    date_created: Date
    name: string
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect = {
    id?: boolean
    date_created?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    price?: boolean
    source?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    groupsIngredients?: boolean | GroupsIngredientsFindManyArgs
    spec?: boolean | SpecFindManyArgs
    sharedIngredient?: boolean | SharedIngredientFindManyArgs
    _count?: boolean | IngredientCountOutputTypeArgs
  }

  export type IngredientInclude = {
    postedBy?: boolean | UsersArgs
    groupsIngredients?: boolean | GroupsIngredientsFindManyArgs
    spec?: boolean | SpecFindManyArgs
    sharedIngredient?: boolean | SharedIngredientFindManyArgs
    _count?: boolean | IngredientCountOutputTypeArgs
  }

  export type IngredientGetPayload<
    S extends boolean | null | undefined | IngredientArgs,
    U = keyof S
      > = S extends true
        ? Ingredient
    : S extends undefined
    ? never
    : S extends IngredientArgs | IngredientFindManyArgs
    ?'include' extends U
    ? Ingredient  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'groupsIngredients' ? Array < GroupsIngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'sharedIngredient' ? Array < SharedIngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'groupsIngredients' ? Array < GroupsIngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'sharedIngredient' ? Array < SharedIngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Ingredient ? Ingredient[P] : never
  } 
    : Ingredient
  : Ingredient


  type IngredientCountArgs = Merge<
    Omit<IngredientFindManyArgs, 'select' | 'include'> & {
      select?: IngredientCountAggregateInputType | true
    }
  >

  export interface IngredientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IngredientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IngredientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ingredient'> extends True ? CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>> : CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IngredientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IngredientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ingredient'> extends True ? CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>> : CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IngredientFindManyArgs>(
      args?: SelectSubset<T, IngredientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Ingredient>>, PrismaPromise<Array<IngredientGetPayload<T>>>>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
    **/
    create<T extends IngredientCreateArgs>(
      args: SelectSubset<T, IngredientCreateArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Create many Ingredients.
     *     @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     *     @example
     *     // Create many Ingredients
     *     const ingredient = await prisma.ingredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IngredientCreateManyArgs>(
      args?: SelectSubset<T, IngredientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
    **/
    delete<T extends IngredientDeleteArgs>(
      args: SelectSubset<T, IngredientDeleteArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IngredientUpdateArgs>(
      args: SelectSubset<T, IngredientUpdateArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IngredientDeleteManyArgs>(
      args?: SelectSubset<T, IngredientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IngredientUpdateManyArgs>(
      args: SelectSubset<T, IngredientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
    **/
    upsert<T extends IngredientUpsertArgs>(
      args: SelectSubset<T, IngredientUpsertArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Find one Ingredient that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IngredientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IngredientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IngredientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    groupsIngredients<T extends GroupsIngredientsFindManyArgs = {}>(args?: Subset<T, GroupsIngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsIngredients>>, PrismaPromise<Array<GroupsIngredientsGetPayload<T>>>>;

    spec<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    sharedIngredient<T extends SharedIngredientFindManyArgs = {}>(args?: Subset<T, SharedIngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SharedIngredient>>, PrismaPromise<Array<SharedIngredientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ingredient base type for findUnique actions
   */
  export type IngredientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredient to fetch.
     * 
    **/
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient: findUnique
   */
  export interface IngredientFindUniqueArgs extends IngredientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredient base type for findFirst actions
   */
  export type IngredientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredient to fetch.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     * 
    **/
    distinct?: Enumerable<IngredientScalarFieldEnum>
  }

  /**
   * Ingredient: findFirst
   */
  export interface IngredientFindFirstArgs extends IngredientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredients to fetch.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IngredientScalarFieldEnum>
  }


  /**
   * Ingredient create
   */
  export type IngredientCreateArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The data needed to create a Ingredient.
     * 
    **/
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }


  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs = {
    /**
     * The data used to create many Ingredients.
     * 
    **/
    data: Enumerable<IngredientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The data needed to update a Ingredient.
     * 
    **/
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     * 
    **/
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs = {
    /**
     * The data used to update Ingredients.
     * 
    **/
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     * 
    **/
    where?: IngredientWhereInput
  }


  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     * 
    **/
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     * 
    **/
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }


  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter which Ingredient to delete.
     * 
    **/
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs = {
    /**
     * Filter which Ingredients to delete
     * 
    **/
    where?: IngredientWhereInput
  }


  /**
   * Ingredient: findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs = IngredientFindUniqueArgsBase
      

  /**
   * Ingredient: findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs = IngredientFindFirstArgsBase
      

  /**
   * Ingredient without action
   */
  export type IngredientArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
  }



  /**
   * Model Spec
   */


  export type AggregateSpec = {
    _count: SpecCountAggregateOutputType | null
    _avg: SpecAvgAggregateOutputType | null
    _sum: SpecSumAggregateOutputType | null
    _min: SpecMinAggregateOutputType | null
    _max: SpecMaxAggregateOutputType | null
  }

  export type SpecAvgAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecSumAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecMinAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecMaxAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecCountAggregateOutputType = {
    id: number
    ingredientId: number
    order: number
    amount: number
    unit: number
    versionId: number
    postedById: number
    _all: number
  }


  export type SpecAvgAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    versionId?: true
    postedById?: true
  }

  export type SpecSumAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    versionId?: true
    postedById?: true
  }

  export type SpecMinAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
  }

  export type SpecMaxAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
  }

  export type SpecCountAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
    _all?: true
  }

  export type SpecAggregateArgs = {
    /**
     * Filter which Spec to aggregate.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specs
    **/
    _count?: true | SpecCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecMaxAggregateInputType
  }

  export type GetSpecAggregateType<T extends SpecAggregateArgs> = {
        [P in keyof T & keyof AggregateSpec]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpec[P]>
      : GetScalarType<T[P], AggregateSpec[P]>
  }




  export type SpecGroupByArgs = {
    where?: SpecWhereInput
    orderBy?: Enumerable<SpecOrderByWithAggregationInput>
    by: Array<SpecScalarFieldEnum>
    having?: SpecScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecCountAggregateInputType | true
    _avg?: SpecAvgAggregateInputType
    _sum?: SpecSumAggregateInputType
    _min?: SpecMinAggregateInputType
    _max?: SpecMaxAggregateInputType
  }


  export type SpecGroupByOutputType = {
    id: number
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
    _count: SpecCountAggregateOutputType | null
    _avg: SpecAvgAggregateOutputType | null
    _sum: SpecSumAggregateOutputType | null
    _min: SpecMinAggregateOutputType | null
    _max: SpecMaxAggregateOutputType | null
  }

  type GetSpecGroupByPayload<T extends SpecGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecGroupByOutputType[P]>
            : GetScalarType<T[P], SpecGroupByOutputType[P]>
        }
      >
    >


  export type SpecSelect = {
    id?: boolean
    ingredientId?: boolean
    order?: boolean
    amount?: boolean
    unit?: boolean
    ingredient?: boolean | IngredientArgs
    version?: boolean | VersionArgs
    versionId?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
  }

  export type SpecInclude = {
    ingredient?: boolean | IngredientArgs
    version?: boolean | VersionArgs
    postedBy?: boolean | UsersArgs
  }

  export type SpecGetPayload<
    S extends boolean | null | undefined | SpecArgs,
    U = keyof S
      > = S extends true
        ? Spec
    : S extends undefined
    ? never
    : S extends SpecArgs | SpecFindManyArgs
    ?'include' extends U
    ? Spec  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredient' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredient' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Spec ? Spec[P] : never
  } 
    : Spec
  : Spec


  type SpecCountArgs = Merge<
    Omit<SpecFindManyArgs, 'select' | 'include'> & {
      select?: SpecCountAggregateInputType | true
    }
  >

  export interface SpecDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Spec that matches the filter.
     * @param {SpecFindUniqueArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Spec'> extends True ? CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>> : CheckSelect<T, Prisma__SpecClient<Spec | null >, Prisma__SpecClient<SpecGetPayload<T> | null >>

    /**
     * Find the first Spec that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindFirstArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Spec'> extends True ? CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>> : CheckSelect<T, Prisma__SpecClient<Spec | null >, Prisma__SpecClient<SpecGetPayload<T> | null >>

    /**
     * Find zero or more Specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specs
     * const specs = await prisma.spec.findMany()
     * 
     * // Get first 10 Specs
     * const specs = await prisma.spec.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specWithIdOnly = await prisma.spec.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecFindManyArgs>(
      args?: SelectSubset<T, SpecFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>

    /**
     * Create a Spec.
     * @param {SpecCreateArgs} args - Arguments to create a Spec.
     * @example
     * // Create one Spec
     * const Spec = await prisma.spec.create({
     *   data: {
     *     // ... data to create a Spec
     *   }
     * })
     * 
    **/
    create<T extends SpecCreateArgs>(
      args: SelectSubset<T, SpecCreateArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Create many Specs.
     *     @param {SpecCreateManyArgs} args - Arguments to create many Specs.
     *     @example
     *     // Create many Specs
     *     const spec = await prisma.spec.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecCreateManyArgs>(
      args?: SelectSubset<T, SpecCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Spec.
     * @param {SpecDeleteArgs} args - Arguments to delete one Spec.
     * @example
     * // Delete one Spec
     * const Spec = await prisma.spec.delete({
     *   where: {
     *     // ... filter to delete one Spec
     *   }
     * })
     * 
    **/
    delete<T extends SpecDeleteArgs>(
      args: SelectSubset<T, SpecDeleteArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Update one Spec.
     * @param {SpecUpdateArgs} args - Arguments to update one Spec.
     * @example
     * // Update one Spec
     * const spec = await prisma.spec.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecUpdateArgs>(
      args: SelectSubset<T, SpecUpdateArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Delete zero or more Specs.
     * @param {SpecDeleteManyArgs} args - Arguments to filter Specs to delete.
     * @example
     * // Delete a few Specs
     * const { count } = await prisma.spec.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecDeleteManyArgs>(
      args?: SelectSubset<T, SpecDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specs
     * const spec = await prisma.spec.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecUpdateManyArgs>(
      args: SelectSubset<T, SpecUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Spec.
     * @param {SpecUpsertArgs} args - Arguments to update or create a Spec.
     * @example
     * // Update or create a Spec
     * const spec = await prisma.spec.upsert({
     *   create: {
     *     // ... data to create a Spec
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spec we want to update
     *   }
     * })
    **/
    upsert<T extends SpecUpsertArgs>(
      args: SelectSubset<T, SpecUpsertArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Find one Spec that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SpecFindUniqueOrThrowArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Find the first Spec that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindFirstOrThrowArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Count the number of Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecCountArgs} args - Arguments to filter Specs to count.
     * @example
     * // Count the number of Specs
     * const count = await prisma.spec.count({
     *   where: {
     *     // ... the filter for the Specs we want to count
     *   }
     * })
    **/
    count<T extends SpecCountArgs>(
      args?: Subset<T, SpecCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecAggregateArgs>(args: Subset<T, SpecAggregateArgs>): PrismaPromise<GetSpecAggregateType<T>>

    /**
     * Group by Spec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecGroupByArgs['orderBy'] }
        : { orderBy?: SpecGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Spec.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredient<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Spec base type for findUnique actions
   */
  export type SpecFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Spec to fetch.
     * 
    **/
    where: SpecWhereUniqueInput
  }

  /**
   * Spec: findUnique
   */
  export interface SpecFindUniqueArgs extends SpecFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Spec base type for findFirst actions
   */
  export type SpecFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Spec to fetch.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specs.
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specs.
     * 
    **/
    distinct?: Enumerable<SpecScalarFieldEnum>
  }

  /**
   * Spec: findFirst
   */
  export interface SpecFindFirstArgs extends SpecFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Spec findMany
   */
  export type SpecFindManyArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Specs to fetch.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specs.
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecScalarFieldEnum>
  }


  /**
   * Spec create
   */
  export type SpecCreateArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The data needed to create a Spec.
     * 
    **/
    data: XOR<SpecCreateInput, SpecUncheckedCreateInput>
  }


  /**
   * Spec createMany
   */
  export type SpecCreateManyArgs = {
    /**
     * The data used to create many Specs.
     * 
    **/
    data: Enumerable<SpecCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Spec update
   */
  export type SpecUpdateArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The data needed to update a Spec.
     * 
    **/
    data: XOR<SpecUpdateInput, SpecUncheckedUpdateInput>
    /**
     * Choose, which Spec to update.
     * 
    **/
    where: SpecWhereUniqueInput
  }


  /**
   * Spec updateMany
   */
  export type SpecUpdateManyArgs = {
    /**
     * The data used to update Specs.
     * 
    **/
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyInput>
    /**
     * Filter which Specs to update
     * 
    **/
    where?: SpecWhereInput
  }


  /**
   * Spec upsert
   */
  export type SpecUpsertArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The filter to search for the Spec to update in case it exists.
     * 
    **/
    where: SpecWhereUniqueInput
    /**
     * In case the Spec found by the `where` argument doesn't exist, create a new Spec with this data.
     * 
    **/
    create: XOR<SpecCreateInput, SpecUncheckedCreateInput>
    /**
     * In case the Spec was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecUpdateInput, SpecUncheckedUpdateInput>
  }


  /**
   * Spec delete
   */
  export type SpecDeleteArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter which Spec to delete.
     * 
    **/
    where: SpecWhereUniqueInput
  }


  /**
   * Spec deleteMany
   */
  export type SpecDeleteManyArgs = {
    /**
     * Filter which Specs to delete
     * 
    **/
    where?: SpecWhereInput
  }


  /**
   * Spec: findUniqueOrThrow
   */
  export type SpecFindUniqueOrThrowArgs = SpecFindUniqueArgsBase
      

  /**
   * Spec: findFirstOrThrow
   */
  export type SpecFindFirstOrThrowArgs = SpecFindFirstArgsBase
      

  /**
   * Spec without action
   */
  export type SpecArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
  }



  /**
   * Model Recipe
   */


  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type RecipeSumAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    origin: string | null
    history: string | null
    postedById: number | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    origin: string | null
    history: string | null
    postedById: number | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    origin: number
    history: number
    postedById: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type RecipeSumAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
    _all?: true
  }

  export type RecipeAggregateArgs = {
    /**
     * Filter which Recipe to aggregate.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs = {
    where?: RecipeWhereInput
    orderBy?: Enumerable<RecipeOrderByWithAggregationInput>
    by: Array<RecipeScalarFieldEnum>
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }


  export type RecipeGroupByOutputType = {
    id: number
    createdAt: Date
    name: string
    origin: string
    history: string | null
    postedById: number | null
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    origin?: boolean
    history?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    version?: boolean | VersionFindManyArgs
    _count?: boolean | RecipeCountOutputTypeArgs
  }

  export type RecipeInclude = {
    postedBy?: boolean | UsersArgs
    version?: boolean | VersionFindManyArgs
    _count?: boolean | RecipeCountOutputTypeArgs
  }

  export type RecipeGetPayload<
    S extends boolean | null | undefined | RecipeArgs,
    U = keyof S
      > = S extends true
        ? Recipe
    : S extends undefined
    ? never
    : S extends RecipeArgs | RecipeFindManyArgs
    ?'include' extends U
    ? Recipe  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RecipeCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RecipeCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Recipe ? Recipe[P] : never
  } 
    : Recipe
  : Recipe


  type RecipeCountArgs = Merge<
    Omit<RecipeFindManyArgs, 'select' | 'include'> & {
      select?: RecipeCountAggregateInputType | true
    }
  >

  export interface RecipeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecipeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recipe'> extends True ? CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>> : CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecipeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recipe'> extends True ? CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>> : CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecipeFindManyArgs>(
      args?: SelectSubset<T, RecipeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Recipe>>, PrismaPromise<Array<RecipeGetPayload<T>>>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
    **/
    create<T extends RecipeCreateArgs>(
      args: SelectSubset<T, RecipeCreateArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Create many Recipes.
     *     @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipe = await prisma.recipe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipeCreateManyArgs>(
      args?: SelectSubset<T, RecipeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
    **/
    delete<T extends RecipeDeleteArgs>(
      args: SelectSubset<T, RecipeDeleteArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipeUpdateArgs>(
      args: SelectSubset<T, RecipeUpdateArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipeDeleteManyArgs>(
      args?: SelectSubset<T, RecipeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipeUpdateManyArgs>(
      args: SelectSubset<T, RecipeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
    **/
    upsert<T extends RecipeUpsertArgs>(
      args: SelectSubset<T, RecipeUpsertArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Find one Recipe that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RecipeFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Find the first Recipe that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RecipeFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecipeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    version<T extends VersionFindManyArgs = {}>(args?: Subset<T, VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recipe base type for findUnique actions
   */
  export type RecipeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipe to fetch.
     * 
    **/
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe: findUnique
   */
  export interface RecipeFindUniqueArgs extends RecipeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recipe base type for findFirst actions
   */
  export type RecipeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipe to fetch.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     * 
    **/
    distinct?: Enumerable<RecipeScalarFieldEnum>
  }

  /**
   * Recipe: findFirst
   */
  export interface RecipeFindFirstArgs extends RecipeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipes to fetch.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecipeScalarFieldEnum>
  }


  /**
   * Recipe create
   */
  export type RecipeCreateArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The data needed to create a Recipe.
     * 
    **/
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }


  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs = {
    /**
     * The data used to create many Recipes.
     * 
    **/
    data: Enumerable<RecipeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recipe update
   */
  export type RecipeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The data needed to update a Recipe.
     * 
    **/
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     * 
    **/
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs = {
    /**
     * The data used to update Recipes.
     * 
    **/
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     * 
    **/
    where?: RecipeWhereInput
  }


  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     * 
    **/
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     * 
    **/
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }


  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter which Recipe to delete.
     * 
    **/
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs = {
    /**
     * Filter which Recipes to delete
     * 
    **/
    where?: RecipeWhereInput
  }


  /**
   * Recipe: findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs = RecipeFindUniqueArgsBase
      

  /**
   * Recipe: findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs = RecipeFindFirstArgsBase
      

  /**
   * Recipe without action
   */
  export type RecipeArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
  }



  /**
   * Model Version
   */


  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionAvgAggregateOutputType = {
    id: number | null
    postedById: number | null
    recipeId: number | null
  }

  export type VersionSumAggregateOutputType = {
    id: number | null
    postedById: number | null
    recipeId: number | null
  }

  export type VersionMinAggregateOutputType = {
    id: number | null
    versionName: string | null
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
  }

  export type VersionMaxAggregateOutputType = {
    id: number | null
    versionName: string | null
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    versionName: number
    postedById: number
    instructions: number
    glassware: number
    ice: number
    recipeId: number
    _all: number
  }


  export type VersionAvgAggregateInputType = {
    id?: true
    postedById?: true
    recipeId?: true
  }

  export type VersionSumAggregateInputType = {
    id?: true
    postedById?: true
    recipeId?: true
  }

  export type VersionMinAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
    _all?: true
  }

  export type VersionAggregateArgs = {
    /**
     * Filter which Version to aggregate.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs = {
    where?: VersionWhereInput
    orderBy?: Enumerable<VersionOrderByWithAggregationInput>
    by: Array<VersionScalarFieldEnum>
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _avg?: VersionAvgAggregateInputType
    _sum?: VersionSumAggregateInputType
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }


  export type VersionGroupByOutputType = {
    id: number
    versionName: string
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect = {
    id?: boolean
    versionName?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    instructions?: boolean
    glassware?: boolean
    ice?: boolean
    groupVersion?: boolean | GroupVersionFindManyArgs
    sharedVersion?: boolean | SharedVersionFindManyArgs
    recipe?: boolean | RecipeArgs
    recipeId?: boolean
    specs?: boolean | SpecFindManyArgs
    adminOnVersion?: boolean | AdminOnVersionFindManyArgs
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionInclude = {
    postedBy?: boolean | UsersArgs
    groupVersion?: boolean | GroupVersionFindManyArgs
    sharedVersion?: boolean | SharedVersionFindManyArgs
    recipe?: boolean | RecipeArgs
    specs?: boolean | SpecFindManyArgs
    adminOnVersion?: boolean | AdminOnVersionFindManyArgs
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionGetPayload<
    S extends boolean | null | undefined | VersionArgs,
    U = keyof S
      > = S extends true
        ? Version
    : S extends undefined
    ? never
    : S extends VersionArgs | VersionFindManyArgs
    ?'include' extends U
    ? Version  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'groupVersion' ? Array < GroupVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'sharedVersion' ? Array < SharedVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'recipe' ? RecipeGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'specs' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'adminOnVersion' ? Array < AdminOnVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'groupVersion' ? Array < GroupVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'sharedVersion' ? Array < SharedVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'recipe' ? RecipeGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'specs' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'adminOnVersion' ? Array < AdminOnVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Version ? Version[P] : never
  } 
    : Version
  : Version


  type VersionCountArgs = Merge<
    Omit<VersionFindManyArgs, 'select' | 'include'> & {
      select?: VersionCountAggregateInputType | true
    }
  >

  export interface VersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VersionFindManyArgs>(
      args?: SelectSubset<T, VersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
    **/
    create<T extends VersionCreateArgs>(
      args: SelectSubset<T, VersionCreateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Create many Versions.
     *     @param {VersionCreateManyArgs} args - Arguments to create many Versions.
     *     @example
     *     // Create many Versions
     *     const version = await prisma.version.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VersionCreateManyArgs>(
      args?: SelectSubset<T, VersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
    **/
    delete<T extends VersionDeleteArgs>(
      args: SelectSubset<T, VersionDeleteArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VersionUpdateArgs>(
      args: SelectSubset<T, VersionUpdateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VersionDeleteManyArgs>(
      args?: SelectSubset<T, VersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VersionUpdateManyArgs>(
      args: SelectSubset<T, VersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
    **/
    upsert<T extends VersionUpsertArgs>(
      args: SelectSubset<T, VersionUpsertArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find one Version that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find the first Version that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    groupVersion<T extends GroupVersionFindManyArgs = {}>(args?: Subset<T, GroupVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupVersion>>, PrismaPromise<Array<GroupVersionGetPayload<T>>>>;

    sharedVersion<T extends SharedVersionFindManyArgs = {}>(args?: Subset<T, SharedVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SharedVersion>>, PrismaPromise<Array<SharedVersionGetPayload<T>>>>;

    recipe<T extends RecipeArgs = {}>(args?: Subset<T, RecipeArgs>): CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>;

    specs<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    adminOnVersion<T extends AdminOnVersionFindManyArgs = {}>(args?: Subset<T, AdminOnVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AdminOnVersion>>, PrismaPromise<Array<AdminOnVersionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Version base type for findUnique actions
   */
  export type VersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where: VersionWhereUniqueInput
  }

  /**
   * Version: findUnique
   */
  export interface VersionFindUniqueArgs extends VersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version base type for findFirst actions
   */
  export type VersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     * 
    **/
    distinct?: Enumerable<VersionScalarFieldEnum>
  }

  /**
   * Version: findFirst
   */
  export interface VersionFindFirstArgs extends VersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version findMany
   */
  export type VersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Versions to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Version create
   */
  export type VersionCreateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to create a Version.
     * 
    **/
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }


  /**
   * Version createMany
   */
  export type VersionCreateManyArgs = {
    /**
     * The data used to create many Versions.
     * 
    **/
    data: Enumerable<VersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Version update
   */
  export type VersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to update a Version.
     * 
    **/
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs = {
    /**
     * The data used to update Versions.
     * 
    **/
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version upsert
   */
  export type VersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The filter to search for the Version to update in case it exists.
     * 
    **/
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     * 
    **/
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }


  /**
   * Version delete
   */
  export type VersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter which Version to delete.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs = {
    /**
     * Filter which Versions to delete
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version: findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs = VersionFindUniqueArgsBase
      

  /**
   * Version: findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs = VersionFindFirstArgsBase
      

  /**
   * Version without action
   */
  export type VersionArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
  }



  /**
   * Model UserData
   */


  export type AggregateUserData = {
    _count: UserDataCountAggregateOutputType | null
    _avg: UserDataAvgAggregateOutputType | null
    _sum: UserDataSumAggregateOutputType | null
    _min: UserDataMinAggregateOutputType | null
    _max: UserDataMaxAggregateOutputType | null
  }

  export type UserDataAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserDataSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserDataMinAggregateOutputType = {
    id: number | null
    userId: number | null
    userBio: string | null
    workPlace: string | null
    profilePicture: string | null
  }

  export type UserDataMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    userBio: string | null
    workPlace: string | null
    profilePicture: string | null
  }

  export type UserDataCountAggregateOutputType = {
    id: number
    userId: number
    userBio: number
    workPlace: number
    profilePicture: number
    _all: number
  }


  export type UserDataAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserDataSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserDataMinAggregateInputType = {
    id?: true
    userId?: true
    userBio?: true
    workPlace?: true
    profilePicture?: true
  }

  export type UserDataMaxAggregateInputType = {
    id?: true
    userId?: true
    userBio?: true
    workPlace?: true
    profilePicture?: true
  }

  export type UserDataCountAggregateInputType = {
    id?: true
    userId?: true
    userBio?: true
    workPlace?: true
    profilePicture?: true
    _all?: true
  }

  export type UserDataAggregateArgs = {
    /**
     * Filter which UserData to aggregate.
     * 
    **/
    where?: UserDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserData to fetch.
     * 
    **/
    orderBy?: Enumerable<UserDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserData
    **/
    _count?: true | UserDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDataMaxAggregateInputType
  }

  export type GetUserDataAggregateType<T extends UserDataAggregateArgs> = {
        [P in keyof T & keyof AggregateUserData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserData[P]>
      : GetScalarType<T[P], AggregateUserData[P]>
  }




  export type UserDataGroupByArgs = {
    where?: UserDataWhereInput
    orderBy?: Enumerable<UserDataOrderByWithAggregationInput>
    by: Array<UserDataScalarFieldEnum>
    having?: UserDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDataCountAggregateInputType | true
    _avg?: UserDataAvgAggregateInputType
    _sum?: UserDataSumAggregateInputType
    _min?: UserDataMinAggregateInputType
    _max?: UserDataMaxAggregateInputType
  }


  export type UserDataGroupByOutputType = {
    id: number
    userId: number | null
    userBio: string | null
    workPlace: string | null
    profilePicture: string | null
    _count: UserDataCountAggregateOutputType | null
    _avg: UserDataAvgAggregateOutputType | null
    _sum: UserDataSumAggregateOutputType | null
    _min: UserDataMinAggregateOutputType | null
    _max: UserDataMaxAggregateOutputType | null
  }

  type GetUserDataGroupByPayload<T extends UserDataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDataGroupByOutputType[P]>
            : GetScalarType<T[P], UserDataGroupByOutputType[P]>
        }
      >
    >


  export type UserDataSelect = {
    id?: boolean
    userId?: boolean
    userBio?: boolean
    workPlace?: boolean
    profilePicture?: boolean
    users?: boolean | UsersArgs
  }

  export type UserDataInclude = {
    users?: boolean | UsersArgs
  }

  export type UserDataGetPayload<
    S extends boolean | null | undefined | UserDataArgs,
    U = keyof S
      > = S extends true
        ? UserData
    : S extends undefined
    ? never
    : S extends UserDataArgs | UserDataFindManyArgs
    ?'include' extends U
    ? UserData  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof UserData ? UserData[P] : never
  } 
    : UserData
  : UserData


  type UserDataCountArgs = Merge<
    Omit<UserDataFindManyArgs, 'select' | 'include'> & {
      select?: UserDataCountAggregateInputType | true
    }
  >

  export interface UserDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserData that matches the filter.
     * @param {UserDataFindUniqueArgs} args - Arguments to find a UserData
     * @example
     * // Get one UserData
     * const userData = await prisma.userData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserData'> extends True ? CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>> : CheckSelect<T, Prisma__UserDataClient<UserData | null >, Prisma__UserDataClient<UserDataGetPayload<T> | null >>

    /**
     * Find the first UserData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataFindFirstArgs} args - Arguments to find a UserData
     * @example
     * // Get one UserData
     * const userData = await prisma.userData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserData'> extends True ? CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>> : CheckSelect<T, Prisma__UserDataClient<UserData | null >, Prisma__UserDataClient<UserDataGetPayload<T> | null >>

    /**
     * Find zero or more UserData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserData
     * const userData = await prisma.userData.findMany()
     * 
     * // Get first 10 UserData
     * const userData = await prisma.userData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDataWithIdOnly = await prisma.userData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserDataFindManyArgs>(
      args?: SelectSubset<T, UserDataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserData>>, PrismaPromise<Array<UserDataGetPayload<T>>>>

    /**
     * Create a UserData.
     * @param {UserDataCreateArgs} args - Arguments to create a UserData.
     * @example
     * // Create one UserData
     * const UserData = await prisma.userData.create({
     *   data: {
     *     // ... data to create a UserData
     *   }
     * })
     * 
    **/
    create<T extends UserDataCreateArgs>(
      args: SelectSubset<T, UserDataCreateArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Create many UserData.
     *     @param {UserDataCreateManyArgs} args - Arguments to create many UserData.
     *     @example
     *     // Create many UserData
     *     const userData = await prisma.userData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserDataCreateManyArgs>(
      args?: SelectSubset<T, UserDataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserData.
     * @param {UserDataDeleteArgs} args - Arguments to delete one UserData.
     * @example
     * // Delete one UserData
     * const UserData = await prisma.userData.delete({
     *   where: {
     *     // ... filter to delete one UserData
     *   }
     * })
     * 
    **/
    delete<T extends UserDataDeleteArgs>(
      args: SelectSubset<T, UserDataDeleteArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Update one UserData.
     * @param {UserDataUpdateArgs} args - Arguments to update one UserData.
     * @example
     * // Update one UserData
     * const userData = await prisma.userData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserDataUpdateArgs>(
      args: SelectSubset<T, UserDataUpdateArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Delete zero or more UserData.
     * @param {UserDataDeleteManyArgs} args - Arguments to filter UserData to delete.
     * @example
     * // Delete a few UserData
     * const { count } = await prisma.userData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDataDeleteManyArgs>(
      args?: SelectSubset<T, UserDataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserData
     * const userData = await prisma.userData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserDataUpdateManyArgs>(
      args: SelectSubset<T, UserDataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserData.
     * @param {UserDataUpsertArgs} args - Arguments to update or create a UserData.
     * @example
     * // Update or create a UserData
     * const userData = await prisma.userData.upsert({
     *   create: {
     *     // ... data to create a UserData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserData we want to update
     *   }
     * })
    **/
    upsert<T extends UserDataUpsertArgs>(
      args: SelectSubset<T, UserDataUpsertArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Find one UserData that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserDataFindUniqueOrThrowArgs} args - Arguments to find a UserData
     * @example
     * // Get one UserData
     * const userData = await prisma.userData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserDataFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Find the first UserData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataFindFirstOrThrowArgs} args - Arguments to find a UserData
     * @example
     * // Get one UserData
     * const userData = await prisma.userData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserDataFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserDataClient<UserData>, Prisma__UserDataClient<UserDataGetPayload<T>>>

    /**
     * Count the number of UserData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataCountArgs} args - Arguments to filter UserData to count.
     * @example
     * // Count the number of UserData
     * const count = await prisma.userData.count({
     *   where: {
     *     // ... the filter for the UserData we want to count
     *   }
     * })
    **/
    count<T extends UserDataCountArgs>(
      args?: Subset<T, UserDataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDataAggregateArgs>(args: Subset<T, UserDataAggregateArgs>): PrismaPromise<GetUserDataAggregateType<T>>

    /**
     * Group by UserData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDataGroupByArgs['orderBy'] }
        : { orderBy?: UserDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDataGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserDataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserData base type for findUnique actions
   */
  export type UserDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * Filter, which UserData to fetch.
     * 
    **/
    where: UserDataWhereUniqueInput
  }

  /**
   * UserData: findUnique
   */
  export interface UserDataFindUniqueArgs extends UserDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserData base type for findFirst actions
   */
  export type UserDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * Filter, which UserData to fetch.
     * 
    **/
    where?: UserDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserData to fetch.
     * 
    **/
    orderBy?: Enumerable<UserDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserData.
     * 
    **/
    cursor?: UserDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserData.
     * 
    **/
    distinct?: Enumerable<UserDataScalarFieldEnum>
  }

  /**
   * UserData: findFirst
   */
  export interface UserDataFindFirstArgs extends UserDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserData findMany
   */
  export type UserDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * Filter, which UserData to fetch.
     * 
    **/
    where?: UserDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserData to fetch.
     * 
    **/
    orderBy?: Enumerable<UserDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserData.
     * 
    **/
    cursor?: UserDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserData.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserDataScalarFieldEnum>
  }


  /**
   * UserData create
   */
  export type UserDataCreateArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * The data needed to create a UserData.
     * 
    **/
    data: XOR<UserDataCreateInput, UserDataUncheckedCreateInput>
  }


  /**
   * UserData createMany
   */
  export type UserDataCreateManyArgs = {
    /**
     * The data used to create many UserData.
     * 
    **/
    data: Enumerable<UserDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserData update
   */
  export type UserDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * The data needed to update a UserData.
     * 
    **/
    data: XOR<UserDataUpdateInput, UserDataUncheckedUpdateInput>
    /**
     * Choose, which UserData to update.
     * 
    **/
    where: UserDataWhereUniqueInput
  }


  /**
   * UserData updateMany
   */
  export type UserDataUpdateManyArgs = {
    /**
     * The data used to update UserData.
     * 
    **/
    data: XOR<UserDataUpdateManyMutationInput, UserDataUncheckedUpdateManyInput>
    /**
     * Filter which UserData to update
     * 
    **/
    where?: UserDataWhereInput
  }


  /**
   * UserData upsert
   */
  export type UserDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * The filter to search for the UserData to update in case it exists.
     * 
    **/
    where: UserDataWhereUniqueInput
    /**
     * In case the UserData found by the `where` argument doesn't exist, create a new UserData with this data.
     * 
    **/
    create: XOR<UserDataCreateInput, UserDataUncheckedCreateInput>
    /**
     * In case the UserData was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserDataUpdateInput, UserDataUncheckedUpdateInput>
  }


  /**
   * UserData delete
   */
  export type UserDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
    /**
     * Filter which UserData to delete.
     * 
    **/
    where: UserDataWhereUniqueInput
  }


  /**
   * UserData deleteMany
   */
  export type UserDataDeleteManyArgs = {
    /**
     * Filter which UserData to delete
     * 
    **/
    where?: UserDataWhereInput
  }


  /**
   * UserData: findUniqueOrThrow
   */
  export type UserDataFindUniqueOrThrowArgs = UserDataFindUniqueArgsBase
      

  /**
   * UserData: findFirstOrThrow
   */
  export type UserDataFindFirstOrThrowArgs = UserDataFindFirstArgsBase
      

  /**
   * UserData without action
   */
  export type UserDataArgs = {
    /**
     * Select specific fields to fetch from the UserData
     * 
    **/
    select?: UserDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserDataInclude | null
  }



  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    user_name: number
    first_name: number
    last_name: number
    date_joined: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    user_name: string
    first_name: string | null
    last_name: string | null
    date_joined: Date
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    user_name?: boolean
    first_name?: boolean
    last_name?: boolean
    date_joined?: boolean
    email?: boolean
    password?: boolean
    groupsMods?: boolean | GroupsModsFindManyArgs
    groupsUsers?: boolean | GroupsUsersFindManyArgs
    userData?: boolean | UserDataFindManyArgs
    sharedIngredient?: boolean | SharedIngredientFindManyArgs
    sharedVersion?: boolean | SharedVersionFindManyArgs
    recipes?: boolean | RecipeFindManyArgs
    version?: boolean | VersionFindManyArgs
    ingredients?: boolean | IngredientFindManyArgs
    spec?: boolean | SpecFindManyArgs
    adminOnVersion?: boolean | AdminOnVersionFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersInclude = {
    groupsMods?: boolean | GroupsModsFindManyArgs
    groupsUsers?: boolean | GroupsUsersFindManyArgs
    userData?: boolean | UserDataFindManyArgs
    sharedIngredient?: boolean | SharedIngredientFindManyArgs
    sharedVersion?: boolean | SharedVersionFindManyArgs
    recipes?: boolean | RecipeFindManyArgs
    version?: boolean | VersionFindManyArgs
    ingredients?: boolean | IngredientFindManyArgs
    spec?: boolean | SpecFindManyArgs
    adminOnVersion?: boolean | AdminOnVersionFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groupsMods' ? Array < GroupsModsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groupsUsers' ? Array < GroupsUsersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'userData' ? Array < UserDataGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'sharedIngredient' ? Array < SharedIngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'sharedVersion' ? Array < SharedVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'recipes' ? Array < RecipeGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'ingredients' ? Array < IngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'adminOnVersion' ? Array < AdminOnVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groupsMods' ? Array < GroupsModsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groupsUsers' ? Array < GroupsUsersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'userData' ? Array < UserDataGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'sharedIngredient' ? Array < SharedIngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'sharedVersion' ? Array < SharedVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'recipes' ? Array < RecipeGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'ingredients' ? Array < IngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'adminOnVersion' ? Array < AdminOnVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Users ? Users[P] : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groupsMods<T extends GroupsModsFindManyArgs = {}>(args?: Subset<T, GroupsModsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsMods>>, PrismaPromise<Array<GroupsModsGetPayload<T>>>>;

    groupsUsers<T extends GroupsUsersFindManyArgs = {}>(args?: Subset<T, GroupsUsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupsUsers>>, PrismaPromise<Array<GroupsUsersGetPayload<T>>>>;

    userData<T extends UserDataFindManyArgs = {}>(args?: Subset<T, UserDataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserData>>, PrismaPromise<Array<UserDataGetPayload<T>>>>;

    sharedIngredient<T extends SharedIngredientFindManyArgs = {}>(args?: Subset<T, SharedIngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SharedIngredient>>, PrismaPromise<Array<SharedIngredientGetPayload<T>>>>;

    sharedVersion<T extends SharedVersionFindManyArgs = {}>(args?: Subset<T, SharedVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SharedVersion>>, PrismaPromise<Array<SharedVersionGetPayload<T>>>>;

    recipes<T extends RecipeFindManyArgs = {}>(args?: Subset<T, RecipeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Recipe>>, PrismaPromise<Array<RecipeGetPayload<T>>>>;

    version<T extends VersionFindManyArgs = {}>(args?: Subset<T, VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>;

    ingredients<T extends IngredientFindManyArgs = {}>(args?: Subset<T, IngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Ingredient>>, PrismaPromise<Array<IngredientGetPayload<T>>>>;

    spec<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    adminOnVersion<T extends AdminOnVersionFindManyArgs = {}>(args?: Subset<T, AdminOnVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AdminOnVersion>>, PrismaPromise<Array<AdminOnVersionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users: findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users: findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users: findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = UsersFindUniqueArgsBase
      

  /**
   * Users: findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = UsersFindFirstArgsBase
      

  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model SharedIngredient
   */


  export type AggregateSharedIngredient = {
    _count: SharedIngredientCountAggregateOutputType | null
    _avg: SharedIngredientAvgAggregateOutputType | null
    _sum: SharedIngredientSumAggregateOutputType | null
    _min: SharedIngredientMinAggregateOutputType | null
    _max: SharedIngredientMaxAggregateOutputType | null
  }

  export type SharedIngredientAvgAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type SharedIngredientSumAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type SharedIngredientMinAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type SharedIngredientMaxAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type SharedIngredientCountAggregateOutputType = {
    userId: number
    ingredientId: number
    _all: number
  }


  export type SharedIngredientAvgAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type SharedIngredientSumAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type SharedIngredientMinAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type SharedIngredientMaxAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type SharedIngredientCountAggregateInputType = {
    userId?: true
    ingredientId?: true
    _all?: true
  }

  export type SharedIngredientAggregateArgs = {
    /**
     * Filter which SharedIngredient to aggregate.
     * 
    **/
    where?: SharedIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedIngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SharedIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedIngredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SharedIngredients
    **/
    _count?: true | SharedIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SharedIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SharedIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SharedIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SharedIngredientMaxAggregateInputType
  }

  export type GetSharedIngredientAggregateType<T extends SharedIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateSharedIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSharedIngredient[P]>
      : GetScalarType<T[P], AggregateSharedIngredient[P]>
  }




  export type SharedIngredientGroupByArgs = {
    where?: SharedIngredientWhereInput
    orderBy?: Enumerable<SharedIngredientOrderByWithAggregationInput>
    by: Array<SharedIngredientScalarFieldEnum>
    having?: SharedIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SharedIngredientCountAggregateInputType | true
    _avg?: SharedIngredientAvgAggregateInputType
    _sum?: SharedIngredientSumAggregateInputType
    _min?: SharedIngredientMinAggregateInputType
    _max?: SharedIngredientMaxAggregateInputType
  }


  export type SharedIngredientGroupByOutputType = {
    userId: number
    ingredientId: number
    _count: SharedIngredientCountAggregateOutputType | null
    _avg: SharedIngredientAvgAggregateOutputType | null
    _sum: SharedIngredientSumAggregateOutputType | null
    _min: SharedIngredientMinAggregateOutputType | null
    _max: SharedIngredientMaxAggregateOutputType | null
  }

  type GetSharedIngredientGroupByPayload<T extends SharedIngredientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SharedIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SharedIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SharedIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], SharedIngredientGroupByOutputType[P]>
        }
      >
    >


  export type SharedIngredientSelect = {
    userId?: boolean
    ingredientId?: boolean
    ingredients?: boolean | IngredientArgs
    users?: boolean | UsersArgs
  }

  export type SharedIngredientInclude = {
    ingredients?: boolean | IngredientArgs
    users?: boolean | UsersArgs
  }

  export type SharedIngredientGetPayload<
    S extends boolean | null | undefined | SharedIngredientArgs,
    U = keyof S
      > = S extends true
        ? SharedIngredient
    : S extends undefined
    ? never
    : S extends SharedIngredientArgs | SharedIngredientFindManyArgs
    ?'include' extends U
    ? SharedIngredient  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof SharedIngredient ? SharedIngredient[P] : never
  } 
    : SharedIngredient
  : SharedIngredient


  type SharedIngredientCountArgs = Merge<
    Omit<SharedIngredientFindManyArgs, 'select' | 'include'> & {
      select?: SharedIngredientCountAggregateInputType | true
    }
  >

  export interface SharedIngredientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SharedIngredient that matches the filter.
     * @param {SharedIngredientFindUniqueArgs} args - Arguments to find a SharedIngredient
     * @example
     * // Get one SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SharedIngredientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SharedIngredientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SharedIngredient'> extends True ? CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>> : CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient | null >, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T> | null >>

    /**
     * Find the first SharedIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientFindFirstArgs} args - Arguments to find a SharedIngredient
     * @example
     * // Get one SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SharedIngredientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SharedIngredientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SharedIngredient'> extends True ? CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>> : CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient | null >, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T> | null >>

    /**
     * Find zero or more SharedIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SharedIngredients
     * const sharedIngredients = await prisma.sharedIngredient.findMany()
     * 
     * // Get first 10 SharedIngredients
     * const sharedIngredients = await prisma.sharedIngredient.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const sharedIngredientWithUserIdOnly = await prisma.sharedIngredient.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends SharedIngredientFindManyArgs>(
      args?: SelectSubset<T, SharedIngredientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SharedIngredient>>, PrismaPromise<Array<SharedIngredientGetPayload<T>>>>

    /**
     * Create a SharedIngredient.
     * @param {SharedIngredientCreateArgs} args - Arguments to create a SharedIngredient.
     * @example
     * // Create one SharedIngredient
     * const SharedIngredient = await prisma.sharedIngredient.create({
     *   data: {
     *     // ... data to create a SharedIngredient
     *   }
     * })
     * 
    **/
    create<T extends SharedIngredientCreateArgs>(
      args: SelectSubset<T, SharedIngredientCreateArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Create many SharedIngredients.
     *     @param {SharedIngredientCreateManyArgs} args - Arguments to create many SharedIngredients.
     *     @example
     *     // Create many SharedIngredients
     *     const sharedIngredient = await prisma.sharedIngredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SharedIngredientCreateManyArgs>(
      args?: SelectSubset<T, SharedIngredientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SharedIngredient.
     * @param {SharedIngredientDeleteArgs} args - Arguments to delete one SharedIngredient.
     * @example
     * // Delete one SharedIngredient
     * const SharedIngredient = await prisma.sharedIngredient.delete({
     *   where: {
     *     // ... filter to delete one SharedIngredient
     *   }
     * })
     * 
    **/
    delete<T extends SharedIngredientDeleteArgs>(
      args: SelectSubset<T, SharedIngredientDeleteArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Update one SharedIngredient.
     * @param {SharedIngredientUpdateArgs} args - Arguments to update one SharedIngredient.
     * @example
     * // Update one SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SharedIngredientUpdateArgs>(
      args: SelectSubset<T, SharedIngredientUpdateArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Delete zero or more SharedIngredients.
     * @param {SharedIngredientDeleteManyArgs} args - Arguments to filter SharedIngredients to delete.
     * @example
     * // Delete a few SharedIngredients
     * const { count } = await prisma.sharedIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SharedIngredientDeleteManyArgs>(
      args?: SelectSubset<T, SharedIngredientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SharedIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SharedIngredients
     * const sharedIngredient = await prisma.sharedIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SharedIngredientUpdateManyArgs>(
      args: SelectSubset<T, SharedIngredientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SharedIngredient.
     * @param {SharedIngredientUpsertArgs} args - Arguments to update or create a SharedIngredient.
     * @example
     * // Update or create a SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.upsert({
     *   create: {
     *     // ... data to create a SharedIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SharedIngredient we want to update
     *   }
     * })
    **/
    upsert<T extends SharedIngredientUpsertArgs>(
      args: SelectSubset<T, SharedIngredientUpsertArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Find one SharedIngredient that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SharedIngredientFindUniqueOrThrowArgs} args - Arguments to find a SharedIngredient
     * @example
     * // Get one SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SharedIngredientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SharedIngredientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Find the first SharedIngredient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientFindFirstOrThrowArgs} args - Arguments to find a SharedIngredient
     * @example
     * // Get one SharedIngredient
     * const sharedIngredient = await prisma.sharedIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SharedIngredientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SharedIngredientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SharedIngredientClient<SharedIngredient>, Prisma__SharedIngredientClient<SharedIngredientGetPayload<T>>>

    /**
     * Count the number of SharedIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientCountArgs} args - Arguments to filter SharedIngredients to count.
     * @example
     * // Count the number of SharedIngredients
     * const count = await prisma.sharedIngredient.count({
     *   where: {
     *     // ... the filter for the SharedIngredients we want to count
     *   }
     * })
    **/
    count<T extends SharedIngredientCountArgs>(
      args?: Subset<T, SharedIngredientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SharedIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SharedIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SharedIngredientAggregateArgs>(args: Subset<T, SharedIngredientAggregateArgs>): PrismaPromise<GetSharedIngredientAggregateType<T>>

    /**
     * Group by SharedIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SharedIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SharedIngredientGroupByArgs['orderBy'] }
        : { orderBy?: SharedIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SharedIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharedIngredientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SharedIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SharedIngredientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredients<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SharedIngredient base type for findUnique actions
   */
  export type SharedIngredientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * Filter, which SharedIngredient to fetch.
     * 
    **/
    where: SharedIngredientWhereUniqueInput
  }

  /**
   * SharedIngredient: findUnique
   */
  export interface SharedIngredientFindUniqueArgs extends SharedIngredientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SharedIngredient base type for findFirst actions
   */
  export type SharedIngredientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * Filter, which SharedIngredient to fetch.
     * 
    **/
    where?: SharedIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedIngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedIngredients.
     * 
    **/
    cursor?: SharedIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedIngredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedIngredients.
     * 
    **/
    distinct?: Enumerable<SharedIngredientScalarFieldEnum>
  }

  /**
   * SharedIngredient: findFirst
   */
  export interface SharedIngredientFindFirstArgs extends SharedIngredientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SharedIngredient findMany
   */
  export type SharedIngredientFindManyArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * Filter, which SharedIngredients to fetch.
     * 
    **/
    where?: SharedIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedIngredients to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedIngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SharedIngredients.
     * 
    **/
    cursor?: SharedIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedIngredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedIngredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SharedIngredientScalarFieldEnum>
  }


  /**
   * SharedIngredient create
   */
  export type SharedIngredientCreateArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * The data needed to create a SharedIngredient.
     * 
    **/
    data: XOR<SharedIngredientCreateInput, SharedIngredientUncheckedCreateInput>
  }


  /**
   * SharedIngredient createMany
   */
  export type SharedIngredientCreateManyArgs = {
    /**
     * The data used to create many SharedIngredients.
     * 
    **/
    data: Enumerable<SharedIngredientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SharedIngredient update
   */
  export type SharedIngredientUpdateArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * The data needed to update a SharedIngredient.
     * 
    **/
    data: XOR<SharedIngredientUpdateInput, SharedIngredientUncheckedUpdateInput>
    /**
     * Choose, which SharedIngredient to update.
     * 
    **/
    where: SharedIngredientWhereUniqueInput
  }


  /**
   * SharedIngredient updateMany
   */
  export type SharedIngredientUpdateManyArgs = {
    /**
     * The data used to update SharedIngredients.
     * 
    **/
    data: XOR<SharedIngredientUpdateManyMutationInput, SharedIngredientUncheckedUpdateManyInput>
    /**
     * Filter which SharedIngredients to update
     * 
    **/
    where?: SharedIngredientWhereInput
  }


  /**
   * SharedIngredient upsert
   */
  export type SharedIngredientUpsertArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * The filter to search for the SharedIngredient to update in case it exists.
     * 
    **/
    where: SharedIngredientWhereUniqueInput
    /**
     * In case the SharedIngredient found by the `where` argument doesn't exist, create a new SharedIngredient with this data.
     * 
    **/
    create: XOR<SharedIngredientCreateInput, SharedIngredientUncheckedCreateInput>
    /**
     * In case the SharedIngredient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SharedIngredientUpdateInput, SharedIngredientUncheckedUpdateInput>
  }


  /**
   * SharedIngredient delete
   */
  export type SharedIngredientDeleteArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
    /**
     * Filter which SharedIngredient to delete.
     * 
    **/
    where: SharedIngredientWhereUniqueInput
  }


  /**
   * SharedIngredient deleteMany
   */
  export type SharedIngredientDeleteManyArgs = {
    /**
     * Filter which SharedIngredients to delete
     * 
    **/
    where?: SharedIngredientWhereInput
  }


  /**
   * SharedIngredient: findUniqueOrThrow
   */
  export type SharedIngredientFindUniqueOrThrowArgs = SharedIngredientFindUniqueArgsBase
      

  /**
   * SharedIngredient: findFirstOrThrow
   */
  export type SharedIngredientFindFirstOrThrowArgs = SharedIngredientFindFirstArgsBase
      

  /**
   * SharedIngredient without action
   */
  export type SharedIngredientArgs = {
    /**
     * Select specific fields to fetch from the SharedIngredient
     * 
    **/
    select?: SharedIngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedIngredientInclude | null
  }



  /**
   * Model SharedVersion
   */


  export type AggregateSharedVersion = {
    _count: SharedVersionCountAggregateOutputType | null
    _avg: SharedVersionAvgAggregateOutputType | null
    _sum: SharedVersionSumAggregateOutputType | null
    _min: SharedVersionMinAggregateOutputType | null
    _max: SharedVersionMaxAggregateOutputType | null
  }

  export type SharedVersionAvgAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type SharedVersionSumAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type SharedVersionMinAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type SharedVersionMaxAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type SharedVersionCountAggregateOutputType = {
    userId: number
    versionId: number
    _all: number
  }


  export type SharedVersionAvgAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type SharedVersionSumAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type SharedVersionMinAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type SharedVersionMaxAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type SharedVersionCountAggregateInputType = {
    userId?: true
    versionId?: true
    _all?: true
  }

  export type SharedVersionAggregateArgs = {
    /**
     * Filter which SharedVersion to aggregate.
     * 
    **/
    where?: SharedVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SharedVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SharedVersions
    **/
    _count?: true | SharedVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SharedVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SharedVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SharedVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SharedVersionMaxAggregateInputType
  }

  export type GetSharedVersionAggregateType<T extends SharedVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateSharedVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSharedVersion[P]>
      : GetScalarType<T[P], AggregateSharedVersion[P]>
  }




  export type SharedVersionGroupByArgs = {
    where?: SharedVersionWhereInput
    orderBy?: Enumerable<SharedVersionOrderByWithAggregationInput>
    by: Array<SharedVersionScalarFieldEnum>
    having?: SharedVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SharedVersionCountAggregateInputType | true
    _avg?: SharedVersionAvgAggregateInputType
    _sum?: SharedVersionSumAggregateInputType
    _min?: SharedVersionMinAggregateInputType
    _max?: SharedVersionMaxAggregateInputType
  }


  export type SharedVersionGroupByOutputType = {
    userId: number
    versionId: number
    _count: SharedVersionCountAggregateOutputType | null
    _avg: SharedVersionAvgAggregateOutputType | null
    _sum: SharedVersionSumAggregateOutputType | null
    _min: SharedVersionMinAggregateOutputType | null
    _max: SharedVersionMaxAggregateOutputType | null
  }

  type GetSharedVersionGroupByPayload<T extends SharedVersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SharedVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SharedVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SharedVersionGroupByOutputType[P]>
            : GetScalarType<T[P], SharedVersionGroupByOutputType[P]>
        }
      >
    >


  export type SharedVersionSelect = {
    userId?: boolean
    versionId?: boolean
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type SharedVersionInclude = {
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type SharedVersionGetPayload<
    S extends boolean | null | undefined | SharedVersionArgs,
    U = keyof S
      > = S extends true
        ? SharedVersion
    : S extends undefined
    ? never
    : S extends SharedVersionArgs | SharedVersionFindManyArgs
    ?'include' extends U
    ? SharedVersion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof SharedVersion ? SharedVersion[P] : never
  } 
    : SharedVersion
  : SharedVersion


  type SharedVersionCountArgs = Merge<
    Omit<SharedVersionFindManyArgs, 'select' | 'include'> & {
      select?: SharedVersionCountAggregateInputType | true
    }
  >

  export interface SharedVersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SharedVersion that matches the filter.
     * @param {SharedVersionFindUniqueArgs} args - Arguments to find a SharedVersion
     * @example
     * // Get one SharedVersion
     * const sharedVersion = await prisma.sharedVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SharedVersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SharedVersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SharedVersion'> extends True ? CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>> : CheckSelect<T, Prisma__SharedVersionClient<SharedVersion | null >, Prisma__SharedVersionClient<SharedVersionGetPayload<T> | null >>

    /**
     * Find the first SharedVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionFindFirstArgs} args - Arguments to find a SharedVersion
     * @example
     * // Get one SharedVersion
     * const sharedVersion = await prisma.sharedVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SharedVersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SharedVersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SharedVersion'> extends True ? CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>> : CheckSelect<T, Prisma__SharedVersionClient<SharedVersion | null >, Prisma__SharedVersionClient<SharedVersionGetPayload<T> | null >>

    /**
     * Find zero or more SharedVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SharedVersions
     * const sharedVersions = await prisma.sharedVersion.findMany()
     * 
     * // Get first 10 SharedVersions
     * const sharedVersions = await prisma.sharedVersion.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const sharedVersionWithUserIdOnly = await prisma.sharedVersion.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends SharedVersionFindManyArgs>(
      args?: SelectSubset<T, SharedVersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SharedVersion>>, PrismaPromise<Array<SharedVersionGetPayload<T>>>>

    /**
     * Create a SharedVersion.
     * @param {SharedVersionCreateArgs} args - Arguments to create a SharedVersion.
     * @example
     * // Create one SharedVersion
     * const SharedVersion = await prisma.sharedVersion.create({
     *   data: {
     *     // ... data to create a SharedVersion
     *   }
     * })
     * 
    **/
    create<T extends SharedVersionCreateArgs>(
      args: SelectSubset<T, SharedVersionCreateArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Create many SharedVersions.
     *     @param {SharedVersionCreateManyArgs} args - Arguments to create many SharedVersions.
     *     @example
     *     // Create many SharedVersions
     *     const sharedVersion = await prisma.sharedVersion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SharedVersionCreateManyArgs>(
      args?: SelectSubset<T, SharedVersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SharedVersion.
     * @param {SharedVersionDeleteArgs} args - Arguments to delete one SharedVersion.
     * @example
     * // Delete one SharedVersion
     * const SharedVersion = await prisma.sharedVersion.delete({
     *   where: {
     *     // ... filter to delete one SharedVersion
     *   }
     * })
     * 
    **/
    delete<T extends SharedVersionDeleteArgs>(
      args: SelectSubset<T, SharedVersionDeleteArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Update one SharedVersion.
     * @param {SharedVersionUpdateArgs} args - Arguments to update one SharedVersion.
     * @example
     * // Update one SharedVersion
     * const sharedVersion = await prisma.sharedVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SharedVersionUpdateArgs>(
      args: SelectSubset<T, SharedVersionUpdateArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Delete zero or more SharedVersions.
     * @param {SharedVersionDeleteManyArgs} args - Arguments to filter SharedVersions to delete.
     * @example
     * // Delete a few SharedVersions
     * const { count } = await prisma.sharedVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SharedVersionDeleteManyArgs>(
      args?: SelectSubset<T, SharedVersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SharedVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SharedVersions
     * const sharedVersion = await prisma.sharedVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SharedVersionUpdateManyArgs>(
      args: SelectSubset<T, SharedVersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SharedVersion.
     * @param {SharedVersionUpsertArgs} args - Arguments to update or create a SharedVersion.
     * @example
     * // Update or create a SharedVersion
     * const sharedVersion = await prisma.sharedVersion.upsert({
     *   create: {
     *     // ... data to create a SharedVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SharedVersion we want to update
     *   }
     * })
    **/
    upsert<T extends SharedVersionUpsertArgs>(
      args: SelectSubset<T, SharedVersionUpsertArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Find one SharedVersion that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SharedVersionFindUniqueOrThrowArgs} args - Arguments to find a SharedVersion
     * @example
     * // Get one SharedVersion
     * const sharedVersion = await prisma.sharedVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SharedVersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SharedVersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Find the first SharedVersion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionFindFirstOrThrowArgs} args - Arguments to find a SharedVersion
     * @example
     * // Get one SharedVersion
     * const sharedVersion = await prisma.sharedVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SharedVersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SharedVersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SharedVersionClient<SharedVersion>, Prisma__SharedVersionClient<SharedVersionGetPayload<T>>>

    /**
     * Count the number of SharedVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionCountArgs} args - Arguments to filter SharedVersions to count.
     * @example
     * // Count the number of SharedVersions
     * const count = await prisma.sharedVersion.count({
     *   where: {
     *     // ... the filter for the SharedVersions we want to count
     *   }
     * })
    **/
    count<T extends SharedVersionCountArgs>(
      args?: Subset<T, SharedVersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SharedVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SharedVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SharedVersionAggregateArgs>(args: Subset<T, SharedVersionAggregateArgs>): PrismaPromise<GetSharedVersionAggregateType<T>>

    /**
     * Group by SharedVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SharedVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SharedVersionGroupByArgs['orderBy'] }
        : { orderBy?: SharedVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SharedVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharedVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SharedVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SharedVersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SharedVersion base type for findUnique actions
   */
  export type SharedVersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * Filter, which SharedVersion to fetch.
     * 
    **/
    where: SharedVersionWhereUniqueInput
  }

  /**
   * SharedVersion: findUnique
   */
  export interface SharedVersionFindUniqueArgs extends SharedVersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SharedVersion base type for findFirst actions
   */
  export type SharedVersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * Filter, which SharedVersion to fetch.
     * 
    **/
    where?: SharedVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedVersions.
     * 
    **/
    cursor?: SharedVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedVersions.
     * 
    **/
    distinct?: Enumerable<SharedVersionScalarFieldEnum>
  }

  /**
   * SharedVersion: findFirst
   */
  export interface SharedVersionFindFirstArgs extends SharedVersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SharedVersion findMany
   */
  export type SharedVersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * Filter, which SharedVersions to fetch.
     * 
    **/
    where?: SharedVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<SharedVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SharedVersions.
     * 
    **/
    cursor?: SharedVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedVersions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SharedVersionScalarFieldEnum>
  }


  /**
   * SharedVersion create
   */
  export type SharedVersionCreateArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * The data needed to create a SharedVersion.
     * 
    **/
    data: XOR<SharedVersionCreateInput, SharedVersionUncheckedCreateInput>
  }


  /**
   * SharedVersion createMany
   */
  export type SharedVersionCreateManyArgs = {
    /**
     * The data used to create many SharedVersions.
     * 
    **/
    data: Enumerable<SharedVersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SharedVersion update
   */
  export type SharedVersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * The data needed to update a SharedVersion.
     * 
    **/
    data: XOR<SharedVersionUpdateInput, SharedVersionUncheckedUpdateInput>
    /**
     * Choose, which SharedVersion to update.
     * 
    **/
    where: SharedVersionWhereUniqueInput
  }


  /**
   * SharedVersion updateMany
   */
  export type SharedVersionUpdateManyArgs = {
    /**
     * The data used to update SharedVersions.
     * 
    **/
    data: XOR<SharedVersionUpdateManyMutationInput, SharedVersionUncheckedUpdateManyInput>
    /**
     * Filter which SharedVersions to update
     * 
    **/
    where?: SharedVersionWhereInput
  }


  /**
   * SharedVersion upsert
   */
  export type SharedVersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * The filter to search for the SharedVersion to update in case it exists.
     * 
    **/
    where: SharedVersionWhereUniqueInput
    /**
     * In case the SharedVersion found by the `where` argument doesn't exist, create a new SharedVersion with this data.
     * 
    **/
    create: XOR<SharedVersionCreateInput, SharedVersionUncheckedCreateInput>
    /**
     * In case the SharedVersion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SharedVersionUpdateInput, SharedVersionUncheckedUpdateInput>
  }


  /**
   * SharedVersion delete
   */
  export type SharedVersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
    /**
     * Filter which SharedVersion to delete.
     * 
    **/
    where: SharedVersionWhereUniqueInput
  }


  /**
   * SharedVersion deleteMany
   */
  export type SharedVersionDeleteManyArgs = {
    /**
     * Filter which SharedVersions to delete
     * 
    **/
    where?: SharedVersionWhereInput
  }


  /**
   * SharedVersion: findUniqueOrThrow
   */
  export type SharedVersionFindUniqueOrThrowArgs = SharedVersionFindUniqueArgsBase
      

  /**
   * SharedVersion: findFirstOrThrow
   */
  export type SharedVersionFindFirstOrThrowArgs = SharedVersionFindFirstArgsBase
      

  /**
   * SharedVersion without action
   */
  export type SharedVersionArgs = {
    /**
     * Select specific fields to fetch from the SharedVersion
     * 
    **/
    select?: SharedVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SharedVersionInclude | null
  }



  /**
   * Model AdminOnVersion
   */


  export type AggregateAdminOnVersion = {
    _count: AdminOnVersionCountAggregateOutputType | null
    _avg: AdminOnVersionAvgAggregateOutputType | null
    _sum: AdminOnVersionSumAggregateOutputType | null
    _min: AdminOnVersionMinAggregateOutputType | null
    _max: AdminOnVersionMaxAggregateOutputType | null
  }

  export type AdminOnVersionAvgAggregateOutputType = {
    userId: number | null
    versionId: number | null
    assignedById: number | null
  }

  export type AdminOnVersionSumAggregateOutputType = {
    userId: number | null
    versionId: number | null
    assignedById: number | null
  }

  export type AdminOnVersionMinAggregateOutputType = {
    userId: number | null
    versionId: number | null
    assignedById: number | null
    assignedAt: Date | null
  }

  export type AdminOnVersionMaxAggregateOutputType = {
    userId: number | null
    versionId: number | null
    assignedById: number | null
    assignedAt: Date | null
  }

  export type AdminOnVersionCountAggregateOutputType = {
    userId: number
    versionId: number
    assignedById: number
    assignedAt: number
    _all: number
  }


  export type AdminOnVersionAvgAggregateInputType = {
    userId?: true
    versionId?: true
    assignedById?: true
  }

  export type AdminOnVersionSumAggregateInputType = {
    userId?: true
    versionId?: true
    assignedById?: true
  }

  export type AdminOnVersionMinAggregateInputType = {
    userId?: true
    versionId?: true
    assignedById?: true
    assignedAt?: true
  }

  export type AdminOnVersionMaxAggregateInputType = {
    userId?: true
    versionId?: true
    assignedById?: true
    assignedAt?: true
  }

  export type AdminOnVersionCountAggregateInputType = {
    userId?: true
    versionId?: true
    assignedById?: true
    assignedAt?: true
    _all?: true
  }

  export type AdminOnVersionAggregateArgs = {
    /**
     * Filter which AdminOnVersion to aggregate.
     * 
    **/
    where?: AdminOnVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOnVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOnVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AdminOnVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOnVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOnVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminOnVersions
    **/
    _count?: true | AdminOnVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminOnVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminOnVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminOnVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminOnVersionMaxAggregateInputType
  }

  export type GetAdminOnVersionAggregateType<T extends AdminOnVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminOnVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminOnVersion[P]>
      : GetScalarType<T[P], AggregateAdminOnVersion[P]>
  }




  export type AdminOnVersionGroupByArgs = {
    where?: AdminOnVersionWhereInput
    orderBy?: Enumerable<AdminOnVersionOrderByWithAggregationInput>
    by: Array<AdminOnVersionScalarFieldEnum>
    having?: AdminOnVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminOnVersionCountAggregateInputType | true
    _avg?: AdminOnVersionAvgAggregateInputType
    _sum?: AdminOnVersionSumAggregateInputType
    _min?: AdminOnVersionMinAggregateInputType
    _max?: AdminOnVersionMaxAggregateInputType
  }


  export type AdminOnVersionGroupByOutputType = {
    userId: number
    versionId: number
    assignedById: number
    assignedAt: Date
    _count: AdminOnVersionCountAggregateOutputType | null
    _avg: AdminOnVersionAvgAggregateOutputType | null
    _sum: AdminOnVersionSumAggregateOutputType | null
    _min: AdminOnVersionMinAggregateOutputType | null
    _max: AdminOnVersionMaxAggregateOutputType | null
  }

  type GetAdminOnVersionGroupByPayload<T extends AdminOnVersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminOnVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminOnVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminOnVersionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminOnVersionGroupByOutputType[P]>
        }
      >
    >


  export type AdminOnVersionSelect = {
    userId?: boolean
    versionId?: boolean
    assignedById?: boolean
    assignedAt?: boolean
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type AdminOnVersionInclude = {
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type AdminOnVersionGetPayload<
    S extends boolean | null | undefined | AdminOnVersionArgs,
    U = keyof S
      > = S extends true
        ? AdminOnVersion
    : S extends undefined
    ? never
    : S extends AdminOnVersionArgs | AdminOnVersionFindManyArgs
    ?'include' extends U
    ? AdminOnVersion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof AdminOnVersion ? AdminOnVersion[P] : never
  } 
    : AdminOnVersion
  : AdminOnVersion


  type AdminOnVersionCountArgs = Merge<
    Omit<AdminOnVersionFindManyArgs, 'select' | 'include'> & {
      select?: AdminOnVersionCountAggregateInputType | true
    }
  >

  export interface AdminOnVersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one AdminOnVersion that matches the filter.
     * @param {AdminOnVersionFindUniqueArgs} args - Arguments to find a AdminOnVersion
     * @example
     * // Get one AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminOnVersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminOnVersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AdminOnVersion'> extends True ? CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>> : CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion | null >, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T> | null >>

    /**
     * Find the first AdminOnVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionFindFirstArgs} args - Arguments to find a AdminOnVersion
     * @example
     * // Get one AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminOnVersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminOnVersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AdminOnVersion'> extends True ? CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>> : CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion | null >, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T> | null >>

    /**
     * Find zero or more AdminOnVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminOnVersions
     * const adminOnVersions = await prisma.adminOnVersion.findMany()
     * 
     * // Get first 10 AdminOnVersions
     * const adminOnVersions = await prisma.adminOnVersion.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const adminOnVersionWithUserIdOnly = await prisma.adminOnVersion.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends AdminOnVersionFindManyArgs>(
      args?: SelectSubset<T, AdminOnVersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AdminOnVersion>>, PrismaPromise<Array<AdminOnVersionGetPayload<T>>>>

    /**
     * Create a AdminOnVersion.
     * @param {AdminOnVersionCreateArgs} args - Arguments to create a AdminOnVersion.
     * @example
     * // Create one AdminOnVersion
     * const AdminOnVersion = await prisma.adminOnVersion.create({
     *   data: {
     *     // ... data to create a AdminOnVersion
     *   }
     * })
     * 
    **/
    create<T extends AdminOnVersionCreateArgs>(
      args: SelectSubset<T, AdminOnVersionCreateArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Create many AdminOnVersions.
     *     @param {AdminOnVersionCreateManyArgs} args - Arguments to create many AdminOnVersions.
     *     @example
     *     // Create many AdminOnVersions
     *     const adminOnVersion = await prisma.adminOnVersion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminOnVersionCreateManyArgs>(
      args?: SelectSubset<T, AdminOnVersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AdminOnVersion.
     * @param {AdminOnVersionDeleteArgs} args - Arguments to delete one AdminOnVersion.
     * @example
     * // Delete one AdminOnVersion
     * const AdminOnVersion = await prisma.adminOnVersion.delete({
     *   where: {
     *     // ... filter to delete one AdminOnVersion
     *   }
     * })
     * 
    **/
    delete<T extends AdminOnVersionDeleteArgs>(
      args: SelectSubset<T, AdminOnVersionDeleteArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Update one AdminOnVersion.
     * @param {AdminOnVersionUpdateArgs} args - Arguments to update one AdminOnVersion.
     * @example
     * // Update one AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminOnVersionUpdateArgs>(
      args: SelectSubset<T, AdminOnVersionUpdateArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Delete zero or more AdminOnVersions.
     * @param {AdminOnVersionDeleteManyArgs} args - Arguments to filter AdminOnVersions to delete.
     * @example
     * // Delete a few AdminOnVersions
     * const { count } = await prisma.adminOnVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminOnVersionDeleteManyArgs>(
      args?: SelectSubset<T, AdminOnVersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminOnVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminOnVersions
     * const adminOnVersion = await prisma.adminOnVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminOnVersionUpdateManyArgs>(
      args: SelectSubset<T, AdminOnVersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminOnVersion.
     * @param {AdminOnVersionUpsertArgs} args - Arguments to update or create a AdminOnVersion.
     * @example
     * // Update or create a AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.upsert({
     *   create: {
     *     // ... data to create a AdminOnVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminOnVersion we want to update
     *   }
     * })
    **/
    upsert<T extends AdminOnVersionUpsertArgs>(
      args: SelectSubset<T, AdminOnVersionUpsertArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Find one AdminOnVersion that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AdminOnVersionFindUniqueOrThrowArgs} args - Arguments to find a AdminOnVersion
     * @example
     * // Get one AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminOnVersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminOnVersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Find the first AdminOnVersion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionFindFirstOrThrowArgs} args - Arguments to find a AdminOnVersion
     * @example
     * // Get one AdminOnVersion
     * const adminOnVersion = await prisma.adminOnVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminOnVersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminOnVersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AdminOnVersionClient<AdminOnVersion>, Prisma__AdminOnVersionClient<AdminOnVersionGetPayload<T>>>

    /**
     * Count the number of AdminOnVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionCountArgs} args - Arguments to filter AdminOnVersions to count.
     * @example
     * // Count the number of AdminOnVersions
     * const count = await prisma.adminOnVersion.count({
     *   where: {
     *     // ... the filter for the AdminOnVersions we want to count
     *   }
     * })
    **/
    count<T extends AdminOnVersionCountArgs>(
      args?: Subset<T, AdminOnVersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminOnVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminOnVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminOnVersionAggregateArgs>(args: Subset<T, AdminOnVersionAggregateArgs>): PrismaPromise<GetAdminOnVersionAggregateType<T>>

    /**
     * Group by AdminOnVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOnVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminOnVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminOnVersionGroupByArgs['orderBy'] }
        : { orderBy?: AdminOnVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminOnVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminOnVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminOnVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminOnVersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AdminOnVersion base type for findUnique actions
   */
  export type AdminOnVersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * Filter, which AdminOnVersion to fetch.
     * 
    **/
    where: AdminOnVersionWhereUniqueInput
  }

  /**
   * AdminOnVersion: findUnique
   */
  export interface AdminOnVersionFindUniqueArgs extends AdminOnVersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AdminOnVersion base type for findFirst actions
   */
  export type AdminOnVersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * Filter, which AdminOnVersion to fetch.
     * 
    **/
    where?: AdminOnVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOnVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOnVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminOnVersions.
     * 
    **/
    cursor?: AdminOnVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOnVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOnVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminOnVersions.
     * 
    **/
    distinct?: Enumerable<AdminOnVersionScalarFieldEnum>
  }

  /**
   * AdminOnVersion: findFirst
   */
  export interface AdminOnVersionFindFirstArgs extends AdminOnVersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AdminOnVersion findMany
   */
  export type AdminOnVersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * Filter, which AdminOnVersions to fetch.
     * 
    **/
    where?: AdminOnVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOnVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOnVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminOnVersions.
     * 
    **/
    cursor?: AdminOnVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOnVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOnVersions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminOnVersionScalarFieldEnum>
  }


  /**
   * AdminOnVersion create
   */
  export type AdminOnVersionCreateArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * The data needed to create a AdminOnVersion.
     * 
    **/
    data: XOR<AdminOnVersionCreateInput, AdminOnVersionUncheckedCreateInput>
  }


  /**
   * AdminOnVersion createMany
   */
  export type AdminOnVersionCreateManyArgs = {
    /**
     * The data used to create many AdminOnVersions.
     * 
    **/
    data: Enumerable<AdminOnVersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AdminOnVersion update
   */
  export type AdminOnVersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * The data needed to update a AdminOnVersion.
     * 
    **/
    data: XOR<AdminOnVersionUpdateInput, AdminOnVersionUncheckedUpdateInput>
    /**
     * Choose, which AdminOnVersion to update.
     * 
    **/
    where: AdminOnVersionWhereUniqueInput
  }


  /**
   * AdminOnVersion updateMany
   */
  export type AdminOnVersionUpdateManyArgs = {
    /**
     * The data used to update AdminOnVersions.
     * 
    **/
    data: XOR<AdminOnVersionUpdateManyMutationInput, AdminOnVersionUncheckedUpdateManyInput>
    /**
     * Filter which AdminOnVersions to update
     * 
    **/
    where?: AdminOnVersionWhereInput
  }


  /**
   * AdminOnVersion upsert
   */
  export type AdminOnVersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * The filter to search for the AdminOnVersion to update in case it exists.
     * 
    **/
    where: AdminOnVersionWhereUniqueInput
    /**
     * In case the AdminOnVersion found by the `where` argument doesn't exist, create a new AdminOnVersion with this data.
     * 
    **/
    create: XOR<AdminOnVersionCreateInput, AdminOnVersionUncheckedCreateInput>
    /**
     * In case the AdminOnVersion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AdminOnVersionUpdateInput, AdminOnVersionUncheckedUpdateInput>
  }


  /**
   * AdminOnVersion delete
   */
  export type AdminOnVersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
    /**
     * Filter which AdminOnVersion to delete.
     * 
    **/
    where: AdminOnVersionWhereUniqueInput
  }


  /**
   * AdminOnVersion deleteMany
   */
  export type AdminOnVersionDeleteManyArgs = {
    /**
     * Filter which AdminOnVersions to delete
     * 
    **/
    where?: AdminOnVersionWhereInput
  }


  /**
   * AdminOnVersion: findUniqueOrThrow
   */
  export type AdminOnVersionFindUniqueOrThrowArgs = AdminOnVersionFindUniqueArgsBase
      

  /**
   * AdminOnVersion: findFirstOrThrow
   */
  export type AdminOnVersionFindFirstOrThrowArgs = AdminOnVersionFindFirstArgsBase
      

  /**
   * AdminOnVersion without action
   */
  export type AdminOnVersionArgs = {
    /**
     * Select specific fields to fetch from the AdminOnVersion
     * 
    **/
    select?: AdminOnVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AdminOnVersionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminOnVersionScalarFieldEnum: {
    userId: 'userId',
    versionId: 'versionId',
    assignedById: 'assignedById',
    assignedAt: 'assignedAt'
  };

  export type AdminOnVersionScalarFieldEnum = (typeof AdminOnVersionScalarFieldEnum)[keyof typeof AdminOnVersionScalarFieldEnum]


  export const GroupVersionScalarFieldEnum: {
    groupId: 'groupId',
    versionId: 'versionId'
  };

  export type GroupVersionScalarFieldEnum = (typeof GroupVersionScalarFieldEnum)[keyof typeof GroupVersionScalarFieldEnum]


  export const GroupsIngredientsScalarFieldEnum: {
    groupId: 'groupId',
    ingredientId: 'ingredientId'
  };

  export type GroupsIngredientsScalarFieldEnum = (typeof GroupsIngredientsScalarFieldEnum)[keyof typeof GroupsIngredientsScalarFieldEnum]


  export const GroupsModsScalarFieldEnum: {
    userId: 'userId',
    groupId: 'groupId'
  };

  export type GroupsModsScalarFieldEnum = (typeof GroupsModsScalarFieldEnum)[keyof typeof GroupsModsScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    dateCreated: 'dateCreated'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const GroupsUsersScalarFieldEnum: {
    userId: 'userId',
    groupId: 'groupId'
  };

  export type GroupsUsersScalarFieldEnum = (typeof GroupsUsersScalarFieldEnum)[keyof typeof GroupsUsersScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    date_created: 'date_created',
    name: 'name',
    amount: 'amount',
    unit: 'unit',
    price: 'price',
    source: 'source',
    postedById: 'postedById'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    origin: 'origin',
    history: 'history',
    postedById: 'postedById'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const SharedIngredientScalarFieldEnum: {
    userId: 'userId',
    ingredientId: 'ingredientId'
  };

  export type SharedIngredientScalarFieldEnum = (typeof SharedIngredientScalarFieldEnum)[keyof typeof SharedIngredientScalarFieldEnum]


  export const SharedVersionScalarFieldEnum: {
    userId: 'userId',
    versionId: 'versionId'
  };

  export type SharedVersionScalarFieldEnum = (typeof SharedVersionScalarFieldEnum)[keyof typeof SharedVersionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SpecScalarFieldEnum: {
    id: 'id',
    ingredientId: 'ingredientId',
    order: 'order',
    amount: 'amount',
    unit: 'unit',
    versionId: 'versionId',
    postedById: 'postedById'
  };

  export type SpecScalarFieldEnum = (typeof SpecScalarFieldEnum)[keyof typeof SpecScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserDataScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userBio: 'userBio',
    workPlace: 'workPlace',
    profilePicture: 'profilePicture'
  };

  export type UserDataScalarFieldEnum = (typeof UserDataScalarFieldEnum)[keyof typeof UserDataScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    user_name: 'user_name',
    first_name: 'first_name',
    last_name: 'last_name',
    date_joined: 'date_joined',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const VersionScalarFieldEnum: {
    id: 'id',
    versionName: 'versionName',
    postedById: 'postedById',
    instructions: 'instructions',
    glassware: 'glassware',
    ice: 'ice',
    recipeId: 'recipeId'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type GroupsWhereInput = {
    AND?: Enumerable<GroupsWhereInput>
    OR?: Enumerable<GroupsWhereInput>
    NOT?: Enumerable<GroupsWhereInput>
    id?: IntFilter | number
    groupName?: StringFilter | string
    dateCreated?: DateTimeFilter | Date | string
    groupsIngredients?: GroupsIngredientsListRelationFilter
    GroupsMods?: GroupsModsListRelationFilter
    GroupVersion?: GroupVersionListRelationFilter
    GroupsUsers?: GroupsUsersListRelationFilter
  }

  export type GroupsOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    dateCreated?: SortOrder
    groupsIngredients?: GroupsIngredientsOrderByRelationAggregateInput
    GroupsMods?: GroupsModsOrderByRelationAggregateInput
    GroupVersion?: GroupVersionOrderByRelationAggregateInput
    GroupsUsers?: GroupsUsersOrderByRelationAggregateInput
  }

  export type GroupsWhereUniqueInput = {
    id?: number
  }

  export type GroupsOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    dateCreated?: SortOrder
    _count?: GroupsCountOrderByAggregateInput
    _avg?: GroupsAvgOrderByAggregateInput
    _max?: GroupsMaxOrderByAggregateInput
    _min?: GroupsMinOrderByAggregateInput
    _sum?: GroupsSumOrderByAggregateInput
  }

  export type GroupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    groupName?: StringWithAggregatesFilter | string
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupsIngredientsWhereInput = {
    AND?: Enumerable<GroupsIngredientsWhereInput>
    OR?: Enumerable<GroupsIngredientsWhereInput>
    NOT?: Enumerable<GroupsIngredientsWhereInput>
    groupId?: IntFilter | number
    ingredientId?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    ingredients?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }

  export type GroupsIngredientsOrderByWithRelationInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    ingredients?: IngredientOrderByWithRelationInput
  }

  export type GroupsIngredientsWhereUniqueInput = {
    groupId_ingredientId?: GroupsIngredientsGroupIdIngredientIdCompoundUniqueInput
  }

  export type GroupsIngredientsOrderByWithAggregationInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
    _count?: GroupsIngredientsCountOrderByAggregateInput
    _avg?: GroupsIngredientsAvgOrderByAggregateInput
    _max?: GroupsIngredientsMaxOrderByAggregateInput
    _min?: GroupsIngredientsMinOrderByAggregateInput
    _sum?: GroupsIngredientsSumOrderByAggregateInput
  }

  export type GroupsIngredientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsIngredientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsIngredientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsIngredientsScalarWhereWithAggregatesInput>
    groupId?: IntWithAggregatesFilter | number
    ingredientId?: IntWithAggregatesFilter | number
  }

  export type GroupsModsWhereInput = {
    AND?: Enumerable<GroupsModsWhereInput>
    OR?: Enumerable<GroupsModsWhereInput>
    NOT?: Enumerable<GroupsModsWhereInput>
    userId?: IntFilter | number
    groupId?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type GroupsModsOrderByWithRelationInput = {
    userId?: SortOrder
    groupId?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type GroupsModsWhereUniqueInput = {
    userId_groupId?: GroupsModsUserIdGroupIdCompoundUniqueInput
  }

  export type GroupsModsOrderByWithAggregationInput = {
    userId?: SortOrder
    groupId?: SortOrder
    _count?: GroupsModsCountOrderByAggregateInput
    _avg?: GroupsModsAvgOrderByAggregateInput
    _max?: GroupsModsMaxOrderByAggregateInput
    _min?: GroupsModsMinOrderByAggregateInput
    _sum?: GroupsModsSumOrderByAggregateInput
  }

  export type GroupsModsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsModsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsModsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsModsScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    groupId?: IntWithAggregatesFilter | number
  }

  export type GroupVersionWhereInput = {
    AND?: Enumerable<GroupVersionWhereInput>
    OR?: Enumerable<GroupVersionWhereInput>
    NOT?: Enumerable<GroupVersionWhereInput>
    groupId?: IntFilter | number
    versionId?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    version?: XOR<VersionRelationFilter, VersionWhereInput>
  }

  export type GroupVersionOrderByWithRelationInput = {
    groupId?: SortOrder
    versionId?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
  }

  export type GroupVersionWhereUniqueInput = {
    groupId_versionId?: GroupVersionGroupIdVersionIdCompoundUniqueInput
  }

  export type GroupVersionOrderByWithAggregationInput = {
    groupId?: SortOrder
    versionId?: SortOrder
    _count?: GroupVersionCountOrderByAggregateInput
    _avg?: GroupVersionAvgOrderByAggregateInput
    _max?: GroupVersionMaxOrderByAggregateInput
    _min?: GroupVersionMinOrderByAggregateInput
    _sum?: GroupVersionSumOrderByAggregateInput
  }

  export type GroupVersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupVersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupVersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupVersionScalarWhereWithAggregatesInput>
    groupId?: IntWithAggregatesFilter | number
    versionId?: IntWithAggregatesFilter | number
  }

  export type GroupsUsersWhereInput = {
    AND?: Enumerable<GroupsUsersWhereInput>
    OR?: Enumerable<GroupsUsersWhereInput>
    NOT?: Enumerable<GroupsUsersWhereInput>
    userId?: IntFilter | number
    groupId?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type GroupsUsersOrderByWithRelationInput = {
    userId?: SortOrder
    groupId?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type GroupsUsersWhereUniqueInput = {
    userId_groupId?: GroupsUsersUserIdGroupIdCompoundUniqueInput
  }

  export type GroupsUsersOrderByWithAggregationInput = {
    userId?: SortOrder
    groupId?: SortOrder
    _count?: GroupsUsersCountOrderByAggregateInput
    _avg?: GroupsUsersAvgOrderByAggregateInput
    _max?: GroupsUsersMaxOrderByAggregateInput
    _min?: GroupsUsersMinOrderByAggregateInput
    _sum?: GroupsUsersSumOrderByAggregateInput
  }

  export type GroupsUsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsUsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsUsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsUsersScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    groupId?: IntWithAggregatesFilter | number
  }

  export type IngredientWhereInput = {
    AND?: Enumerable<IngredientWhereInput>
    OR?: Enumerable<IngredientWhereInput>
    NOT?: Enumerable<IngredientWhereInput>
    id?: IntFilter | number
    date_created?: DateTimeFilter | Date | string
    name?: StringFilter | string
    amount?: IntNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableFilter | string | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    groupsIngredients?: GroupsIngredientsListRelationFilter
    spec?: SpecListRelationFilter
    sharedIngredient?: SharedIngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    groupsIngredients?: GroupsIngredientsOrderByRelationAggregateInput
    spec?: SpecOrderByRelationAggregateInput
    sharedIngredient?: SharedIngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = {
    id?: number
  }

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _avg?: IngredientAvgOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
    _sum?: IngredientSumOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    OR?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date_created?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    amount?: IntNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
    price?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableWithAggregatesFilter | string | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type SpecWhereInput = {
    AND?: Enumerable<SpecWhereInput>
    OR?: Enumerable<SpecWhereInput>
    NOT?: Enumerable<SpecWhereInput>
    id?: IntFilter | number
    ingredientId?: IntNullableFilter | number | null
    order?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput> | null
    version?: XOR<VersionRelationFilter, VersionWhereInput> | null
    versionId?: IntNullableFilter | number | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
  }

  export type SpecOrderByWithRelationInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    ingredient?: IngredientOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
    versionId?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
  }

  export type SpecWhereUniqueInput = {
    id?: number
  }

  export type SpecOrderByWithAggregationInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
    _count?: SpecCountOrderByAggregateInput
    _avg?: SpecAvgOrderByAggregateInput
    _max?: SpecMaxOrderByAggregateInput
    _min?: SpecMinOrderByAggregateInput
    _sum?: SpecSumOrderByAggregateInput
  }

  export type SpecScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ingredientId?: IntNullableWithAggregatesFilter | number | null
    order?: IntNullableWithAggregatesFilter | number | null
    amount?: FloatNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
    versionId?: IntNullableWithAggregatesFilter | number | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type RecipeWhereInput = {
    AND?: Enumerable<RecipeWhereInput>
    OR?: Enumerable<RecipeWhereInput>
    NOT?: Enumerable<RecipeWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    origin?: StringFilter | string
    history?: StringNullableFilter | string | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    version?: VersionListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    version?: VersionOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = {
    id?: number
  }

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    origin?: StringWithAggregatesFilter | string
    history?: StringNullableWithAggregatesFilter | string | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type VersionWhereInput = {
    AND?: Enumerable<VersionWhereInput>
    OR?: Enumerable<VersionWhereInput>
    NOT?: Enumerable<VersionWhereInput>
    id?: IntFilter | number
    versionName?: StringFilter | string
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
    groupVersion?: GroupVersionListRelationFilter
    sharedVersion?: SharedVersionListRelationFilter
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput> | null
    recipeId?: IntNullableFilter | number | null
    specs?: SpecListRelationFilter
    adminOnVersion?: AdminOnVersionListRelationFilter
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    groupVersion?: GroupVersionOrderByRelationAggregateInput
    sharedVersion?: SharedVersionOrderByRelationAggregateInput
    recipe?: RecipeOrderByWithRelationInput
    recipeId?: SortOrder
    specs?: SpecOrderByRelationAggregateInput
    adminOnVersion?: AdminOnVersionOrderByRelationAggregateInput
  }

  export type VersionWhereUniqueInput = {
    id?: number
  }

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
    _count?: VersionCountOrderByAggregateInput
    _avg?: VersionAvgOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
    _sum?: VersionSumOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<VersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VersionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    versionName?: StringWithAggregatesFilter | string
    postedById?: IntNullableWithAggregatesFilter | number | null
    instructions?: StringNullableWithAggregatesFilter | string | null
    glassware?: StringNullableWithAggregatesFilter | string | null
    ice?: StringNullableWithAggregatesFilter | string | null
    recipeId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserDataWhereInput = {
    AND?: Enumerable<UserDataWhereInput>
    OR?: Enumerable<UserDataWhereInput>
    NOT?: Enumerable<UserDataWhereInput>
    id?: IntFilter | number
    userId?: IntNullableFilter | number | null
    userBio?: StringNullableFilter | string | null
    workPlace?: StringNullableFilter | string | null
    profilePicture?: StringNullableFilter | string | null
    users?: XOR<UsersRelationFilter, UsersWhereInput> | null
  }

  export type UserDataOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    userBio?: SortOrder
    workPlace?: SortOrder
    profilePicture?: SortOrder
    users?: UsersOrderByWithRelationInput
  }

  export type UserDataWhereUniqueInput = {
    id?: number
  }

  export type UserDataOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    userBio?: SortOrder
    workPlace?: SortOrder
    profilePicture?: SortOrder
    _count?: UserDataCountOrderByAggregateInput
    _avg?: UserDataAvgOrderByAggregateInput
    _max?: UserDataMaxOrderByAggregateInput
    _min?: UserDataMinOrderByAggregateInput
    _sum?: UserDataSumOrderByAggregateInput
  }

  export type UserDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserDataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntNullableWithAggregatesFilter | number | null
    userBio?: StringNullableWithAggregatesFilter | string | null
    workPlace?: StringNullableWithAggregatesFilter | string | null
    profilePicture?: StringNullableWithAggregatesFilter | string | null
  }

  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    user_name?: StringFilter | string
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    date_joined?: DateTimeFilter | Date | string
    email?: StringFilter | string
    password?: StringFilter | string
    groupsMods?: GroupsModsListRelationFilter
    groupsUsers?: GroupsUsersListRelationFilter
    userData?: UserDataListRelationFilter
    sharedIngredient?: SharedIngredientListRelationFilter
    sharedVersion?: SharedVersionListRelationFilter
    recipes?: RecipeListRelationFilter
    version?: VersionListRelationFilter
    ingredients?: IngredientListRelationFilter
    spec?: SpecListRelationFilter
    adminOnVersion?: AdminOnVersionListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    groupsMods?: GroupsModsOrderByRelationAggregateInput
    groupsUsers?: GroupsUsersOrderByRelationAggregateInput
    userData?: UserDataOrderByRelationAggregateInput
    sharedIngredient?: SharedIngredientOrderByRelationAggregateInput
    sharedVersion?: SharedVersionOrderByRelationAggregateInput
    recipes?: RecipeOrderByRelationAggregateInput
    version?: VersionOrderByRelationAggregateInput
    ingredients?: IngredientOrderByRelationAggregateInput
    spec?: SpecOrderByRelationAggregateInput
    adminOnVersion?: AdminOnVersionOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_name?: StringWithAggregatesFilter | string
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    date_joined?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type SharedIngredientWhereInput = {
    AND?: Enumerable<SharedIngredientWhereInput>
    OR?: Enumerable<SharedIngredientWhereInput>
    NOT?: Enumerable<SharedIngredientWhereInput>
    userId?: IntFilter | number
    ingredientId?: IntFilter | number
    ingredients?: XOR<IngredientRelationFilter, IngredientWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type SharedIngredientOrderByWithRelationInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
    ingredients?: IngredientOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type SharedIngredientWhereUniqueInput = {
    userId_ingredientId?: SharedIngredientUserIdIngredientIdCompoundUniqueInput
  }

  export type SharedIngredientOrderByWithAggregationInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
    _count?: SharedIngredientCountOrderByAggregateInput
    _avg?: SharedIngredientAvgOrderByAggregateInput
    _max?: SharedIngredientMaxOrderByAggregateInput
    _min?: SharedIngredientMinOrderByAggregateInput
    _sum?: SharedIngredientSumOrderByAggregateInput
  }

  export type SharedIngredientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SharedIngredientScalarWhereWithAggregatesInput>
    OR?: Enumerable<SharedIngredientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SharedIngredientScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    ingredientId?: IntWithAggregatesFilter | number
  }

  export type SharedVersionWhereInput = {
    AND?: Enumerable<SharedVersionWhereInput>
    OR?: Enumerable<SharedVersionWhereInput>
    NOT?: Enumerable<SharedVersionWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type SharedVersionOrderByWithRelationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    version?: VersionOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type SharedVersionWhereUniqueInput = {
    userId_versionId?: SharedVersionUserIdVersionIdCompoundUniqueInput
  }

  export type SharedVersionOrderByWithAggregationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    _count?: SharedVersionCountOrderByAggregateInput
    _avg?: SharedVersionAvgOrderByAggregateInput
    _max?: SharedVersionMaxOrderByAggregateInput
    _min?: SharedVersionMinOrderByAggregateInput
    _sum?: SharedVersionSumOrderByAggregateInput
  }

  export type SharedVersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SharedVersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SharedVersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SharedVersionScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    versionId?: IntWithAggregatesFilter | number
  }

  export type AdminOnVersionWhereInput = {
    AND?: Enumerable<AdminOnVersionWhereInput>
    OR?: Enumerable<AdminOnVersionWhereInput>
    NOT?: Enumerable<AdminOnVersionWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
    assignedById?: IntFilter | number
    assignedAt?: DateTimeFilter | Date | string
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type AdminOnVersionOrderByWithRelationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    version?: VersionOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type AdminOnVersionWhereUniqueInput = {
    userId_versionId?: AdminOnVersionUserIdVersionIdCompoundUniqueInput
  }

  export type AdminOnVersionOrderByWithAggregationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    _count?: AdminOnVersionCountOrderByAggregateInput
    _avg?: AdminOnVersionAvgOrderByAggregateInput
    _max?: AdminOnVersionMaxOrderByAggregateInput
    _min?: AdminOnVersionMinOrderByAggregateInput
    _sum?: AdminOnVersionSumOrderByAggregateInput
  }

  export type AdminOnVersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminOnVersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminOnVersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminOnVersionScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    versionId?: IntWithAggregatesFilter | number
    assignedById?: IntWithAggregatesFilter | number
    assignedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupsCreateInput = {
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsUncheckedCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionUncheckedCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsCreateManyInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
  }

  export type GroupsUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsIngredientsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroupsIngredientsInput
    ingredients: IngredientCreateNestedOneWithoutGroupsIngredientsInput
  }

  export type GroupsIngredientsUncheckedCreateInput = {
    groupId: number
    ingredientId: number
  }

  export type GroupsIngredientsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsIngredientsNestedInput
    ingredients?: IngredientUpdateOneRequiredWithoutGroupsIngredientsNestedInput
  }

  export type GroupsIngredientsUncheckedUpdateInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsIngredientsCreateManyInput = {
    groupId: number
    ingredientId: number
  }

  export type GroupsIngredientsUpdateManyMutationInput = {

  }

  export type GroupsIngredientsUncheckedUpdateManyInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsModsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroupsModsInput
    users: UsersCreateNestedOneWithoutGroupsModsInput
  }

  export type GroupsModsUncheckedCreateInput = {
    userId: number
    groupId: number
  }

  export type GroupsModsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsModsNestedInput
    users?: UsersUpdateOneRequiredWithoutGroupsModsNestedInput
  }

  export type GroupsModsUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsModsCreateManyInput = {
    userId: number
    groupId: number
  }

  export type GroupsModsUpdateManyMutationInput = {

  }

  export type GroupsModsUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupVersionCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroupVersionInput
    version: VersionCreateNestedOneWithoutGroupVersionInput
  }

  export type GroupVersionUncheckedCreateInput = {
    groupId: number
    versionId: number
  }

  export type GroupVersionUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupVersionNestedInput
    version?: VersionUpdateOneRequiredWithoutGroupVersionNestedInput
  }

  export type GroupVersionUncheckedUpdateInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupVersionCreateManyInput = {
    groupId: number
    versionId: number
  }

  export type GroupVersionUpdateManyMutationInput = {

  }

  export type GroupVersionUncheckedUpdateManyInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsUsersCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroupsUsersInput
    users: UsersCreateNestedOneWithoutGroupsUsersInput
  }

  export type GroupsUsersUncheckedCreateInput = {
    userId: number
    groupId: number
  }

  export type GroupsUsersUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsUsersNestedInput
    users?: UsersUpdateOneRequiredWithoutGroupsUsersNestedInput
  }

  export type GroupsUsersUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsUsersCreateManyInput = {
    userId: number
    groupId: number
  }

  export type GroupsUsersUpdateManyMutationInput = {

  }

  export type GroupsUsersUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type IngredientCreateInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUpdateInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
  }

  export type IngredientUpdateManyMutationInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecCreateInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    version?: VersionCreateNestedOneWithoutSpecsInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecUpdateInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    version?: VersionUpdateOneWithoutSpecsNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecCreateManyInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecUpdateManyMutationInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpecUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RecipeCreateInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedBy?: UsersCreateNestedOneWithoutRecipesInput
    version?: VersionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
    version?: VersionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutRecipesNestedInput
    version?: VersionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    version?: VersionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
  }

  export type RecipeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VersionCreateInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionUpdateInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionCreateManyInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipeId?: number | null
  }

  export type VersionUpdateManyMutationInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserDataCreateInput = {
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
    users?: UsersCreateNestedOneWithoutUserDataInput
  }

  export type UserDataUncheckedCreateInput = {
    id?: number
    userId?: number | null
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
  }

  export type UserDataUpdateInput = {
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUpdateOneWithoutUserDataNestedInput
  }

  export type UserDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDataCreateManyInput = {
    id?: number
    userId?: number | null
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
  }

  export type UserDataUpdateManyMutationInput = {
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
  }

  export type UsersUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SharedIngredientCreateInput = {
    ingredients: IngredientCreateNestedOneWithoutSharedIngredientInput
    users: UsersCreateNestedOneWithoutSharedIngredientInput
  }

  export type SharedIngredientUncheckedCreateInput = {
    userId: number
    ingredientId: number
  }

  export type SharedIngredientUpdateInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutSharedIngredientNestedInput
    users?: UsersUpdateOneRequiredWithoutSharedIngredientNestedInput
  }

  export type SharedIngredientUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedIngredientCreateManyInput = {
    userId: number
    ingredientId: number
  }

  export type SharedIngredientUpdateManyMutationInput = {

  }

  export type SharedIngredientUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedVersionCreateInput = {
    version: VersionCreateNestedOneWithoutSharedVersionInput
    users: UsersCreateNestedOneWithoutSharedVersionInput
  }

  export type SharedVersionUncheckedCreateInput = {
    userId: number
    versionId: number
  }

  export type SharedVersionUpdateInput = {
    version?: VersionUpdateOneRequiredWithoutSharedVersionNestedInput
    users?: UsersUpdateOneRequiredWithoutSharedVersionNestedInput
  }

  export type SharedVersionUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedVersionCreateManyInput = {
    userId: number
    versionId: number
  }

  export type SharedVersionUpdateManyMutationInput = {

  }

  export type SharedVersionUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type AdminOnVersionCreateInput = {
    assignedById: number
    assignedAt?: Date | string
    version: VersionCreateNestedOneWithoutAdminOnVersionInput
    users: UsersCreateNestedOneWithoutAdminOnVersionInput
  }

  export type AdminOnVersionUncheckedCreateInput = {
    userId: number
    versionId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type AdminOnVersionUpdateInput = {
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneRequiredWithoutAdminOnVersionNestedInput
    users?: UsersUpdateOneRequiredWithoutAdminOnVersionNestedInput
  }

  export type AdminOnVersionUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOnVersionCreateManyInput = {
    userId: number
    versionId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type AdminOnVersionUpdateManyMutationInput = {
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOnVersionUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GroupsIngredientsListRelationFilter = {
    every?: GroupsIngredientsWhereInput
    some?: GroupsIngredientsWhereInput
    none?: GroupsIngredientsWhereInput
  }

  export type GroupsModsListRelationFilter = {
    every?: GroupsModsWhereInput
    some?: GroupsModsWhereInput
    none?: GroupsModsWhereInput
  }

  export type GroupVersionListRelationFilter = {
    every?: GroupVersionWhereInput
    some?: GroupVersionWhereInput
    none?: GroupVersionWhereInput
  }

  export type GroupsUsersListRelationFilter = {
    every?: GroupsUsersWhereInput
    some?: GroupsUsersWhereInput
    none?: GroupsUsersWhereInput
  }

  export type GroupsIngredientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupsModsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupsUsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupsCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    dateCreated?: SortOrder
  }

  export type GroupsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    dateCreated?: SortOrder
  }

  export type GroupsMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    dateCreated?: SortOrder
  }

  export type GroupsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupsRelationFilter = {
    is?: GroupsWhereInput
    isNot?: GroupsWhereInput
  }

  export type IngredientRelationFilter = {
    is?: IngredientWhereInput | null
    isNot?: IngredientWhereInput | null
  }

  export type GroupsIngredientsGroupIdIngredientIdCompoundUniqueInput = {
    groupId: number
    ingredientId: number
  }

  export type GroupsIngredientsCountOrderByAggregateInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
  }

  export type GroupsIngredientsAvgOrderByAggregateInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
  }

  export type GroupsIngredientsMaxOrderByAggregateInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
  }

  export type GroupsIngredientsMinOrderByAggregateInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
  }

  export type GroupsIngredientsSumOrderByAggregateInput = {
    groupId?: SortOrder
    ingredientId?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type GroupsModsUserIdGroupIdCompoundUniqueInput = {
    userId: number
    groupId: number
  }

  export type GroupsModsCountOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsModsAvgOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsModsMaxOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsModsMinOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsModsSumOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type VersionRelationFilter = {
    is?: VersionWhereInput
    isNot?: VersionWhereInput
  }

  export type GroupVersionGroupIdVersionIdCompoundUniqueInput = {
    groupId: number
    versionId: number
  }

  export type GroupVersionCountOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type GroupVersionAvgOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type GroupVersionMaxOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type GroupVersionMinOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type GroupVersionSumOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type GroupsUsersUserIdGroupIdCompoundUniqueInput = {
    userId: number
    groupId: number
  }

  export type GroupsUsersCountOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsUsersAvgOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsUsersMaxOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsUsersMinOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupsUsersSumOrderByAggregateInput = {
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type SpecListRelationFilter = {
    every?: SpecWhereInput
    some?: SpecWhereInput
    none?: SpecWhereInput
  }

  export type SharedIngredientListRelationFilter = {
    every?: SharedIngredientWhereInput
    some?: SharedIngredientWhereInput
    none?: SharedIngredientWhereInput
  }

  export type SpecOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SharedIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    postedById?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type SpecCountOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecAvgOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecMaxOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecMinOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecSumOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type SharedVersionListRelationFilter = {
    every?: SharedVersionWhereInput
    some?: SharedVersionWhereInput
    none?: SharedVersionWhereInput
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput | null
    isNot?: RecipeWhereInput | null
  }

  export type AdminOnVersionListRelationFilter = {
    every?: AdminOnVersionWhereInput
    some?: AdminOnVersionWhereInput
    none?: AdminOnVersionWhereInput
  }

  export type SharedVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminOnVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionAvgOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionSumOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
    recipeId?: SortOrder
  }

  export type UserDataCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userBio?: SortOrder
    workPlace?: SortOrder
    profilePicture?: SortOrder
  }

  export type UserDataAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserDataMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userBio?: SortOrder
    workPlace?: SortOrder
    profilePicture?: SortOrder
  }

  export type UserDataMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userBio?: SortOrder
    workPlace?: SortOrder
    profilePicture?: SortOrder
  }

  export type UserDataSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserDataListRelationFilter = {
    every?: UserDataWhereInput
    some?: UserDataWhereInput
    none?: UserDataWhereInput
  }

  export type RecipeListRelationFilter = {
    every?: RecipeWhereInput
    some?: RecipeWhereInput
    none?: RecipeWhereInput
  }

  export type IngredientListRelationFilter = {
    every?: IngredientWhereInput
    some?: IngredientWhereInput
    none?: IngredientWhereInput
  }

  export type UserDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SharedIngredientUserIdIngredientIdCompoundUniqueInput = {
    userId: number
    ingredientId: number
  }

  export type SharedIngredientCountOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type SharedIngredientAvgOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type SharedIngredientMaxOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type SharedIngredientMinOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type SharedIngredientSumOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type SharedVersionUserIdVersionIdCompoundUniqueInput = {
    userId: number
    versionId: number
  }

  export type SharedVersionCountOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type SharedVersionAvgOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type SharedVersionMaxOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type SharedVersionMinOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type SharedVersionSumOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type AdminOnVersionUserIdVersionIdCompoundUniqueInput = {
    userId: number
    versionId: number
  }

  export type AdminOnVersionCountOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
  }

  export type AdminOnVersionAvgOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
  }

  export type AdminOnVersionMaxOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
  }

  export type AdminOnVersionMinOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
  }

  export type AdminOnVersionSumOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
    assignedById?: SortOrder
  }

  export type GroupsIngredientsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutGroupsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsIngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
  }

  export type GroupsModsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutGroupsInput>, Enumerable<GroupsModsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsModsCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsModsWhereUniqueInput>
  }

  export type GroupVersionCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutGroupsInput>, Enumerable<GroupVersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutGroupsInput>
    createMany?: GroupVersionCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupVersionWhereUniqueInput>
  }

  export type GroupsUsersCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutGroupsInput>, Enumerable<GroupsUsersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsUsersCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
  }

  export type GroupsIngredientsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutGroupsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsIngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
  }

  export type GroupsModsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutGroupsInput>, Enumerable<GroupsModsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsModsCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsModsWhereUniqueInput>
  }

  export type GroupVersionUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutGroupsInput>, Enumerable<GroupVersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutGroupsInput>
    createMany?: GroupVersionCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupVersionWhereUniqueInput>
  }

  export type GroupsUsersUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutGroupsInput>, Enumerable<GroupsUsersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutGroupsInput>
    createMany?: GroupsUsersCreateManyGroupsInputEnvelope
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GroupsIngredientsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutGroupsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsIngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsIngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsIngredientsWhereUniqueInput>
    disconnect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    delete?: Enumerable<GroupsIngredientsWhereUniqueInput>
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    update?: Enumerable<GroupsIngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsIngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsIngredientsScalarWhereInput>
  }

  export type GroupsModsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutGroupsInput>, Enumerable<GroupsModsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsModsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsModsCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsModsWhereUniqueInput>
    disconnect?: Enumerable<GroupsModsWhereUniqueInput>
    delete?: Enumerable<GroupsModsWhereUniqueInput>
    connect?: Enumerable<GroupsModsWhereUniqueInput>
    update?: Enumerable<GroupsModsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsModsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsModsScalarWhereInput>
  }

  export type GroupVersionUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutGroupsInput>, Enumerable<GroupVersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupVersionUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupVersionCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupVersionWhereUniqueInput>
    disconnect?: Enumerable<GroupVersionWhereUniqueInput>
    delete?: Enumerable<GroupVersionWhereUniqueInput>
    connect?: Enumerable<GroupVersionWhereUniqueInput>
    update?: Enumerable<GroupVersionUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupVersionUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupVersionScalarWhereInput>
  }

  export type GroupsUsersUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutGroupsInput>, Enumerable<GroupsUsersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsUsersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsUsersCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsUsersWhereUniqueInput>
    disconnect?: Enumerable<GroupsUsersWhereUniqueInput>
    delete?: Enumerable<GroupsUsersWhereUniqueInput>
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
    update?: Enumerable<GroupsUsersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsUsersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsUsersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupsIngredientsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutGroupsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsIngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsIngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsIngredientsWhereUniqueInput>
    disconnect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    delete?: Enumerable<GroupsIngredientsWhereUniqueInput>
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    update?: Enumerable<GroupsIngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsIngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsIngredientsScalarWhereInput>
  }

  export type GroupsModsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutGroupsInput>, Enumerable<GroupsModsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsModsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsModsCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsModsWhereUniqueInput>
    disconnect?: Enumerable<GroupsModsWhereUniqueInput>
    delete?: Enumerable<GroupsModsWhereUniqueInput>
    connect?: Enumerable<GroupsModsWhereUniqueInput>
    update?: Enumerable<GroupsModsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsModsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsModsScalarWhereInput>
  }

  export type GroupVersionUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutGroupsInput>, Enumerable<GroupVersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupVersionUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupVersionCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupVersionWhereUniqueInput>
    disconnect?: Enumerable<GroupVersionWhereUniqueInput>
    delete?: Enumerable<GroupVersionWhereUniqueInput>
    connect?: Enumerable<GroupVersionWhereUniqueInput>
    update?: Enumerable<GroupVersionUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupVersionUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupVersionScalarWhereInput>
  }

  export type GroupsUsersUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutGroupsInput>, Enumerable<GroupsUsersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<GroupsUsersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: GroupsUsersCreateManyGroupsInputEnvelope
    set?: Enumerable<GroupsUsersWhereUniqueInput>
    disconnect?: Enumerable<GroupsUsersWhereUniqueInput>
    delete?: Enumerable<GroupsUsersWhereUniqueInput>
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
    update?: Enumerable<GroupsUsersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<GroupsUsersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<GroupsUsersScalarWhereInput>
  }

  export type GroupsCreateNestedOneWithoutGroupsIngredientsInput = {
    create?: XOR<GroupsCreateWithoutGroupsIngredientsInput, GroupsUncheckedCreateWithoutGroupsIngredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsIngredientsInput
    connect?: GroupsWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutGroupsIngredientsInput = {
    create?: XOR<IngredientCreateWithoutGroupsIngredientsInput, IngredientUncheckedCreateWithoutGroupsIngredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutGroupsIngredientsInput
    connect?: IngredientWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroupsIngredientsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroupsIngredientsInput, GroupsUncheckedCreateWithoutGroupsIngredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsIngredientsInput
    upsert?: GroupsUpsertWithoutGroupsIngredientsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroupsIngredientsInput, GroupsUncheckedUpdateWithoutGroupsIngredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutGroupsIngredientsNestedInput = {
    create?: XOR<IngredientCreateWithoutGroupsIngredientsInput, IngredientUncheckedCreateWithoutGroupsIngredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutGroupsIngredientsInput
    upsert?: IngredientUpsertWithoutGroupsIngredientsInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutGroupsIngredientsInput, IngredientUncheckedUpdateWithoutGroupsIngredientsInput>
  }

  export type GroupsCreateNestedOneWithoutGroupsModsInput = {
    create?: XOR<GroupsCreateWithoutGroupsModsInput, GroupsUncheckedCreateWithoutGroupsModsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsModsInput
    connect?: GroupsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutGroupsModsInput = {
    create?: XOR<UsersCreateWithoutGroupsModsInput, UsersUncheckedCreateWithoutGroupsModsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroupsModsInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroupsModsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroupsModsInput, GroupsUncheckedCreateWithoutGroupsModsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsModsInput
    upsert?: GroupsUpsertWithoutGroupsModsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroupsModsInput, GroupsUncheckedUpdateWithoutGroupsModsInput>
  }

  export type UsersUpdateOneRequiredWithoutGroupsModsNestedInput = {
    create?: XOR<UsersCreateWithoutGroupsModsInput, UsersUncheckedCreateWithoutGroupsModsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroupsModsInput
    upsert?: UsersUpsertWithoutGroupsModsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutGroupsModsInput, UsersUncheckedUpdateWithoutGroupsModsInput>
  }

  export type GroupsCreateNestedOneWithoutGroupVersionInput = {
    create?: XOR<GroupsCreateWithoutGroupVersionInput, GroupsUncheckedCreateWithoutGroupVersionInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupVersionInput
    connect?: GroupsWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutGroupVersionInput = {
    create?: XOR<VersionCreateWithoutGroupVersionInput, VersionUncheckedCreateWithoutGroupVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutGroupVersionInput
    connect?: VersionWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroupVersionNestedInput = {
    create?: XOR<GroupsCreateWithoutGroupVersionInput, GroupsUncheckedCreateWithoutGroupVersionInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupVersionInput
    upsert?: GroupsUpsertWithoutGroupVersionInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroupVersionInput, GroupsUncheckedUpdateWithoutGroupVersionInput>
  }

  export type VersionUpdateOneRequiredWithoutGroupVersionNestedInput = {
    create?: XOR<VersionCreateWithoutGroupVersionInput, VersionUncheckedCreateWithoutGroupVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutGroupVersionInput
    upsert?: VersionUpsertWithoutGroupVersionInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutGroupVersionInput, VersionUncheckedUpdateWithoutGroupVersionInput>
  }

  export type GroupsCreateNestedOneWithoutGroupsUsersInput = {
    create?: XOR<GroupsCreateWithoutGroupsUsersInput, GroupsUncheckedCreateWithoutGroupsUsersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsUsersInput
    connect?: GroupsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutGroupsUsersInput = {
    create?: XOR<UsersCreateWithoutGroupsUsersInput, UsersUncheckedCreateWithoutGroupsUsersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroupsUsersInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroupsUsersNestedInput = {
    create?: XOR<GroupsCreateWithoutGroupsUsersInput, GroupsUncheckedCreateWithoutGroupsUsersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroupsUsersInput
    upsert?: GroupsUpsertWithoutGroupsUsersInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroupsUsersInput, GroupsUncheckedUpdateWithoutGroupsUsersInput>
  }

  export type UsersUpdateOneRequiredWithoutGroupsUsersNestedInput = {
    create?: XOR<UsersCreateWithoutGroupsUsersInput, UsersUncheckedCreateWithoutGroupsUsersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroupsUsersInput
    upsert?: UsersUpsertWithoutGroupsUsersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutGroupsUsersInput, UsersUncheckedUpdateWithoutGroupsUsersInput>
  }

  export type UsersCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutIngredientsInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupsIngredientsCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutIngredientsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: GroupsIngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
  }

  export type SpecCreateNestedManyWithoutIngredientInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type SharedIngredientCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutIngredientsInput>, Enumerable<SharedIngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutIngredientsInput>
    createMany?: SharedIngredientCreateManyIngredientsInputEnvelope
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
  }

  export type GroupsIngredientsUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutIngredientsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: GroupsIngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type SharedIngredientUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutIngredientsInput>, Enumerable<SharedIngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutIngredientsInput>
    createMany?: SharedIngredientCreateManyIngredientsInputEnvelope
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UsersUpdateOneWithoutIngredientsNestedInput = {
    create?: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutIngredientsInput
    upsert?: UsersUpsertWithoutIngredientsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutIngredientsInput, UsersUncheckedUpdateWithoutIngredientsInput>
  }

  export type GroupsIngredientsUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutIngredientsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<GroupsIngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: GroupsIngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<GroupsIngredientsWhereUniqueInput>
    disconnect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    delete?: Enumerable<GroupsIngredientsWhereUniqueInput>
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    update?: Enumerable<GroupsIngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<GroupsIngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<GroupsIngredientsScalarWhereInput>
  }

  export type SpecUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutIngredientInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutIngredientInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type SharedIngredientUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutIngredientsInput>, Enumerable<SharedIngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<SharedIngredientUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: SharedIngredientCreateManyIngredientsInputEnvelope
    set?: Enumerable<SharedIngredientWhereUniqueInput>
    disconnect?: Enumerable<SharedIngredientWhereUniqueInput>
    delete?: Enumerable<SharedIngredientWhereUniqueInput>
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
    update?: Enumerable<SharedIngredientUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<SharedIngredientUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<SharedIngredientScalarWhereInput>
  }

  export type GroupsIngredientsUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<GroupsIngredientsCreateWithoutIngredientsInput>, Enumerable<GroupsIngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<GroupsIngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<GroupsIngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: GroupsIngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<GroupsIngredientsWhereUniqueInput>
    disconnect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    delete?: Enumerable<GroupsIngredientsWhereUniqueInput>
    connect?: Enumerable<GroupsIngredientsWhereUniqueInput>
    update?: Enumerable<GroupsIngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<GroupsIngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<GroupsIngredientsScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutIngredientInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutIngredientInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type SharedIngredientUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutIngredientsInput>, Enumerable<SharedIngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<SharedIngredientUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: SharedIngredientCreateManyIngredientsInputEnvelope
    set?: Enumerable<SharedIngredientWhereUniqueInput>
    disconnect?: Enumerable<SharedIngredientWhereUniqueInput>
    delete?: Enumerable<SharedIngredientWhereUniqueInput>
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
    update?: Enumerable<SharedIngredientUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<SharedIngredientUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<SharedIngredientScalarWhereInput>
  }

  export type IngredientCreateNestedOneWithoutSpecInput = {
    create?: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSpecInput
    connect?: IngredientWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutSpecsInput = {
    create?: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSpecsInput
    connect?: VersionWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSpecInput = {
    create?: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSpecInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IngredientUpdateOneWithoutSpecNestedInput = {
    create?: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSpecInput
    upsert?: IngredientUpsertWithoutSpecInput
    disconnect?: boolean
    delete?: boolean
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutSpecInput, IngredientUncheckedUpdateWithoutSpecInput>
  }

  export type VersionUpdateOneWithoutSpecsNestedInput = {
    create?: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSpecsInput
    upsert?: VersionUpsertWithoutSpecsInput
    disconnect?: boolean
    delete?: boolean
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutSpecsInput, VersionUncheckedUpdateWithoutSpecsInput>
  }

  export type UsersUpdateOneWithoutSpecNestedInput = {
    create?: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSpecInput
    upsert?: UsersUpsertWithoutSpecInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutSpecInput, UsersUncheckedUpdateWithoutSpecInput>
  }

  export type UsersCreateNestedOneWithoutRecipesInput = {
    create?: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecipesInput
    connect?: UsersWhereUniqueInput
  }

  export type VersionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type UsersUpdateOneWithoutRecipesNestedInput = {
    create?: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecipesInput
    upsert?: UsersUpsertWithoutRecipesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutRecipesInput, UsersUncheckedUpdateWithoutRecipesInput>
  }

  export type VersionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutRecipeInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutRecipeInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutRecipeInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutRecipeInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutVersionInput = {
    create?: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVersionInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupVersionCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutVersionInput>, Enumerable<GroupVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutVersionInput>
    createMany?: GroupVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<GroupVersionWhereUniqueInput>
  }

  export type SharedVersionCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutVersionInput>, Enumerable<SharedVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutVersionInput>
    createMany?: SharedVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<SharedVersionWhereUniqueInput>
  }

  export type RecipeCreateNestedOneWithoutVersionInput = {
    create?: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutVersionInput
    connect?: RecipeWhereUniqueInput
  }

  export type SpecCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type AdminOnVersionCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutVersionInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutVersionInput>
    createMany?: AdminOnVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
  }

  export type GroupVersionUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutVersionInput>, Enumerable<GroupVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutVersionInput>
    createMany?: GroupVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<GroupVersionWhereUniqueInput>
  }

  export type SharedVersionUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutVersionInput>, Enumerable<SharedVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutVersionInput>
    createMany?: SharedVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<SharedVersionWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutVersionInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutVersionInput>
    createMany?: AdminOnVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
  }

  export type UsersUpdateOneWithoutVersionNestedInput = {
    create?: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVersionInput
    upsert?: UsersUpsertWithoutVersionInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutVersionInput, UsersUncheckedUpdateWithoutVersionInput>
  }

  export type GroupVersionUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutVersionInput>, Enumerable<GroupVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<GroupVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: GroupVersionCreateManyVersionInputEnvelope
    set?: Enumerable<GroupVersionWhereUniqueInput>
    disconnect?: Enumerable<GroupVersionWhereUniqueInput>
    delete?: Enumerable<GroupVersionWhereUniqueInput>
    connect?: Enumerable<GroupVersionWhereUniqueInput>
    update?: Enumerable<GroupVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<GroupVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<GroupVersionScalarWhereInput>
  }

  export type SharedVersionUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutVersionInput>, Enumerable<SharedVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SharedVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SharedVersionCreateManyVersionInputEnvelope
    set?: Enumerable<SharedVersionWhereUniqueInput>
    disconnect?: Enumerable<SharedVersionWhereUniqueInput>
    delete?: Enumerable<SharedVersionWhereUniqueInput>
    connect?: Enumerable<SharedVersionWhereUniqueInput>
    update?: Enumerable<SharedVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SharedVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SharedVersionScalarWhereInput>
  }

  export type RecipeUpdateOneWithoutVersionNestedInput = {
    create?: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutVersionInput
    upsert?: RecipeUpsertWithoutVersionInput
    disconnect?: boolean
    delete?: boolean
    connect?: RecipeWhereUniqueInput
    update?: XOR<RecipeUpdateWithoutVersionInput, RecipeUncheckedUpdateWithoutVersionInput>
  }

  export type SpecUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type AdminOnVersionUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutVersionInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<AdminOnVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: AdminOnVersionCreateManyVersionInputEnvelope
    set?: Enumerable<AdminOnVersionWhereUniqueInput>
    disconnect?: Enumerable<AdminOnVersionWhereUniqueInput>
    delete?: Enumerable<AdminOnVersionWhereUniqueInput>
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
    update?: Enumerable<AdminOnVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<AdminOnVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<AdminOnVersionScalarWhereInput>
  }

  export type GroupVersionUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<GroupVersionCreateWithoutVersionInput>, Enumerable<GroupVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<GroupVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<GroupVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: GroupVersionCreateManyVersionInputEnvelope
    set?: Enumerable<GroupVersionWhereUniqueInput>
    disconnect?: Enumerable<GroupVersionWhereUniqueInput>
    delete?: Enumerable<GroupVersionWhereUniqueInput>
    connect?: Enumerable<GroupVersionWhereUniqueInput>
    update?: Enumerable<GroupVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<GroupVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<GroupVersionScalarWhereInput>
  }

  export type SharedVersionUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutVersionInput>, Enumerable<SharedVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SharedVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SharedVersionCreateManyVersionInputEnvelope
    set?: Enumerable<SharedVersionWhereUniqueInput>
    disconnect?: Enumerable<SharedVersionWhereUniqueInput>
    delete?: Enumerable<SharedVersionWhereUniqueInput>
    connect?: Enumerable<SharedVersionWhereUniqueInput>
    update?: Enumerable<SharedVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SharedVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SharedVersionScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutVersionInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<AdminOnVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: AdminOnVersionCreateManyVersionInputEnvelope
    set?: Enumerable<AdminOnVersionWhereUniqueInput>
    disconnect?: Enumerable<AdminOnVersionWhereUniqueInput>
    delete?: Enumerable<AdminOnVersionWhereUniqueInput>
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
    update?: Enumerable<AdminOnVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<AdminOnVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<AdminOnVersionScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutUserDataInput = {
    create?: XOR<UsersCreateWithoutUserDataInput, UsersUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserDataInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneWithoutUserDataNestedInput = {
    create?: XOR<UsersCreateWithoutUserDataInput, UsersUncheckedCreateWithoutUserDataInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUserDataInput
    upsert?: UsersUpsertWithoutUserDataInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutUserDataInput, UsersUncheckedUpdateWithoutUserDataInput>
  }

  export type GroupsModsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutUsersInput>, Enumerable<GroupsModsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutUsersInput>
    createMany?: GroupsModsCreateManyUsersInputEnvelope
    connect?: Enumerable<GroupsModsWhereUniqueInput>
  }

  export type GroupsUsersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutUsersInput>, Enumerable<GroupsUsersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutUsersInput>
    createMany?: GroupsUsersCreateManyUsersInputEnvelope
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
  }

  export type UserDataCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserDataCreateWithoutUsersInput>, Enumerable<UserDataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserDataCreateOrConnectWithoutUsersInput>
    createMany?: UserDataCreateManyUsersInputEnvelope
    connect?: Enumerable<UserDataWhereUniqueInput>
  }

  export type SharedIngredientCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutUsersInput>, Enumerable<SharedIngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutUsersInput>
    createMany?: SharedIngredientCreateManyUsersInputEnvelope
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
  }

  export type SharedVersionCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutUsersInput>, Enumerable<SharedVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutUsersInput>
    createMany?: SharedVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<SharedVersionWhereUniqueInput>
  }

  export type RecipeCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    connect?: Enumerable<RecipeWhereUniqueInput>
  }

  export type VersionCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type IngredientCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    connect?: Enumerable<IngredientWhereUniqueInput>
  }

  export type SpecCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type AdminOnVersionCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutUsersInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutUsersInput>
    createMany?: AdminOnVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
  }

  export type GroupsModsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutUsersInput>, Enumerable<GroupsModsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutUsersInput>
    createMany?: GroupsModsCreateManyUsersInputEnvelope
    connect?: Enumerable<GroupsModsWhereUniqueInput>
  }

  export type GroupsUsersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutUsersInput>, Enumerable<GroupsUsersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutUsersInput>
    createMany?: GroupsUsersCreateManyUsersInputEnvelope
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
  }

  export type UserDataUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserDataCreateWithoutUsersInput>, Enumerable<UserDataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserDataCreateOrConnectWithoutUsersInput>
    createMany?: UserDataCreateManyUsersInputEnvelope
    connect?: Enumerable<UserDataWhereUniqueInput>
  }

  export type SharedIngredientUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutUsersInput>, Enumerable<SharedIngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutUsersInput>
    createMany?: SharedIngredientCreateManyUsersInputEnvelope
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
  }

  export type SharedVersionUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutUsersInput>, Enumerable<SharedVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutUsersInput>
    createMany?: SharedVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<SharedVersionWhereUniqueInput>
  }

  export type RecipeUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    connect?: Enumerable<RecipeWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type IngredientUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    connect?: Enumerable<IngredientWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutUsersInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutUsersInput>
    createMany?: AdminOnVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
  }

  export type GroupsModsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutUsersInput>, Enumerable<GroupsModsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<GroupsModsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: GroupsModsCreateManyUsersInputEnvelope
    set?: Enumerable<GroupsModsWhereUniqueInput>
    disconnect?: Enumerable<GroupsModsWhereUniqueInput>
    delete?: Enumerable<GroupsModsWhereUniqueInput>
    connect?: Enumerable<GroupsModsWhereUniqueInput>
    update?: Enumerable<GroupsModsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<GroupsModsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<GroupsModsScalarWhereInput>
  }

  export type GroupsUsersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutUsersInput>, Enumerable<GroupsUsersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<GroupsUsersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: GroupsUsersCreateManyUsersInputEnvelope
    set?: Enumerable<GroupsUsersWhereUniqueInput>
    disconnect?: Enumerable<GroupsUsersWhereUniqueInput>
    delete?: Enumerable<GroupsUsersWhereUniqueInput>
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
    update?: Enumerable<GroupsUsersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<GroupsUsersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<GroupsUsersScalarWhereInput>
  }

  export type UserDataUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserDataCreateWithoutUsersInput>, Enumerable<UserDataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserDataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserDataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserDataCreateManyUsersInputEnvelope
    set?: Enumerable<UserDataWhereUniqueInput>
    disconnect?: Enumerable<UserDataWhereUniqueInput>
    delete?: Enumerable<UserDataWhereUniqueInput>
    connect?: Enumerable<UserDataWhereUniqueInput>
    update?: Enumerable<UserDataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserDataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserDataScalarWhereInput>
  }

  export type SharedIngredientUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutUsersInput>, Enumerable<SharedIngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SharedIngredientUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SharedIngredientCreateManyUsersInputEnvelope
    set?: Enumerable<SharedIngredientWhereUniqueInput>
    disconnect?: Enumerable<SharedIngredientWhereUniqueInput>
    delete?: Enumerable<SharedIngredientWhereUniqueInput>
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
    update?: Enumerable<SharedIngredientUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SharedIngredientUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SharedIngredientScalarWhereInput>
  }

  export type SharedVersionUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutUsersInput>, Enumerable<SharedVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SharedVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SharedVersionCreateManyUsersInputEnvelope
    set?: Enumerable<SharedVersionWhereUniqueInput>
    disconnect?: Enumerable<SharedVersionWhereUniqueInput>
    delete?: Enumerable<SharedVersionWhereUniqueInput>
    connect?: Enumerable<SharedVersionWhereUniqueInput>
    update?: Enumerable<SharedVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SharedVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SharedVersionScalarWhereInput>
  }

  export type RecipeUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<RecipeUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    set?: Enumerable<RecipeWhereUniqueInput>
    disconnect?: Enumerable<RecipeWhereUniqueInput>
    delete?: Enumerable<RecipeWhereUniqueInput>
    connect?: Enumerable<RecipeWhereUniqueInput>
    update?: Enumerable<RecipeUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<RecipeUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<RecipeScalarWhereInput>
  }

  export type VersionUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type IngredientUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<IngredientUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    set?: Enumerable<IngredientWhereUniqueInput>
    disconnect?: Enumerable<IngredientWhereUniqueInput>
    delete?: Enumerable<IngredientWhereUniqueInput>
    connect?: Enumerable<IngredientWhereUniqueInput>
    update?: Enumerable<IngredientUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<IngredientUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<IngredientScalarWhereInput>
  }

  export type SpecUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type AdminOnVersionUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutUsersInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<AdminOnVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: AdminOnVersionCreateManyUsersInputEnvelope
    set?: Enumerable<AdminOnVersionWhereUniqueInput>
    disconnect?: Enumerable<AdminOnVersionWhereUniqueInput>
    delete?: Enumerable<AdminOnVersionWhereUniqueInput>
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
    update?: Enumerable<AdminOnVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<AdminOnVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<AdminOnVersionScalarWhereInput>
  }

  export type GroupsModsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<GroupsModsCreateWithoutUsersInput>, Enumerable<GroupsModsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsModsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<GroupsModsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: GroupsModsCreateManyUsersInputEnvelope
    set?: Enumerable<GroupsModsWhereUniqueInput>
    disconnect?: Enumerable<GroupsModsWhereUniqueInput>
    delete?: Enumerable<GroupsModsWhereUniqueInput>
    connect?: Enumerable<GroupsModsWhereUniqueInput>
    update?: Enumerable<GroupsModsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<GroupsModsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<GroupsModsScalarWhereInput>
  }

  export type GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<GroupsUsersCreateWithoutUsersInput>, Enumerable<GroupsUsersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<GroupsUsersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<GroupsUsersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: GroupsUsersCreateManyUsersInputEnvelope
    set?: Enumerable<GroupsUsersWhereUniqueInput>
    disconnect?: Enumerable<GroupsUsersWhereUniqueInput>
    delete?: Enumerable<GroupsUsersWhereUniqueInput>
    connect?: Enumerable<GroupsUsersWhereUniqueInput>
    update?: Enumerable<GroupsUsersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<GroupsUsersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<GroupsUsersScalarWhereInput>
  }

  export type UserDataUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserDataCreateWithoutUsersInput>, Enumerable<UserDataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserDataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserDataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserDataCreateManyUsersInputEnvelope
    set?: Enumerable<UserDataWhereUniqueInput>
    disconnect?: Enumerable<UserDataWhereUniqueInput>
    delete?: Enumerable<UserDataWhereUniqueInput>
    connect?: Enumerable<UserDataWhereUniqueInput>
    update?: Enumerable<UserDataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserDataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserDataScalarWhereInput>
  }

  export type SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<SharedIngredientCreateWithoutUsersInput>, Enumerable<SharedIngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedIngredientCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SharedIngredientUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SharedIngredientCreateManyUsersInputEnvelope
    set?: Enumerable<SharedIngredientWhereUniqueInput>
    disconnect?: Enumerable<SharedIngredientWhereUniqueInput>
    delete?: Enumerable<SharedIngredientWhereUniqueInput>
    connect?: Enumerable<SharedIngredientWhereUniqueInput>
    update?: Enumerable<SharedIngredientUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SharedIngredientUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SharedIngredientScalarWhereInput>
  }

  export type SharedVersionUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<SharedVersionCreateWithoutUsersInput>, Enumerable<SharedVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SharedVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SharedVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SharedVersionCreateManyUsersInputEnvelope
    set?: Enumerable<SharedVersionWhereUniqueInput>
    disconnect?: Enumerable<SharedVersionWhereUniqueInput>
    delete?: Enumerable<SharedVersionWhereUniqueInput>
    connect?: Enumerable<SharedVersionWhereUniqueInput>
    update?: Enumerable<SharedVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SharedVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SharedVersionScalarWhereInput>
  }

  export type RecipeUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<RecipeUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    set?: Enumerable<RecipeWhereUniqueInput>
    disconnect?: Enumerable<RecipeWhereUniqueInput>
    delete?: Enumerable<RecipeWhereUniqueInput>
    connect?: Enumerable<RecipeWhereUniqueInput>
    update?: Enumerable<RecipeUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<RecipeUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<RecipeScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type IngredientUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<IngredientUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    set?: Enumerable<IngredientWhereUniqueInput>
    disconnect?: Enumerable<IngredientWhereUniqueInput>
    delete?: Enumerable<IngredientWhereUniqueInput>
    connect?: Enumerable<IngredientWhereUniqueInput>
    update?: Enumerable<IngredientUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<IngredientUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<IngredientScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<AdminOnVersionCreateWithoutUsersInput>, Enumerable<AdminOnVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<AdminOnVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<AdminOnVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: AdminOnVersionCreateManyUsersInputEnvelope
    set?: Enumerable<AdminOnVersionWhereUniqueInput>
    disconnect?: Enumerable<AdminOnVersionWhereUniqueInput>
    delete?: Enumerable<AdminOnVersionWhereUniqueInput>
    connect?: Enumerable<AdminOnVersionWhereUniqueInput>
    update?: Enumerable<AdminOnVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<AdminOnVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<AdminOnVersionScalarWhereInput>
  }

  export type IngredientCreateNestedOneWithoutSharedIngredientInput = {
    create?: XOR<IngredientCreateWithoutSharedIngredientInput, IngredientUncheckedCreateWithoutSharedIngredientInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSharedIngredientInput
    connect?: IngredientWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSharedIngredientInput = {
    create?: XOR<UsersCreateWithoutSharedIngredientInput, UsersUncheckedCreateWithoutSharedIngredientInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharedIngredientInput
    connect?: UsersWhereUniqueInput
  }

  export type IngredientUpdateOneRequiredWithoutSharedIngredientNestedInput = {
    create?: XOR<IngredientCreateWithoutSharedIngredientInput, IngredientUncheckedCreateWithoutSharedIngredientInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSharedIngredientInput
    upsert?: IngredientUpsertWithoutSharedIngredientInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutSharedIngredientInput, IngredientUncheckedUpdateWithoutSharedIngredientInput>
  }

  export type UsersUpdateOneRequiredWithoutSharedIngredientNestedInput = {
    create?: XOR<UsersCreateWithoutSharedIngredientInput, UsersUncheckedCreateWithoutSharedIngredientInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharedIngredientInput
    upsert?: UsersUpsertWithoutSharedIngredientInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutSharedIngredientInput, UsersUncheckedUpdateWithoutSharedIngredientInput>
  }

  export type VersionCreateNestedOneWithoutSharedVersionInput = {
    create?: XOR<VersionCreateWithoutSharedVersionInput, VersionUncheckedCreateWithoutSharedVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSharedVersionInput
    connect?: VersionWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSharedVersionInput = {
    create?: XOR<UsersCreateWithoutSharedVersionInput, UsersUncheckedCreateWithoutSharedVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharedVersionInput
    connect?: UsersWhereUniqueInput
  }

  export type VersionUpdateOneRequiredWithoutSharedVersionNestedInput = {
    create?: XOR<VersionCreateWithoutSharedVersionInput, VersionUncheckedCreateWithoutSharedVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSharedVersionInput
    upsert?: VersionUpsertWithoutSharedVersionInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutSharedVersionInput, VersionUncheckedUpdateWithoutSharedVersionInput>
  }

  export type UsersUpdateOneRequiredWithoutSharedVersionNestedInput = {
    create?: XOR<UsersCreateWithoutSharedVersionInput, UsersUncheckedCreateWithoutSharedVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharedVersionInput
    upsert?: UsersUpsertWithoutSharedVersionInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutSharedVersionInput, UsersUncheckedUpdateWithoutSharedVersionInput>
  }

  export type VersionCreateNestedOneWithoutAdminOnVersionInput = {
    create?: XOR<VersionCreateWithoutAdminOnVersionInput, VersionUncheckedCreateWithoutAdminOnVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutAdminOnVersionInput
    connect?: VersionWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAdminOnVersionInput = {
    create?: XOR<UsersCreateWithoutAdminOnVersionInput, UsersUncheckedCreateWithoutAdminOnVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAdminOnVersionInput
    connect?: UsersWhereUniqueInput
  }

  export type VersionUpdateOneRequiredWithoutAdminOnVersionNestedInput = {
    create?: XOR<VersionCreateWithoutAdminOnVersionInput, VersionUncheckedCreateWithoutAdminOnVersionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutAdminOnVersionInput
    upsert?: VersionUpsertWithoutAdminOnVersionInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutAdminOnVersionInput, VersionUncheckedUpdateWithoutAdminOnVersionInput>
  }

  export type UsersUpdateOneRequiredWithoutAdminOnVersionNestedInput = {
    create?: XOR<UsersCreateWithoutAdminOnVersionInput, UsersUncheckedCreateWithoutAdminOnVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAdminOnVersionInput
    upsert?: UsersUpsertWithoutAdminOnVersionInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutAdminOnVersionInput, UsersUncheckedUpdateWithoutAdminOnVersionInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type GroupsIngredientsCreateWithoutGroupsInput = {
    ingredients: IngredientCreateNestedOneWithoutGroupsIngredientsInput
  }

  export type GroupsIngredientsUncheckedCreateWithoutGroupsInput = {
    ingredientId: number
  }

  export type GroupsIngredientsCreateOrConnectWithoutGroupsInput = {
    where: GroupsIngredientsWhereUniqueInput
    create: XOR<GroupsIngredientsCreateWithoutGroupsInput, GroupsIngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsIngredientsCreateManyGroupsInputEnvelope = {
    data: Enumerable<GroupsIngredientsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type GroupsModsCreateWithoutGroupsInput = {
    users: UsersCreateNestedOneWithoutGroupsModsInput
  }

  export type GroupsModsUncheckedCreateWithoutGroupsInput = {
    userId: number
  }

  export type GroupsModsCreateOrConnectWithoutGroupsInput = {
    where: GroupsModsWhereUniqueInput
    create: XOR<GroupsModsCreateWithoutGroupsInput, GroupsModsUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsModsCreateManyGroupsInputEnvelope = {
    data: Enumerable<GroupsModsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type GroupVersionCreateWithoutGroupsInput = {
    version: VersionCreateNestedOneWithoutGroupVersionInput
  }

  export type GroupVersionUncheckedCreateWithoutGroupsInput = {
    versionId: number
  }

  export type GroupVersionCreateOrConnectWithoutGroupsInput = {
    where: GroupVersionWhereUniqueInput
    create: XOR<GroupVersionCreateWithoutGroupsInput, GroupVersionUncheckedCreateWithoutGroupsInput>
  }

  export type GroupVersionCreateManyGroupsInputEnvelope = {
    data: Enumerable<GroupVersionCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type GroupsUsersCreateWithoutGroupsInput = {
    users: UsersCreateNestedOneWithoutGroupsUsersInput
  }

  export type GroupsUsersUncheckedCreateWithoutGroupsInput = {
    userId: number
  }

  export type GroupsUsersCreateOrConnectWithoutGroupsInput = {
    where: GroupsUsersWhereUniqueInput
    create: XOR<GroupsUsersCreateWithoutGroupsInput, GroupsUsersUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsUsersCreateManyGroupsInputEnvelope = {
    data: Enumerable<GroupsUsersCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type GroupsIngredientsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: GroupsIngredientsWhereUniqueInput
    update: XOR<GroupsIngredientsUpdateWithoutGroupsInput, GroupsIngredientsUncheckedUpdateWithoutGroupsInput>
    create: XOR<GroupsIngredientsCreateWithoutGroupsInput, GroupsIngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsIngredientsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: GroupsIngredientsWhereUniqueInput
    data: XOR<GroupsIngredientsUpdateWithoutGroupsInput, GroupsIngredientsUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupsIngredientsUpdateManyWithWhereWithoutGroupsInput = {
    where: GroupsIngredientsScalarWhereInput
    data: XOR<GroupsIngredientsUpdateManyMutationInput, GroupsIngredientsUncheckedUpdateManyWithoutGroupsIngredientsInput>
  }

  export type GroupsIngredientsScalarWhereInput = {
    AND?: Enumerable<GroupsIngredientsScalarWhereInput>
    OR?: Enumerable<GroupsIngredientsScalarWhereInput>
    NOT?: Enumerable<GroupsIngredientsScalarWhereInput>
    groupId?: IntFilter | number
    ingredientId?: IntFilter | number
  }

  export type GroupsModsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: GroupsModsWhereUniqueInput
    update: XOR<GroupsModsUpdateWithoutGroupsInput, GroupsModsUncheckedUpdateWithoutGroupsInput>
    create: XOR<GroupsModsCreateWithoutGroupsInput, GroupsModsUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsModsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: GroupsModsWhereUniqueInput
    data: XOR<GroupsModsUpdateWithoutGroupsInput, GroupsModsUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupsModsUpdateManyWithWhereWithoutGroupsInput = {
    where: GroupsModsScalarWhereInput
    data: XOR<GroupsModsUpdateManyMutationInput, GroupsModsUncheckedUpdateManyWithoutGroupsModsInput>
  }

  export type GroupsModsScalarWhereInput = {
    AND?: Enumerable<GroupsModsScalarWhereInput>
    OR?: Enumerable<GroupsModsScalarWhereInput>
    NOT?: Enumerable<GroupsModsScalarWhereInput>
    userId?: IntFilter | number
    groupId?: IntFilter | number
  }

  export type GroupVersionUpsertWithWhereUniqueWithoutGroupsInput = {
    where: GroupVersionWhereUniqueInput
    update: XOR<GroupVersionUpdateWithoutGroupsInput, GroupVersionUncheckedUpdateWithoutGroupsInput>
    create: XOR<GroupVersionCreateWithoutGroupsInput, GroupVersionUncheckedCreateWithoutGroupsInput>
  }

  export type GroupVersionUpdateWithWhereUniqueWithoutGroupsInput = {
    where: GroupVersionWhereUniqueInput
    data: XOR<GroupVersionUpdateWithoutGroupsInput, GroupVersionUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupVersionUpdateManyWithWhereWithoutGroupsInput = {
    where: GroupVersionScalarWhereInput
    data: XOR<GroupVersionUpdateManyMutationInput, GroupVersionUncheckedUpdateManyWithoutGroupVersionInput>
  }

  export type GroupVersionScalarWhereInput = {
    AND?: Enumerable<GroupVersionScalarWhereInput>
    OR?: Enumerable<GroupVersionScalarWhereInput>
    NOT?: Enumerable<GroupVersionScalarWhereInput>
    groupId?: IntFilter | number
    versionId?: IntFilter | number
  }

  export type GroupsUsersUpsertWithWhereUniqueWithoutGroupsInput = {
    where: GroupsUsersWhereUniqueInput
    update: XOR<GroupsUsersUpdateWithoutGroupsInput, GroupsUsersUncheckedUpdateWithoutGroupsInput>
    create: XOR<GroupsUsersCreateWithoutGroupsInput, GroupsUsersUncheckedCreateWithoutGroupsInput>
  }

  export type GroupsUsersUpdateWithWhereUniqueWithoutGroupsInput = {
    where: GroupsUsersWhereUniqueInput
    data: XOR<GroupsUsersUpdateWithoutGroupsInput, GroupsUsersUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupsUsersUpdateManyWithWhereWithoutGroupsInput = {
    where: GroupsUsersScalarWhereInput
    data: XOR<GroupsUsersUpdateManyMutationInput, GroupsUsersUncheckedUpdateManyWithoutGroupsUsersInput>
  }

  export type GroupsUsersScalarWhereInput = {
    AND?: Enumerable<GroupsUsersScalarWhereInput>
    OR?: Enumerable<GroupsUsersScalarWhereInput>
    NOT?: Enumerable<GroupsUsersScalarWhereInput>
    userId?: IntFilter | number
    groupId?: IntFilter | number
  }

  export type GroupsCreateWithoutGroupsIngredientsInput = {
    groupName: string
    dateCreated: Date | string
    GroupsMods?: GroupsModsCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroupsIngredientsInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
    GroupsMods?: GroupsModsUncheckedCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionUncheckedCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroupsIngredientsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroupsIngredientsInput, GroupsUncheckedCreateWithoutGroupsIngredientsInput>
  }

  export type IngredientCreateWithoutGroupsIngredientsInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutGroupsIngredientsInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutGroupsIngredientsInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutGroupsIngredientsInput, IngredientUncheckedCreateWithoutGroupsIngredientsInput>
  }

  export type GroupsUpsertWithoutGroupsIngredientsInput = {
    update: XOR<GroupsUpdateWithoutGroupsIngredientsInput, GroupsUncheckedUpdateWithoutGroupsIngredientsInput>
    create: XOR<GroupsCreateWithoutGroupsIngredientsInput, GroupsUncheckedCreateWithoutGroupsIngredientsInput>
  }

  export type GroupsUpdateWithoutGroupsIngredientsInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupsMods?: GroupsModsUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroupsIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupsMods?: GroupsModsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type IngredientUpsertWithoutGroupsIngredientsInput = {
    update: XOR<IngredientUpdateWithoutGroupsIngredientsInput, IngredientUncheckedUpdateWithoutGroupsIngredientsInput>
    create: XOR<IngredientCreateWithoutGroupsIngredientsInput, IngredientUncheckedCreateWithoutGroupsIngredientsInput>
  }

  export type IngredientUpdateWithoutGroupsIngredientsInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutGroupsIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type GroupsCreateWithoutGroupsModsInput = {
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroupsModsInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionUncheckedCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroupsModsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroupsModsInput, GroupsUncheckedCreateWithoutGroupsModsInput>
  }

  export type UsersCreateWithoutGroupsModsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutGroupsModsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutGroupsModsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutGroupsModsInput, UsersUncheckedCreateWithoutGroupsModsInput>
  }

  export type GroupsUpsertWithoutGroupsModsInput = {
    update: XOR<GroupsUpdateWithoutGroupsModsInput, GroupsUncheckedUpdateWithoutGroupsModsInput>
    create: XOR<GroupsCreateWithoutGroupsModsInput, GroupsUncheckedCreateWithoutGroupsModsInput>
  }

  export type GroupsUpdateWithoutGroupsModsInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroupsModsInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type UsersUpsertWithoutGroupsModsInput = {
    update: XOR<UsersUpdateWithoutGroupsModsInput, UsersUncheckedUpdateWithoutGroupsModsInput>
    create: XOR<UsersCreateWithoutGroupsModsInput, UsersUncheckedCreateWithoutGroupsModsInput>
  }

  export type UsersUpdateWithoutGroupsModsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutGroupsModsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type GroupsCreateWithoutGroupVersionInput = {
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroupVersionInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsUncheckedCreateNestedManyWithoutGroupsInput
    GroupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroupVersionInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroupVersionInput, GroupsUncheckedCreateWithoutGroupVersionInput>
  }

  export type VersionCreateWithoutGroupVersionInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutGroupVersionInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutGroupVersionInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutGroupVersionInput, VersionUncheckedCreateWithoutGroupVersionInput>
  }

  export type GroupsUpsertWithoutGroupVersionInput = {
    update: XOR<GroupsUpdateWithoutGroupVersionInput, GroupsUncheckedUpdateWithoutGroupVersionInput>
    create: XOR<GroupsCreateWithoutGroupVersionInput, GroupsUncheckedCreateWithoutGroupVersionInput>
  }

  export type GroupsUpdateWithoutGroupVersionInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroupVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsUsers?: GroupsUsersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type VersionUpsertWithoutGroupVersionInput = {
    update: XOR<VersionUpdateWithoutGroupVersionInput, VersionUncheckedUpdateWithoutGroupVersionInput>
    create: XOR<VersionCreateWithoutGroupVersionInput, VersionUncheckedCreateWithoutGroupVersionInput>
  }

  export type VersionUpdateWithoutGroupVersionInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutGroupVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type GroupsCreateWithoutGroupsUsersInput = {
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroupsUsersInput = {
    id?: number
    groupName: string
    dateCreated: Date | string
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutGroupsInput
    GroupsMods?: GroupsModsUncheckedCreateNestedManyWithoutGroupsInput
    GroupVersion?: GroupVersionUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroupsUsersInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroupsUsersInput, GroupsUncheckedCreateWithoutGroupsUsersInput>
  }

  export type UsersCreateWithoutGroupsUsersInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutGroupsUsersInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutGroupsUsersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutGroupsUsersInput, UsersUncheckedCreateWithoutGroupsUsersInput>
  }

  export type GroupsUpsertWithoutGroupsUsersInput = {
    update: XOR<GroupsUpdateWithoutGroupsUsersInput, GroupsUncheckedUpdateWithoutGroupsUsersInput>
    create: XOR<GroupsCreateWithoutGroupsUsersInput, GroupsUncheckedCreateWithoutGroupsUsersInput>
  }

  export type GroupsUpdateWithoutGroupsUsersInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroupsUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupsMods?: GroupsModsUncheckedUpdateManyWithoutGroupsNestedInput
    GroupVersion?: GroupVersionUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type UsersUpsertWithoutGroupsUsersInput = {
    update: XOR<UsersUpdateWithoutGroupsUsersInput, UsersUncheckedUpdateWithoutGroupsUsersInput>
    create: XOR<UsersCreateWithoutGroupsUsersInput, UsersUncheckedCreateWithoutGroupsUsersInput>
  }

  export type UsersUpdateWithoutGroupsUsersInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutGroupsUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutIngredientsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutIngredientsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutIngredientsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
  }

  export type GroupsIngredientsCreateWithoutIngredientsInput = {
    groups: GroupsCreateNestedOneWithoutGroupsIngredientsInput
  }

  export type GroupsIngredientsUncheckedCreateWithoutIngredientsInput = {
    groupId: number
  }

  export type GroupsIngredientsCreateOrConnectWithoutIngredientsInput = {
    where: GroupsIngredientsWhereUniqueInput
    create: XOR<GroupsIngredientsCreateWithoutIngredientsInput, GroupsIngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type GroupsIngredientsCreateManyIngredientsInputEnvelope = {
    data: Enumerable<GroupsIngredientsCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type SpecCreateWithoutIngredientInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    version?: VersionCreateNestedOneWithoutSpecsInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateWithoutIngredientInput = {
    id?: number
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecCreateOrConnectWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutIngredientInput, SpecUncheckedCreateWithoutIngredientInput>
  }

  export type SpecCreateManyIngredientInputEnvelope = {
    data: Enumerable<SpecCreateManyIngredientInput>
    skipDuplicates?: boolean
  }

  export type SharedIngredientCreateWithoutIngredientsInput = {
    users: UsersCreateNestedOneWithoutSharedIngredientInput
  }

  export type SharedIngredientUncheckedCreateWithoutIngredientsInput = {
    userId: number
  }

  export type SharedIngredientCreateOrConnectWithoutIngredientsInput = {
    where: SharedIngredientWhereUniqueInput
    create: XOR<SharedIngredientCreateWithoutIngredientsInput, SharedIngredientUncheckedCreateWithoutIngredientsInput>
  }

  export type SharedIngredientCreateManyIngredientsInputEnvelope = {
    data: Enumerable<SharedIngredientCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutIngredientsInput = {
    update: XOR<UsersUpdateWithoutIngredientsInput, UsersUncheckedUpdateWithoutIngredientsInput>
    create: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
  }

  export type UsersUpdateWithoutIngredientsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type GroupsIngredientsUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: GroupsIngredientsWhereUniqueInput
    update: XOR<GroupsIngredientsUpdateWithoutIngredientsInput, GroupsIngredientsUncheckedUpdateWithoutIngredientsInput>
    create: XOR<GroupsIngredientsCreateWithoutIngredientsInput, GroupsIngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type GroupsIngredientsUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: GroupsIngredientsWhereUniqueInput
    data: XOR<GroupsIngredientsUpdateWithoutIngredientsInput, GroupsIngredientsUncheckedUpdateWithoutIngredientsInput>
  }

  export type GroupsIngredientsUpdateManyWithWhereWithoutIngredientsInput = {
    where: GroupsIngredientsScalarWhereInput
    data: XOR<GroupsIngredientsUpdateManyMutationInput, GroupsIngredientsUncheckedUpdateManyWithoutGroupsIngredientsInput>
  }

  export type SpecUpsertWithWhereUniqueWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutIngredientInput, SpecUncheckedUpdateWithoutIngredientInput>
    create: XOR<SpecCreateWithoutIngredientInput, SpecUncheckedCreateWithoutIngredientInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutIngredientInput, SpecUncheckedUpdateWithoutIngredientInput>
  }

  export type SpecUpdateManyWithWhereWithoutIngredientInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecInput>
  }

  export type SpecScalarWhereInput = {
    AND?: Enumerable<SpecScalarWhereInput>
    OR?: Enumerable<SpecScalarWhereInput>
    NOT?: Enumerable<SpecScalarWhereInput>
    id?: IntFilter | number
    ingredientId?: IntNullableFilter | number | null
    order?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    versionId?: IntNullableFilter | number | null
    postedById?: IntNullableFilter | number | null
  }

  export type SharedIngredientUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: SharedIngredientWhereUniqueInput
    update: XOR<SharedIngredientUpdateWithoutIngredientsInput, SharedIngredientUncheckedUpdateWithoutIngredientsInput>
    create: XOR<SharedIngredientCreateWithoutIngredientsInput, SharedIngredientUncheckedCreateWithoutIngredientsInput>
  }

  export type SharedIngredientUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: SharedIngredientWhereUniqueInput
    data: XOR<SharedIngredientUpdateWithoutIngredientsInput, SharedIngredientUncheckedUpdateWithoutIngredientsInput>
  }

  export type SharedIngredientUpdateManyWithWhereWithoutIngredientsInput = {
    where: SharedIngredientScalarWhereInput
    data: XOR<SharedIngredientUpdateManyMutationInput, SharedIngredientUncheckedUpdateManyWithoutSharedIngredientInput>
  }

  export type SharedIngredientScalarWhereInput = {
    AND?: Enumerable<SharedIngredientScalarWhereInput>
    OR?: Enumerable<SharedIngredientScalarWhereInput>
    NOT?: Enumerable<SharedIngredientScalarWhereInput>
    userId?: IntFilter | number
    ingredientId?: IntFilter | number
  }

  export type IngredientCreateWithoutSpecInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutIngredientsInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutSpecInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutSpecInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
  }

  export type VersionCreateWithoutSpecsInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutSpecsInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutSpecsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
  }

  export type UsersCreateWithoutSpecInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSpecInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSpecInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
  }

  export type IngredientUpsertWithoutSpecInput = {
    update: XOR<IngredientUpdateWithoutSpecInput, IngredientUncheckedUpdateWithoutSpecInput>
    create: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
  }

  export type IngredientUpdateWithoutSpecInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutIngredientsNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type VersionUpsertWithoutSpecsInput = {
    update: XOR<VersionUpdateWithoutSpecsInput, VersionUncheckedUpdateWithoutSpecsInput>
    create: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
  }

  export type VersionUpdateWithoutSpecsInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type UsersUpsertWithoutSpecInput = {
    update: XOR<UsersUpdateWithoutSpecInput, UsersUncheckedUpdateWithoutSpecInput>
    create: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
  }

  export type UsersUpdateWithoutSpecInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutRecipesInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutRecipesInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutRecipesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
  }

  export type VersionCreateWithoutRecipeInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutRecipeInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutRecipeInput, VersionUncheckedCreateWithoutRecipeInput>
  }

  export type VersionCreateManyRecipeInputEnvelope = {
    data: Enumerable<VersionCreateManyRecipeInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutRecipesInput = {
    update: XOR<UsersUpdateWithoutRecipesInput, UsersUncheckedUpdateWithoutRecipesInput>
    create: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
  }

  export type UsersUpdateWithoutRecipesInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type VersionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutRecipeInput, VersionUncheckedUpdateWithoutRecipeInput>
    create: XOR<VersionCreateWithoutRecipeInput, VersionUncheckedCreateWithoutRecipeInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutRecipeInput, VersionUncheckedUpdateWithoutRecipeInput>
  }

  export type VersionUpdateManyWithWhereWithoutRecipeInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionInput>
  }

  export type VersionScalarWhereInput = {
    AND?: Enumerable<VersionScalarWhereInput>
    OR?: Enumerable<VersionScalarWhereInput>
    NOT?: Enumerable<VersionScalarWhereInput>
    id?: IntFilter | number
    versionName?: StringFilter | string
    postedById?: IntNullableFilter | number | null
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
    recipeId?: IntNullableFilter | number | null
  }

  export type UsersCreateWithoutVersionInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutVersionInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutVersionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
  }

  export type GroupVersionCreateWithoutVersionInput = {
    groups: GroupsCreateNestedOneWithoutGroupVersionInput
  }

  export type GroupVersionUncheckedCreateWithoutVersionInput = {
    groupId: number
  }

  export type GroupVersionCreateOrConnectWithoutVersionInput = {
    where: GroupVersionWhereUniqueInput
    create: XOR<GroupVersionCreateWithoutVersionInput, GroupVersionUncheckedCreateWithoutVersionInput>
  }

  export type GroupVersionCreateManyVersionInputEnvelope = {
    data: Enumerable<GroupVersionCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type SharedVersionCreateWithoutVersionInput = {
    users: UsersCreateNestedOneWithoutSharedVersionInput
  }

  export type SharedVersionUncheckedCreateWithoutVersionInput = {
    userId: number
  }

  export type SharedVersionCreateOrConnectWithoutVersionInput = {
    where: SharedVersionWhereUniqueInput
    create: XOR<SharedVersionCreateWithoutVersionInput, SharedVersionUncheckedCreateWithoutVersionInput>
  }

  export type SharedVersionCreateManyVersionInputEnvelope = {
    data: Enumerable<SharedVersionCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutVersionInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedBy?: UsersCreateNestedOneWithoutRecipesInput
  }

  export type RecipeUncheckedCreateWithoutVersionInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
  }

  export type RecipeCreateOrConnectWithoutVersionInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
  }

  export type SpecCreateWithoutVersionInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateWithoutVersionInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    postedById?: number | null
  }

  export type SpecCreateOrConnectWithoutVersionInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutVersionInput, SpecUncheckedCreateWithoutVersionInput>
  }

  export type SpecCreateManyVersionInputEnvelope = {
    data: Enumerable<SpecCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type AdminOnVersionCreateWithoutVersionInput = {
    assignedById: number
    assignedAt?: Date | string
    users: UsersCreateNestedOneWithoutAdminOnVersionInput
  }

  export type AdminOnVersionUncheckedCreateWithoutVersionInput = {
    userId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type AdminOnVersionCreateOrConnectWithoutVersionInput = {
    where: AdminOnVersionWhereUniqueInput
    create: XOR<AdminOnVersionCreateWithoutVersionInput, AdminOnVersionUncheckedCreateWithoutVersionInput>
  }

  export type AdminOnVersionCreateManyVersionInputEnvelope = {
    data: Enumerable<AdminOnVersionCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutVersionInput = {
    update: XOR<UsersUpdateWithoutVersionInput, UsersUncheckedUpdateWithoutVersionInput>
    create: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
  }

  export type UsersUpdateWithoutVersionInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type GroupVersionUpsertWithWhereUniqueWithoutVersionInput = {
    where: GroupVersionWhereUniqueInput
    update: XOR<GroupVersionUpdateWithoutVersionInput, GroupVersionUncheckedUpdateWithoutVersionInput>
    create: XOR<GroupVersionCreateWithoutVersionInput, GroupVersionUncheckedCreateWithoutVersionInput>
  }

  export type GroupVersionUpdateWithWhereUniqueWithoutVersionInput = {
    where: GroupVersionWhereUniqueInput
    data: XOR<GroupVersionUpdateWithoutVersionInput, GroupVersionUncheckedUpdateWithoutVersionInput>
  }

  export type GroupVersionUpdateManyWithWhereWithoutVersionInput = {
    where: GroupVersionScalarWhereInput
    data: XOR<GroupVersionUpdateManyMutationInput, GroupVersionUncheckedUpdateManyWithoutGroupVersionInput>
  }

  export type SharedVersionUpsertWithWhereUniqueWithoutVersionInput = {
    where: SharedVersionWhereUniqueInput
    update: XOR<SharedVersionUpdateWithoutVersionInput, SharedVersionUncheckedUpdateWithoutVersionInput>
    create: XOR<SharedVersionCreateWithoutVersionInput, SharedVersionUncheckedCreateWithoutVersionInput>
  }

  export type SharedVersionUpdateWithWhereUniqueWithoutVersionInput = {
    where: SharedVersionWhereUniqueInput
    data: XOR<SharedVersionUpdateWithoutVersionInput, SharedVersionUncheckedUpdateWithoutVersionInput>
  }

  export type SharedVersionUpdateManyWithWhereWithoutVersionInput = {
    where: SharedVersionScalarWhereInput
    data: XOR<SharedVersionUpdateManyMutationInput, SharedVersionUncheckedUpdateManyWithoutSharedVersionInput>
  }

  export type SharedVersionScalarWhereInput = {
    AND?: Enumerable<SharedVersionScalarWhereInput>
    OR?: Enumerable<SharedVersionScalarWhereInput>
    NOT?: Enumerable<SharedVersionScalarWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
  }

  export type RecipeUpsertWithoutVersionInput = {
    update: XOR<RecipeUpdateWithoutVersionInput, RecipeUncheckedUpdateWithoutVersionInput>
    create: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
  }

  export type RecipeUpdateWithoutVersionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutRecipesNestedInput
  }

  export type RecipeUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUpsertWithWhereUniqueWithoutVersionInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutVersionInput, SpecUncheckedUpdateWithoutVersionInput>
    create: XOR<SpecCreateWithoutVersionInput, SpecUncheckedCreateWithoutVersionInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutVersionInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutVersionInput, SpecUncheckedUpdateWithoutVersionInput>
  }

  export type SpecUpdateManyWithWhereWithoutVersionInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecsInput>
  }

  export type AdminOnVersionUpsertWithWhereUniqueWithoutVersionInput = {
    where: AdminOnVersionWhereUniqueInput
    update: XOR<AdminOnVersionUpdateWithoutVersionInput, AdminOnVersionUncheckedUpdateWithoutVersionInput>
    create: XOR<AdminOnVersionCreateWithoutVersionInput, AdminOnVersionUncheckedCreateWithoutVersionInput>
  }

  export type AdminOnVersionUpdateWithWhereUniqueWithoutVersionInput = {
    where: AdminOnVersionWhereUniqueInput
    data: XOR<AdminOnVersionUpdateWithoutVersionInput, AdminOnVersionUncheckedUpdateWithoutVersionInput>
  }

  export type AdminOnVersionUpdateManyWithWhereWithoutVersionInput = {
    where: AdminOnVersionScalarWhereInput
    data: XOR<AdminOnVersionUpdateManyMutationInput, AdminOnVersionUncheckedUpdateManyWithoutAdminOnVersionInput>
  }

  export type AdminOnVersionScalarWhereInput = {
    AND?: Enumerable<AdminOnVersionScalarWhereInput>
    OR?: Enumerable<AdminOnVersionScalarWhereInput>
    NOT?: Enumerable<AdminOnVersionScalarWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
    assignedById?: IntFilter | number
    assignedAt?: DateTimeFilter | Date | string
  }

  export type UsersCreateWithoutUserDataInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutUserDataInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutUserDataInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUserDataInput, UsersUncheckedCreateWithoutUserDataInput>
  }

  export type UsersUpsertWithoutUserDataInput = {
    update: XOR<UsersUpdateWithoutUserDataInput, UsersUncheckedUpdateWithoutUserDataInput>
    create: XOR<UsersCreateWithoutUserDataInput, UsersUncheckedCreateWithoutUserDataInput>
  }

  export type UsersUpdateWithoutUserDataInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutUserDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type GroupsModsCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroupsModsInput
  }

  export type GroupsModsUncheckedCreateWithoutUsersInput = {
    groupId: number
  }

  export type GroupsModsCreateOrConnectWithoutUsersInput = {
    where: GroupsModsWhereUniqueInput
    create: XOR<GroupsModsCreateWithoutUsersInput, GroupsModsUncheckedCreateWithoutUsersInput>
  }

  export type GroupsModsCreateManyUsersInputEnvelope = {
    data: Enumerable<GroupsModsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type GroupsUsersCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroupsUsersInput
  }

  export type GroupsUsersUncheckedCreateWithoutUsersInput = {
    groupId: number
  }

  export type GroupsUsersCreateOrConnectWithoutUsersInput = {
    where: GroupsUsersWhereUniqueInput
    create: XOR<GroupsUsersCreateWithoutUsersInput, GroupsUsersUncheckedCreateWithoutUsersInput>
  }

  export type GroupsUsersCreateManyUsersInputEnvelope = {
    data: Enumerable<GroupsUsersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type UserDataCreateWithoutUsersInput = {
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
  }

  export type UserDataUncheckedCreateWithoutUsersInput = {
    id?: number
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
  }

  export type UserDataCreateOrConnectWithoutUsersInput = {
    where: UserDataWhereUniqueInput
    create: XOR<UserDataCreateWithoutUsersInput, UserDataUncheckedCreateWithoutUsersInput>
  }

  export type UserDataCreateManyUsersInputEnvelope = {
    data: Enumerable<UserDataCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type SharedIngredientCreateWithoutUsersInput = {
    ingredients: IngredientCreateNestedOneWithoutSharedIngredientInput
  }

  export type SharedIngredientUncheckedCreateWithoutUsersInput = {
    ingredientId: number
  }

  export type SharedIngredientCreateOrConnectWithoutUsersInput = {
    where: SharedIngredientWhereUniqueInput
    create: XOR<SharedIngredientCreateWithoutUsersInput, SharedIngredientUncheckedCreateWithoutUsersInput>
  }

  export type SharedIngredientCreateManyUsersInputEnvelope = {
    data: Enumerable<SharedIngredientCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type SharedVersionCreateWithoutUsersInput = {
    version: VersionCreateNestedOneWithoutSharedVersionInput
  }

  export type SharedVersionUncheckedCreateWithoutUsersInput = {
    versionId: number
  }

  export type SharedVersionCreateOrConnectWithoutUsersInput = {
    where: SharedVersionWhereUniqueInput
    create: XOR<SharedVersionCreateWithoutUsersInput, SharedVersionUncheckedCreateWithoutUsersInput>
  }

  export type SharedVersionCreateManyUsersInputEnvelope = {
    data: Enumerable<SharedVersionCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutPostedByInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    version?: VersionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutPostedByInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    version?: VersionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutPostedByInput, RecipeUncheckedCreateWithoutPostedByInput>
  }

  export type RecipeCreateManyPostedByInputEnvelope = {
    data: Enumerable<RecipeCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type VersionCreateWithoutPostedByInput = {
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutPostedByInput = {
    id?: number
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutPostedByInput, VersionUncheckedCreateWithoutPostedByInput>
  }

  export type VersionCreateManyPostedByInputEnvelope = {
    data: Enumerable<VersionCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type IngredientCreateWithoutPostedByInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutPostedByInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutPostedByInput, IngredientUncheckedCreateWithoutPostedByInput>
  }

  export type IngredientCreateManyPostedByInputEnvelope = {
    data: Enumerable<IngredientCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type SpecCreateWithoutPostedByInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    version?: VersionCreateNestedOneWithoutSpecsInput
  }

  export type SpecUncheckedCreateWithoutPostedByInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
  }

  export type SpecCreateOrConnectWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutPostedByInput, SpecUncheckedCreateWithoutPostedByInput>
  }

  export type SpecCreateManyPostedByInputEnvelope = {
    data: Enumerable<SpecCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type AdminOnVersionCreateWithoutUsersInput = {
    assignedById: number
    assignedAt?: Date | string
    version: VersionCreateNestedOneWithoutAdminOnVersionInput
  }

  export type AdminOnVersionUncheckedCreateWithoutUsersInput = {
    versionId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type AdminOnVersionCreateOrConnectWithoutUsersInput = {
    where: AdminOnVersionWhereUniqueInput
    create: XOR<AdminOnVersionCreateWithoutUsersInput, AdminOnVersionUncheckedCreateWithoutUsersInput>
  }

  export type AdminOnVersionCreateManyUsersInputEnvelope = {
    data: Enumerable<AdminOnVersionCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type GroupsModsUpsertWithWhereUniqueWithoutUsersInput = {
    where: GroupsModsWhereUniqueInput
    update: XOR<GroupsModsUpdateWithoutUsersInput, GroupsModsUncheckedUpdateWithoutUsersInput>
    create: XOR<GroupsModsCreateWithoutUsersInput, GroupsModsUncheckedCreateWithoutUsersInput>
  }

  export type GroupsModsUpdateWithWhereUniqueWithoutUsersInput = {
    where: GroupsModsWhereUniqueInput
    data: XOR<GroupsModsUpdateWithoutUsersInput, GroupsModsUncheckedUpdateWithoutUsersInput>
  }

  export type GroupsModsUpdateManyWithWhereWithoutUsersInput = {
    where: GroupsModsScalarWhereInput
    data: XOR<GroupsModsUpdateManyMutationInput, GroupsModsUncheckedUpdateManyWithoutGroupsModsInput>
  }

  export type GroupsUsersUpsertWithWhereUniqueWithoutUsersInput = {
    where: GroupsUsersWhereUniqueInput
    update: XOR<GroupsUsersUpdateWithoutUsersInput, GroupsUsersUncheckedUpdateWithoutUsersInput>
    create: XOR<GroupsUsersCreateWithoutUsersInput, GroupsUsersUncheckedCreateWithoutUsersInput>
  }

  export type GroupsUsersUpdateWithWhereUniqueWithoutUsersInput = {
    where: GroupsUsersWhereUniqueInput
    data: XOR<GroupsUsersUpdateWithoutUsersInput, GroupsUsersUncheckedUpdateWithoutUsersInput>
  }

  export type GroupsUsersUpdateManyWithWhereWithoutUsersInput = {
    where: GroupsUsersScalarWhereInput
    data: XOR<GroupsUsersUpdateManyMutationInput, GroupsUsersUncheckedUpdateManyWithoutGroupsUsersInput>
  }

  export type UserDataUpsertWithWhereUniqueWithoutUsersInput = {
    where: UserDataWhereUniqueInput
    update: XOR<UserDataUpdateWithoutUsersInput, UserDataUncheckedUpdateWithoutUsersInput>
    create: XOR<UserDataCreateWithoutUsersInput, UserDataUncheckedCreateWithoutUsersInput>
  }

  export type UserDataUpdateWithWhereUniqueWithoutUsersInput = {
    where: UserDataWhereUniqueInput
    data: XOR<UserDataUpdateWithoutUsersInput, UserDataUncheckedUpdateWithoutUsersInput>
  }

  export type UserDataUpdateManyWithWhereWithoutUsersInput = {
    where: UserDataScalarWhereInput
    data: XOR<UserDataUpdateManyMutationInput, UserDataUncheckedUpdateManyWithoutUserDataInput>
  }

  export type UserDataScalarWhereInput = {
    AND?: Enumerable<UserDataScalarWhereInput>
    OR?: Enumerable<UserDataScalarWhereInput>
    NOT?: Enumerable<UserDataScalarWhereInput>
    id?: IntFilter | number
    userId?: IntNullableFilter | number | null
    userBio?: StringNullableFilter | string | null
    workPlace?: StringNullableFilter | string | null
    profilePicture?: StringNullableFilter | string | null
  }

  export type SharedIngredientUpsertWithWhereUniqueWithoutUsersInput = {
    where: SharedIngredientWhereUniqueInput
    update: XOR<SharedIngredientUpdateWithoutUsersInput, SharedIngredientUncheckedUpdateWithoutUsersInput>
    create: XOR<SharedIngredientCreateWithoutUsersInput, SharedIngredientUncheckedCreateWithoutUsersInput>
  }

  export type SharedIngredientUpdateWithWhereUniqueWithoutUsersInput = {
    where: SharedIngredientWhereUniqueInput
    data: XOR<SharedIngredientUpdateWithoutUsersInput, SharedIngredientUncheckedUpdateWithoutUsersInput>
  }

  export type SharedIngredientUpdateManyWithWhereWithoutUsersInput = {
    where: SharedIngredientScalarWhereInput
    data: XOR<SharedIngredientUpdateManyMutationInput, SharedIngredientUncheckedUpdateManyWithoutSharedIngredientInput>
  }

  export type SharedVersionUpsertWithWhereUniqueWithoutUsersInput = {
    where: SharedVersionWhereUniqueInput
    update: XOR<SharedVersionUpdateWithoutUsersInput, SharedVersionUncheckedUpdateWithoutUsersInput>
    create: XOR<SharedVersionCreateWithoutUsersInput, SharedVersionUncheckedCreateWithoutUsersInput>
  }

  export type SharedVersionUpdateWithWhereUniqueWithoutUsersInput = {
    where: SharedVersionWhereUniqueInput
    data: XOR<SharedVersionUpdateWithoutUsersInput, SharedVersionUncheckedUpdateWithoutUsersInput>
  }

  export type SharedVersionUpdateManyWithWhereWithoutUsersInput = {
    where: SharedVersionScalarWhereInput
    data: XOR<SharedVersionUpdateManyMutationInput, SharedVersionUncheckedUpdateManyWithoutSharedVersionInput>
  }

  export type RecipeUpsertWithWhereUniqueWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutPostedByInput, RecipeUncheckedUpdateWithoutPostedByInput>
    create: XOR<RecipeCreateWithoutPostedByInput, RecipeUncheckedCreateWithoutPostedByInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutPostedByInput, RecipeUncheckedUpdateWithoutPostedByInput>
  }

  export type RecipeUpdateManyWithWhereWithoutPostedByInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutRecipesInput>
  }

  export type RecipeScalarWhereInput = {
    AND?: Enumerable<RecipeScalarWhereInput>
    OR?: Enumerable<RecipeScalarWhereInput>
    NOT?: Enumerable<RecipeScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    origin?: StringFilter | string
    history?: StringNullableFilter | string | null
    postedById?: IntNullableFilter | number | null
  }

  export type VersionUpsertWithWhereUniqueWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutPostedByInput, VersionUncheckedUpdateWithoutPostedByInput>
    create: XOR<VersionCreateWithoutPostedByInput, VersionUncheckedCreateWithoutPostedByInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutPostedByInput, VersionUncheckedUpdateWithoutPostedByInput>
  }

  export type VersionUpdateManyWithWhereWithoutPostedByInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionInput>
  }

  export type IngredientUpsertWithWhereUniqueWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutPostedByInput, IngredientUncheckedUpdateWithoutPostedByInput>
    create: XOR<IngredientCreateWithoutPostedByInput, IngredientUncheckedCreateWithoutPostedByInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutPostedByInput, IngredientUncheckedUpdateWithoutPostedByInput>
  }

  export type IngredientUpdateManyWithWhereWithoutPostedByInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type IngredientScalarWhereInput = {
    AND?: Enumerable<IngredientScalarWhereInput>
    OR?: Enumerable<IngredientScalarWhereInput>
    NOT?: Enumerable<IngredientScalarWhereInput>
    id?: IntFilter | number
    date_created?: DateTimeFilter | Date | string
    name?: StringFilter | string
    amount?: IntNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableFilter | string | null
    postedById?: IntNullableFilter | number | null
  }

  export type SpecUpsertWithWhereUniqueWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutPostedByInput, SpecUncheckedUpdateWithoutPostedByInput>
    create: XOR<SpecCreateWithoutPostedByInput, SpecUncheckedCreateWithoutPostedByInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutPostedByInput, SpecUncheckedUpdateWithoutPostedByInput>
  }

  export type SpecUpdateManyWithWhereWithoutPostedByInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecInput>
  }

  export type AdminOnVersionUpsertWithWhereUniqueWithoutUsersInput = {
    where: AdminOnVersionWhereUniqueInput
    update: XOR<AdminOnVersionUpdateWithoutUsersInput, AdminOnVersionUncheckedUpdateWithoutUsersInput>
    create: XOR<AdminOnVersionCreateWithoutUsersInput, AdminOnVersionUncheckedCreateWithoutUsersInput>
  }

  export type AdminOnVersionUpdateWithWhereUniqueWithoutUsersInput = {
    where: AdminOnVersionWhereUniqueInput
    data: XOR<AdminOnVersionUpdateWithoutUsersInput, AdminOnVersionUncheckedUpdateWithoutUsersInput>
  }

  export type AdminOnVersionUpdateManyWithWhereWithoutUsersInput = {
    where: AdminOnVersionScalarWhereInput
    data: XOR<AdminOnVersionUpdateManyMutationInput, AdminOnVersionUncheckedUpdateManyWithoutAdminOnVersionInput>
  }

  export type IngredientCreateWithoutSharedIngredientInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groupsIngredients?: GroupsIngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateWithoutSharedIngredientInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groupsIngredients?: GroupsIngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientCreateOrConnectWithoutSharedIngredientInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutSharedIngredientInput, IngredientUncheckedCreateWithoutSharedIngredientInput>
  }

  export type UsersCreateWithoutSharedIngredientInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSharedIngredientInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSharedIngredientInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSharedIngredientInput, UsersUncheckedCreateWithoutSharedIngredientInput>
  }

  export type IngredientUpsertWithoutSharedIngredientInput = {
    update: XOR<IngredientUpdateWithoutSharedIngredientInput, IngredientUncheckedUpdateWithoutSharedIngredientInput>
    create: XOR<IngredientCreateWithoutSharedIngredientInput, IngredientUncheckedCreateWithoutSharedIngredientInput>
  }

  export type IngredientUpdateWithoutSharedIngredientInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateWithoutSharedIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type UsersUpsertWithoutSharedIngredientInput = {
    update: XOR<UsersUpdateWithoutSharedIngredientInput, UsersUncheckedUpdateWithoutSharedIngredientInput>
    create: XOR<UsersCreateWithoutSharedIngredientInput, UsersUncheckedCreateWithoutSharedIngredientInput>
  }

  export type UsersUpdateWithoutSharedIngredientInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutSharedIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type VersionCreateWithoutSharedVersionInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutSharedVersionInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutSharedVersionInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutSharedVersionInput, VersionUncheckedCreateWithoutSharedVersionInput>
  }

  export type UsersCreateWithoutSharedVersionInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSharedVersionInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
    adminOnVersion?: AdminOnVersionUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSharedVersionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSharedVersionInput, UsersUncheckedCreateWithoutSharedVersionInput>
  }

  export type VersionUpsertWithoutSharedVersionInput = {
    update: XOR<VersionUpdateWithoutSharedVersionInput, VersionUncheckedUpdateWithoutSharedVersionInput>
    create: XOR<VersionCreateWithoutSharedVersionInput, VersionUncheckedCreateWithoutSharedVersionInput>
  }

  export type VersionUpdateWithoutSharedVersionInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutSharedVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type UsersUpsertWithoutSharedVersionInput = {
    update: XOR<UsersUpdateWithoutSharedVersionInput, UsersUncheckedUpdateWithoutSharedVersionInput>
    create: XOR<UsersCreateWithoutSharedVersionInput, UsersUncheckedCreateWithoutSharedVersionInput>
  }

  export type UsersUpdateWithoutSharedVersionInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutSharedVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type VersionCreateWithoutAdminOnVersionInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutAdminOnVersionInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groupVersion?: GroupVersionUncheckedCreateNestedManyWithoutVersionInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutAdminOnVersionInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutAdminOnVersionInput, VersionUncheckedCreateWithoutAdminOnVersionInput>
  }

  export type UsersCreateWithoutAdminOnVersionInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersCreateNestedManyWithoutUsersInput
    userData?: UserDataCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutAdminOnVersionInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groupsMods?: GroupsModsUncheckedCreateNestedManyWithoutUsersInput
    groupsUsers?: GroupsUsersUncheckedCreateNestedManyWithoutUsersInput
    userData?: UserDataUncheckedCreateNestedManyWithoutUsersInput
    sharedIngredient?: SharedIngredientUncheckedCreateNestedManyWithoutUsersInput
    sharedVersion?: SharedVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutAdminOnVersionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAdminOnVersionInput, UsersUncheckedCreateWithoutAdminOnVersionInput>
  }

  export type VersionUpsertWithoutAdminOnVersionInput = {
    update: XOR<VersionUpdateWithoutAdminOnVersionInput, VersionUncheckedUpdateWithoutAdminOnVersionInput>
    create: XOR<VersionCreateWithoutAdminOnVersionInput, VersionUncheckedCreateWithoutAdminOnVersionInput>
  }

  export type VersionUpdateWithoutAdminOnVersionInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutAdminOnVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type UsersUpsertWithoutAdminOnVersionInput = {
    update: XOR<UsersUpdateWithoutAdminOnVersionInput, UsersUncheckedUpdateWithoutAdminOnVersionInput>
    create: XOR<UsersCreateWithoutAdminOnVersionInput, UsersUncheckedCreateWithoutAdminOnVersionInput>
  }

  export type UsersUpdateWithoutAdminOnVersionInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUpdateManyWithoutUsersNestedInput
    userData?: UserDataUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutAdminOnVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groupsMods?: GroupsModsUncheckedUpdateManyWithoutUsersNestedInput
    groupsUsers?: GroupsUsersUncheckedUpdateManyWithoutUsersNestedInput
    userData?: UserDataUncheckedUpdateManyWithoutUsersNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutUsersNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type GroupsIngredientsCreateManyGroupsInput = {
    ingredientId: number
  }

  export type GroupsModsCreateManyGroupsInput = {
    userId: number
  }

  export type GroupVersionCreateManyGroupsInput = {
    versionId: number
  }

  export type GroupsUsersCreateManyGroupsInput = {
    userId: number
  }

  export type GroupsIngredientsUpdateWithoutGroupsInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutGroupsIngredientsNestedInput
  }

  export type GroupsIngredientsUncheckedUpdateWithoutGroupsInput = {
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsIngredientsUncheckedUpdateManyWithoutGroupsIngredientsInput = {
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsModsUpdateWithoutGroupsInput = {
    users?: UsersUpdateOneRequiredWithoutGroupsModsNestedInput
  }

  export type GroupsModsUncheckedUpdateWithoutGroupsInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsModsUncheckedUpdateManyWithoutGroupsModsInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupVersionUpdateWithoutGroupsInput = {
    version?: VersionUpdateOneRequiredWithoutGroupVersionNestedInput
  }

  export type GroupVersionUncheckedUpdateWithoutGroupsInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupVersionUncheckedUpdateManyWithoutGroupVersionInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsUsersUpdateWithoutGroupsInput = {
    users?: UsersUpdateOneRequiredWithoutGroupsUsersNestedInput
  }

  export type GroupsUsersUncheckedUpdateWithoutGroupsInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsUsersUncheckedUpdateManyWithoutGroupsUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsIngredientsCreateManyIngredientsInput = {
    groupId: number
  }

  export type SpecCreateManyIngredientInput = {
    id?: number
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SharedIngredientCreateManyIngredientsInput = {
    userId: number
  }

  export type GroupsIngredientsUpdateWithoutIngredientsInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsIngredientsNestedInput
  }

  export type GroupsIngredientsUncheckedUpdateWithoutIngredientsInput = {
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type SpecUpdateWithoutIngredientInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUpdateOneWithoutSpecsNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUncheckedUpdateManyWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SharedIngredientUpdateWithoutIngredientsInput = {
    users?: UsersUpdateOneRequiredWithoutSharedIngredientNestedInput
  }

  export type SharedIngredientUncheckedUpdateWithoutIngredientsInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedIngredientUncheckedUpdateManyWithoutSharedIngredientInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type VersionCreateManyRecipeInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
  }

  export type VersionUpdateWithoutRecipeInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateManyWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupVersionCreateManyVersionInput = {
    groupId: number
  }

  export type SharedVersionCreateManyVersionInput = {
    userId: number
  }

  export type SpecCreateManyVersionInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    postedById?: number | null
  }

  export type AdminOnVersionCreateManyVersionInput = {
    userId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type GroupVersionUpdateWithoutVersionInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupVersionNestedInput
  }

  export type GroupVersionUncheckedUpdateWithoutVersionInput = {
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedVersionUpdateWithoutVersionInput = {
    users?: UsersUpdateOneRequiredWithoutSharedVersionNestedInput
  }

  export type SharedVersionUncheckedUpdateWithoutVersionInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedVersionUncheckedUpdateManyWithoutSharedVersionInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SpecUpdateWithoutVersionInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUncheckedUpdateManyWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AdminOnVersionUpdateWithoutVersionInput = {
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutAdminOnVersionNestedInput
  }

  export type AdminOnVersionUncheckedUpdateWithoutVersionInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOnVersionUncheckedUpdateManyWithoutAdminOnVersionInput = {
    userId?: IntFieldUpdateOperationsInput | number
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsModsCreateManyUsersInput = {
    groupId: number
  }

  export type GroupsUsersCreateManyUsersInput = {
    groupId: number
  }

  export type UserDataCreateManyUsersInput = {
    id?: number
    userBio?: string | null
    workPlace?: string | null
    profilePicture?: string | null
  }

  export type SharedIngredientCreateManyUsersInput = {
    ingredientId: number
  }

  export type SharedVersionCreateManyUsersInput = {
    versionId: number
  }

  export type RecipeCreateManyPostedByInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
  }

  export type VersionCreateManyPostedByInput = {
    id?: number
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipeId?: number | null
  }

  export type IngredientCreateManyPostedByInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
  }

  export type SpecCreateManyPostedByInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
  }

  export type AdminOnVersionCreateManyUsersInput = {
    versionId: number
    assignedById: number
    assignedAt?: Date | string
  }

  export type GroupsModsUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsModsNestedInput
  }

  export type GroupsModsUncheckedUpdateWithoutUsersInput = {
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupsUsersUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroupsUsersNestedInput
  }

  export type GroupsUsersUncheckedUpdateWithoutUsersInput = {
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type UserDataUpdateWithoutUsersInput = {
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDataUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserDataUncheckedUpdateManyWithoutUserDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    userBio?: NullableStringFieldUpdateOperationsInput | string | null
    workPlace?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SharedIngredientUpdateWithoutUsersInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutSharedIngredientNestedInput
  }

  export type SharedIngredientUncheckedUpdateWithoutUsersInput = {
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type SharedVersionUpdateWithoutUsersInput = {
    version?: VersionUpdateOneRequiredWithoutSharedVersionNestedInput
  }

  export type SharedVersionUncheckedUpdateWithoutUsersInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type RecipeUpdateWithoutPostedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateManyWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionUpdateWithoutPostedByInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groupVersion?: GroupVersionUncheckedUpdateManyWithoutVersionNestedInput
    sharedVersion?: SharedVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
    adminOnVersion?: AdminOnVersionUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type IngredientUpdateWithoutPostedByInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groupsIngredients?: GroupsIngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groupsIngredients?: GroupsIngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    sharedIngredient?: SharedIngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpecUpdateWithoutPostedByInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    version?: VersionUpdateOneWithoutSpecsNestedInput
  }

  export type SpecUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AdminOnVersionUpdateWithoutUsersInput = {
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneRequiredWithoutAdminOnVersionNestedInput
  }

  export type AdminOnVersionUncheckedUpdateWithoutUsersInput = {
    versionId?: IntFieldUpdateOperationsInput | number
    assignedById?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}