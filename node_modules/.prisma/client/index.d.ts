
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Groups
 * 
 */
export type Groups = {
  id: number
  group_name: string
  date_created: Date
}

/**
 * Model Groups_Ingredients
 * 
 */
export type Groups_Ingredients = {
  group_id: number
  ingredient_id: number
}

/**
 * Model groups_mods
 * 
 */
export type groups_mods = {
  user_id: number
  group_id: number
}

/**
 * Model Group_Version
 * 
 */
export type Group_Version = {
  groupId: number
  versionId: number
}

/**
 * Model groups_users
 * 
 */
export type groups_users = {
  user_id: number
  group_id: number
}

/**
 * Model Ingredient
 * 
 */
export type Ingredient = {
  id: number
  date_created: Date
  name: string
  amount: number | null
  unit: string | null
  price: Prisma.Decimal | null
  source: string | null
  postedById: number | null
}

/**
 * Model Spec
 * 
 */
export type Spec = {
  id: number
  ingredientId: number | null
  order: number | null
  amount: number | null
  unit: string | null
  versionId: number | null
  postedById: number | null
}

/**
 * Model Recipe
 * 
 */
export type Recipe = {
  id: number
  createdAt: Date
  name: string
  origin: string
  history: string | null
  postedById: number | null
}

/**
 * Model Version
 * 
 */
export type Version = {
  id: number
  versionName: string
  postedById: number | null
  instructions: string | null
  glassware: string | null
  ice: string | null
  recipeId: number | null
}

/**
 * Model user_data
 * 
 */
export type user_data = {
  id: number
  user_id: number | null
  user_bio: string | null
  work_place: string | null
  profile_picture: string | null
}

/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  user_name: string
  first_name: string | null
  last_name: string | null
  date_joined: Date
  email: string
  password: string
}

/**
 * Model User_Ingredient
 * 
 */
export type User_Ingredient = {
  userId: number
  ingredientId: number
}

/**
 * Model UserVersion
 * 
 */
export type UserVersion = {
  userId: number
  versionId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Groups
 * const groups = await prisma.groups.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Groups
   * const groups = await prisma.groups.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.groups`: Exposes CRUD operations for the **Groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.GroupsDelegate<GlobalReject>;

  /**
   * `prisma.groups_Ingredients`: Exposes CRUD operations for the **Groups_Ingredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_Ingredients
    * const groups_Ingredients = await prisma.groups_Ingredients.findMany()
    * ```
    */
  get groups_Ingredients(): Prisma.Groups_IngredientsDelegate<GlobalReject>;

  /**
   * `prisma.groups_mods`: Exposes CRUD operations for the **groups_mods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_mods
    * const groups_mods = await prisma.groups_mods.findMany()
    * ```
    */
  get groups_mods(): Prisma.groups_modsDelegate<GlobalReject>;

  /**
   * `prisma.group_Version`: Exposes CRUD operations for the **Group_Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Group_Versions
    * const group_Versions = await prisma.group_Version.findMany()
    * ```
    */
  get group_Version(): Prisma.Group_VersionDelegate<GlobalReject>;

  /**
   * `prisma.groups_users`: Exposes CRUD operations for the **groups_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_users
    * const groups_users = await prisma.groups_users.findMany()
    * ```
    */
  get groups_users(): Prisma.groups_usersDelegate<GlobalReject>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<GlobalReject>;

  /**
   * `prisma.spec`: Exposes CRUD operations for the **Spec** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specs
    * const specs = await prisma.spec.findMany()
    * ```
    */
  get spec(): Prisma.SpecDelegate<GlobalReject>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<GlobalReject>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<GlobalReject>;

  /**
   * `prisma.user_data`: Exposes CRUD operations for the **user_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_data
    * const user_data = await prisma.user_data.findMany()
    * ```
    */
  get user_data(): Prisma.user_dataDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.user_Ingredient`: Exposes CRUD operations for the **User_Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_Ingredients
    * const user_Ingredients = await prisma.user_Ingredient.findMany()
    * ```
    */
  get user_Ingredient(): Prisma.User_IngredientDelegate<GlobalReject>;

  /**
   * `prisma.userVersion`: Exposes CRUD operations for the **UserVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserVersions
    * const userVersions = await prisma.userVersion.findMany()
    * ```
    */
  get userVersion(): Prisma.UserVersionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Groups: 'Groups',
    Groups_Ingredients: 'Groups_Ingredients',
    groups_mods: 'groups_mods',
    Group_Version: 'Group_Version',
    groups_users: 'groups_users',
    Ingredient: 'Ingredient',
    Spec: 'Spec',
    Recipe: 'Recipe',
    Version: 'Version',
    user_data: 'user_data',
    Users: 'Users',
    User_Ingredient: 'User_Ingredient',
    UserVersion: 'UserVersion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GroupsCountOutputType
   */


  export type GroupsCountOutputType = {
    groups_ingredients: number
    groups_mods: number
    group_version: number
    groups_users: number
  }

  export type GroupsCountOutputTypeSelect = {
    groups_ingredients?: boolean
    groups_mods?: boolean
    group_version?: boolean
    groups_users?: boolean
  }

  export type GroupsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GroupsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GroupsCountOutputType
    : S extends undefined
    ? never
    : S extends GroupsCountOutputTypeArgs
    ?'include' extends U
    ? GroupsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GroupsCountOutputType ? GroupsCountOutputType[P] : never
  } 
    : GroupsCountOutputType
  : GroupsCountOutputType




  // Custom InputTypes

  /**
   * GroupsCountOutputType without action
   */
  export type GroupsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupsCountOutputType
     * 
    **/
    select?: GroupsCountOutputTypeSelect | null
  }



  /**
   * Count Type IngredientCountOutputType
   */


  export type IngredientCountOutputType = {
    groups_ingredients: number
    spec: number
    user_ingredient: number
  }

  export type IngredientCountOutputTypeSelect = {
    groups_ingredients?: boolean
    spec?: boolean
    user_ingredient?: boolean
  }

  export type IngredientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | IngredientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? IngredientCountOutputType
    : S extends undefined
    ? never
    : S extends IngredientCountOutputTypeArgs
    ?'include' extends U
    ? IngredientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof IngredientCountOutputType ? IngredientCountOutputType[P] : never
  } 
    : IngredientCountOutputType
  : IngredientCountOutputType




  // Custom InputTypes

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     * 
    **/
    select?: IngredientCountOutputTypeSelect | null
  }



  /**
   * Count Type RecipeCountOutputType
   */


  export type RecipeCountOutputType = {
    version: number
  }

  export type RecipeCountOutputTypeSelect = {
    version?: boolean
  }

  export type RecipeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RecipeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RecipeCountOutputType
    : S extends undefined
    ? never
    : S extends RecipeCountOutputTypeArgs
    ?'include' extends U
    ? RecipeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RecipeCountOutputType ? RecipeCountOutputType[P] : never
  } 
    : RecipeCountOutputType
  : RecipeCountOutputType




  // Custom InputTypes

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     * 
    **/
    select?: RecipeCountOutputTypeSelect | null
  }



  /**
   * Count Type VersionCountOutputType
   */


  export type VersionCountOutputType = {
    group_version: number
    user_version: number
    specs: number
  }

  export type VersionCountOutputTypeSelect = {
    group_version?: boolean
    user_version?: boolean
    specs?: boolean
  }

  export type VersionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VersionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VersionCountOutputType
    : S extends undefined
    ? never
    : S extends VersionCountOutputTypeArgs
    ?'include' extends U
    ? VersionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VersionCountOutputType ? VersionCountOutputType[P] : never
  } 
    : VersionCountOutputType
  : VersionCountOutputType




  // Custom InputTypes

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VersionCountOutputType
     * 
    **/
    select?: VersionCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    groups_mods: number
    groups_users: number
    user_data: number
    user_ingredient: number
    user_version: number
    recipes: number
    version: number
    ingredients: number
    spec: number
  }

  export type UsersCountOutputTypeSelect = {
    groups_mods?: boolean
    groups_users?: boolean
    user_data?: boolean
    user_ingredient?: boolean
    user_version?: boolean
    recipes?: boolean
    version?: boolean
    ingredients?: boolean
    spec?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupsSumAggregateOutputType = {
    id: number | null
  }

  export type GroupsMinAggregateOutputType = {
    id: number | null
    group_name: string | null
    date_created: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: number | null
    group_name: string | null
    date_created: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    group_name: number
    date_created: number
    _all: number
  }


  export type GroupsAvgAggregateInputType = {
    id?: true
  }

  export type GroupsSumAggregateInputType = {
    id?: true
  }

  export type GroupsMinAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which Groups to aggregate.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs = {
    where?: GroupsWhereInput
    orderBy?: Enumerable<GroupsOrderByWithAggregationInput>
    by: Array<GroupsScalarFieldEnum>
    having?: GroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _avg?: GroupsAvgAggregateInputType
    _sum?: GroupsSumAggregateInputType
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    id: number
    group_name: string
    date_created: Date
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsSelect = {
    id?: boolean
    group_name?: boolean
    date_created?: boolean
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    groups_mods?: boolean | groups_modsFindManyArgs
    group_version?: boolean | Group_VersionFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsInclude = {
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    groups_mods?: boolean | groups_modsFindManyArgs
    group_version?: boolean | Group_VersionFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsGetPayload<
    S extends boolean | null | undefined | GroupsArgs,
    U = keyof S
      > = S extends true
        ? Groups
    : S extends undefined
    ? never
    : S extends GroupsArgs | GroupsFindManyArgs
    ?'include' extends U
    ? Groups  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'group_version' ? Array < Group_VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'group_version' ? Array < Group_VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Groups ? Groups[P] : never
  } 
    : Groups
  : Groups


  type GroupsCountArgs = Merge<
    Omit<GroupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }
  >

  export interface GroupsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups that matches the filter.
     * @param {GroupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupsFindManyArgs>(
      args?: SelectSubset<T, GroupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Groups>>, PrismaPromise<Array<GroupsGetPayload<T>>>>

    /**
     * Create a Groups.
     * @param {GroupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends GroupsCreateArgs>(
      args: SelectSubset<T, GroupsCreateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Create many Groups.
     *     @param {GroupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsCreateManyArgs>(
      args?: SelectSubset<T, GroupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {GroupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends GroupsDeleteArgs>(
      args: SelectSubset<T, GroupsDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Update one Groups.
     * @param {GroupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsUpdateArgs>(
      args: SelectSubset<T, GroupsUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Delete zero or more Groups.
     * @param {GroupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsUpdateManyArgs>(
      args: SelectSubset<T, GroupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {GroupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsUpsertArgs>(
      args: SelectSubset<T, GroupsUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find one Groups that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsFindUniqueOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find the first Groups that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupsCountArgs>(
      args?: Subset<T, GroupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups_ingredients<T extends Groups_IngredientsFindManyArgs = {}>(args?: Subset<T, Groups_IngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>;

    groups_mods<T extends groups_modsFindManyArgs = {}>(args?: Subset<T, groups_modsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>;

    group_version<T extends Group_VersionFindManyArgs = {}>(args?: Subset<T, Group_VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Group_Version>>, PrismaPromise<Array<Group_VersionGetPayload<T>>>>;

    groups_users<T extends groups_usersFindManyArgs = {}>(args?: Subset<T, groups_usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups base type for findUnique actions
   */
  export type GroupsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups: findUnique
   */
  export interface GroupsFindUniqueArgs extends GroupsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups base type for findFirst actions
   */
  export type GroupsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     * 
    **/
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }

  /**
   * Groups: findFirst
   */
  export interface GroupsFindFirstArgs extends GroupsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups findMany
   */
  export type GroupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Groups create
   */
  export type GroupsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to create a Groups.
     * 
    **/
    data: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
  }


  /**
   * Groups createMany
   */
  export type GroupsCreateManyArgs = {
    /**
     * The data used to create many Groups.
     * 
    **/
    data: Enumerable<GroupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups update
   */
  export type GroupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to update a Groups.
     * 
    **/
    data: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
    /**
     * Choose, which Groups to update.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups updateMany
   */
  export type GroupsUpdateManyArgs = {
    /**
     * The data used to update Groups.
     * 
    **/
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups upsert
   */
  export type GroupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The filter to search for the Groups to update in case it exists.
     * 
    **/
    where: GroupsWhereUniqueInput
    /**
     * In case the Groups found by the `where` argument doesn't exist, create a new Groups with this data.
     * 
    **/
    create: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
    /**
     * In case the Groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
  }


  /**
   * Groups delete
   */
  export type GroupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter which Groups to delete.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups deleteMany
   */
  export type GroupsDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups: findUniqueOrThrow
   */
  export type GroupsFindUniqueOrThrowArgs = GroupsFindUniqueArgsBase
      

  /**
   * Groups: findFirstOrThrow
   */
  export type GroupsFindFirstOrThrowArgs = GroupsFindFirstArgsBase
      

  /**
   * Groups without action
   */
  export type GroupsArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
  }



  /**
   * Model Groups_Ingredients
   */


  export type AggregateGroups_Ingredients = {
    _count: Groups_IngredientsCountAggregateOutputType | null
    _avg: Groups_IngredientsAvgAggregateOutputType | null
    _sum: Groups_IngredientsSumAggregateOutputType | null
    _min: Groups_IngredientsMinAggregateOutputType | null
    _max: Groups_IngredientsMaxAggregateOutputType | null
  }

  export type Groups_IngredientsAvgAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsSumAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsMinAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsMaxAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsCountAggregateOutputType = {
    group_id: number
    ingredient_id: number
    _all: number
  }


  export type Groups_IngredientsAvgAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsSumAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsMinAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsMaxAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsCountAggregateInputType = {
    group_id?: true
    ingredient_id?: true
    _all?: true
  }

  export type Groups_IngredientsAggregateArgs = {
    /**
     * Filter which Groups_Ingredients to aggregate.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups_Ingredients
    **/
    _count?: true | Groups_IngredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_IngredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_IngredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_IngredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_IngredientsMaxAggregateInputType
  }

  export type GetGroups_IngredientsAggregateType<T extends Groups_IngredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_Ingredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_Ingredients[P]>
      : GetScalarType<T[P], AggregateGroups_Ingredients[P]>
  }




  export type Groups_IngredientsGroupByArgs = {
    where?: Groups_IngredientsWhereInput
    orderBy?: Enumerable<Groups_IngredientsOrderByWithAggregationInput>
    by: Array<Groups_IngredientsScalarFieldEnum>
    having?: Groups_IngredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_IngredientsCountAggregateInputType | true
    _avg?: Groups_IngredientsAvgAggregateInputType
    _sum?: Groups_IngredientsSumAggregateInputType
    _min?: Groups_IngredientsMinAggregateInputType
    _max?: Groups_IngredientsMaxAggregateInputType
  }


  export type Groups_IngredientsGroupByOutputType = {
    group_id: number
    ingredient_id: number
    _count: Groups_IngredientsCountAggregateOutputType | null
    _avg: Groups_IngredientsAvgAggregateOutputType | null
    _sum: Groups_IngredientsSumAggregateOutputType | null
    _min: Groups_IngredientsMinAggregateOutputType | null
    _max: Groups_IngredientsMaxAggregateOutputType | null
  }

  type GetGroups_IngredientsGroupByPayload<T extends Groups_IngredientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_IngredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_IngredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_IngredientsGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_IngredientsGroupByOutputType[P]>
        }
      >
    >


  export type Groups_IngredientsSelect = {
    group_id?: boolean
    ingredient_id?: boolean
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientArgs
  }

  export type Groups_IngredientsInclude = {
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientArgs
  }

  export type Groups_IngredientsGetPayload<
    S extends boolean | null | undefined | Groups_IngredientsArgs,
    U = keyof S
      > = S extends true
        ? Groups_Ingredients
    : S extends undefined
    ? never
    : S extends Groups_IngredientsArgs | Groups_IngredientsFindManyArgs
    ?'include' extends U
    ? Groups_Ingredients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Groups_Ingredients ? Groups_Ingredients[P] : never
  } 
    : Groups_Ingredients
  : Groups_Ingredients


  type Groups_IngredientsCountArgs = Merge<
    Omit<Groups_IngredientsFindManyArgs, 'select' | 'include'> & {
      select?: Groups_IngredientsCountAggregateInputType | true
    }
  >

  export interface Groups_IngredientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_Ingredients that matches the filter.
     * @param {Groups_IngredientsFindUniqueArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Groups_IngredientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Groups_IngredientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups_Ingredients'> extends True ? CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients | null >, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T> | null >>

    /**
     * Find the first Groups_Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindFirstArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Groups_IngredientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Groups_IngredientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups_Ingredients'> extends True ? CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients | null >, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T> | null >>

    /**
     * Find zero or more Groups_Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findMany()
     * 
     * // Get first 10 Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const groups_IngredientsWithGroup_idOnly = await prisma.groups_Ingredients.findMany({ select: { group_id: true } })
     * 
    **/
    findMany<T extends Groups_IngredientsFindManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>

    /**
     * Create a Groups_Ingredients.
     * @param {Groups_IngredientsCreateArgs} args - Arguments to create a Groups_Ingredients.
     * @example
     * // Create one Groups_Ingredients
     * const Groups_Ingredients = await prisma.groups_Ingredients.create({
     *   data: {
     *     // ... data to create a Groups_Ingredients
     *   }
     * })
     * 
    **/
    create<T extends Groups_IngredientsCreateArgs>(
      args: SelectSubset<T, Groups_IngredientsCreateArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Create many Groups_Ingredients.
     *     @param {Groups_IngredientsCreateManyArgs} args - Arguments to create many Groups_Ingredients.
     *     @example
     *     // Create many Groups_Ingredients
     *     const groups_Ingredients = await prisma.groups_Ingredients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Groups_IngredientsCreateManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_Ingredients.
     * @param {Groups_IngredientsDeleteArgs} args - Arguments to delete one Groups_Ingredients.
     * @example
     * // Delete one Groups_Ingredients
     * const Groups_Ingredients = await prisma.groups_Ingredients.delete({
     *   where: {
     *     // ... filter to delete one Groups_Ingredients
     *   }
     * })
     * 
    **/
    delete<T extends Groups_IngredientsDeleteArgs>(
      args: SelectSubset<T, Groups_IngredientsDeleteArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Update one Groups_Ingredients.
     * @param {Groups_IngredientsUpdateArgs} args - Arguments to update one Groups_Ingredients.
     * @example
     * // Update one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Groups_IngredientsUpdateArgs>(
      args: SelectSubset<T, Groups_IngredientsUpdateArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Delete zero or more Groups_Ingredients.
     * @param {Groups_IngredientsDeleteManyArgs} args - Arguments to filter Groups_Ingredients to delete.
     * @example
     * // Delete a few Groups_Ingredients
     * const { count } = await prisma.groups_Ingredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Groups_IngredientsDeleteManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Groups_IngredientsUpdateManyArgs>(
      args: SelectSubset<T, Groups_IngredientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_Ingredients.
     * @param {Groups_IngredientsUpsertArgs} args - Arguments to update or create a Groups_Ingredients.
     * @example
     * // Update or create a Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.upsert({
     *   create: {
     *     // ... data to create a Groups_Ingredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_Ingredients we want to update
     *   }
     * })
    **/
    upsert<T extends Groups_IngredientsUpsertArgs>(
      args: SelectSubset<T, Groups_IngredientsUpsertArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Find one Groups_Ingredients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Groups_IngredientsFindUniqueOrThrowArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Groups_IngredientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Find the first Groups_Ingredients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindFirstOrThrowArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Groups_IngredientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Count the number of Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsCountArgs} args - Arguments to filter Groups_Ingredients to count.
     * @example
     * // Count the number of Groups_Ingredients
     * const count = await prisma.groups_Ingredients.count({
     *   where: {
     *     // ... the filter for the Groups_Ingredients we want to count
     *   }
     * })
    **/
    count<T extends Groups_IngredientsCountArgs>(
      args?: Subset<T, Groups_IngredientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_IngredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_IngredientsAggregateArgs>(args: Subset<T, Groups_IngredientsAggregateArgs>): PrismaPromise<GetGroups_IngredientsAggregateType<T>>

    /**
     * Group by Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_IngredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_IngredientsGroupByArgs['orderBy'] }
        : { orderBy?: Groups_IngredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_IngredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_IngredientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups_Ingredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Groups_IngredientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    ingredients<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups_Ingredients base type for findUnique actions
   */
  export type Groups_IngredientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }

  /**
   * Groups_Ingredients: findUnique
   */
  export interface Groups_IngredientsFindUniqueArgs extends Groups_IngredientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups_Ingredients base type for findFirst actions
   */
  export type Groups_IngredientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups_Ingredients.
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups_Ingredients.
     * 
    **/
    distinct?: Enumerable<Groups_IngredientsScalarFieldEnum>
  }

  /**
   * Groups_Ingredients: findFirst
   */
  export interface Groups_IngredientsFindFirstArgs extends Groups_IngredientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups_Ingredients findMany
   */
  export type Groups_IngredientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups_Ingredients.
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_IngredientsScalarFieldEnum>
  }


  /**
   * Groups_Ingredients create
   */
  export type Groups_IngredientsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The data needed to create a Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsCreateInput, Groups_IngredientsUncheckedCreateInput>
  }


  /**
   * Groups_Ingredients createMany
   */
  export type Groups_IngredientsCreateManyArgs = {
    /**
     * The data used to create many Groups_Ingredients.
     * 
    **/
    data: Enumerable<Groups_IngredientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups_Ingredients update
   */
  export type Groups_IngredientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The data needed to update a Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsUpdateInput, Groups_IngredientsUncheckedUpdateInput>
    /**
     * Choose, which Groups_Ingredients to update.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }


  /**
   * Groups_Ingredients updateMany
   */
  export type Groups_IngredientsUpdateManyArgs = {
    /**
     * The data used to update Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyInput>
    /**
     * Filter which Groups_Ingredients to update
     * 
    **/
    where?: Groups_IngredientsWhereInput
  }


  /**
   * Groups_Ingredients upsert
   */
  export type Groups_IngredientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The filter to search for the Groups_Ingredients to update in case it exists.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
    /**
     * In case the Groups_Ingredients found by the `where` argument doesn't exist, create a new Groups_Ingredients with this data.
     * 
    **/
    create: XOR<Groups_IngredientsCreateInput, Groups_IngredientsUncheckedCreateInput>
    /**
     * In case the Groups_Ingredients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Groups_IngredientsUpdateInput, Groups_IngredientsUncheckedUpdateInput>
  }


  /**
   * Groups_Ingredients delete
   */
  export type Groups_IngredientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter which Groups_Ingredients to delete.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }


  /**
   * Groups_Ingredients deleteMany
   */
  export type Groups_IngredientsDeleteManyArgs = {
    /**
     * Filter which Groups_Ingredients to delete
     * 
    **/
    where?: Groups_IngredientsWhereInput
  }


  /**
   * Groups_Ingredients: findUniqueOrThrow
   */
  export type Groups_IngredientsFindUniqueOrThrowArgs = Groups_IngredientsFindUniqueArgsBase
      

  /**
   * Groups_Ingredients: findFirstOrThrow
   */
  export type Groups_IngredientsFindFirstOrThrowArgs = Groups_IngredientsFindFirstArgsBase
      

  /**
   * Groups_Ingredients without action
   */
  export type Groups_IngredientsArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
  }



  /**
   * Model groups_mods
   */


  export type AggregateGroups_mods = {
    _count: Groups_modsCountAggregateOutputType | null
    _avg: Groups_modsAvgAggregateOutputType | null
    _sum: Groups_modsSumAggregateOutputType | null
    _min: Groups_modsMinAggregateOutputType | null
    _max: Groups_modsMaxAggregateOutputType | null
  }

  export type Groups_modsAvgAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsSumAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsMinAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsMaxAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsCountAggregateOutputType = {
    user_id: number
    group_id: number
    _all: number
  }


  export type Groups_modsAvgAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsSumAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsMinAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsMaxAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsCountAggregateInputType = {
    user_id?: true
    group_id?: true
    _all?: true
  }

  export type Groups_modsAggregateArgs = {
    /**
     * Filter which groups_mods to aggregate.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups_mods
    **/
    _count?: true | Groups_modsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_modsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_modsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_modsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_modsMaxAggregateInputType
  }

  export type GetGroups_modsAggregateType<T extends Groups_modsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_mods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_mods[P]>
      : GetScalarType<T[P], AggregateGroups_mods[P]>
  }




  export type Groups_modsGroupByArgs = {
    where?: groups_modsWhereInput
    orderBy?: Enumerable<groups_modsOrderByWithAggregationInput>
    by: Array<Groups_modsScalarFieldEnum>
    having?: groups_modsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_modsCountAggregateInputType | true
    _avg?: Groups_modsAvgAggregateInputType
    _sum?: Groups_modsSumAggregateInputType
    _min?: Groups_modsMinAggregateInputType
    _max?: Groups_modsMaxAggregateInputType
  }


  export type Groups_modsGroupByOutputType = {
    user_id: number
    group_id: number
    _count: Groups_modsCountAggregateOutputType | null
    _avg: Groups_modsAvgAggregateOutputType | null
    _sum: Groups_modsSumAggregateOutputType | null
    _min: Groups_modsMinAggregateOutputType | null
    _max: Groups_modsMaxAggregateOutputType | null
  }

  type GetGroups_modsGroupByPayload<T extends Groups_modsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_modsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_modsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_modsGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_modsGroupByOutputType[P]>
        }
      >
    >


  export type groups_modsSelect = {
    user_id?: boolean
    group_id?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type groups_modsInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type groups_modsGetPayload<
    S extends boolean | null | undefined | groups_modsArgs,
    U = keyof S
      > = S extends true
        ? groups_mods
    : S extends undefined
    ? never
    : S extends groups_modsArgs | groups_modsFindManyArgs
    ?'include' extends U
    ? groups_mods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof groups_mods ? groups_mods[P] : never
  } 
    : groups_mods
  : groups_mods


  type groups_modsCountArgs = Merge<
    Omit<groups_modsFindManyArgs, 'select' | 'include'> & {
      select?: Groups_modsCountAggregateInputType | true
    }
  >

  export interface groups_modsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_mods that matches the filter.
     * @param {groups_modsFindUniqueArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groups_modsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groups_modsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups_mods'> extends True ? CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>> : CheckSelect<T, Prisma__groups_modsClient<groups_mods | null >, Prisma__groups_modsClient<groups_modsGetPayload<T> | null >>

    /**
     * Find the first Groups_mods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindFirstArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groups_modsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groups_modsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups_mods'> extends True ? CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>> : CheckSelect<T, Prisma__groups_modsClient<groups_mods | null >, Prisma__groups_modsClient<groups_modsGetPayload<T> | null >>

    /**
     * Find zero or more Groups_mods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_mods
     * const groups_mods = await prisma.groups_mods.findMany()
     * 
     * // Get first 10 Groups_mods
     * const groups_mods = await prisma.groups_mods.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const groups_modsWithUser_idOnly = await prisma.groups_mods.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends groups_modsFindManyArgs>(
      args?: SelectSubset<T, groups_modsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>

    /**
     * Create a Groups_mods.
     * @param {groups_modsCreateArgs} args - Arguments to create a Groups_mods.
     * @example
     * // Create one Groups_mods
     * const Groups_mods = await prisma.groups_mods.create({
     *   data: {
     *     // ... data to create a Groups_mods
     *   }
     * })
     * 
    **/
    create<T extends groups_modsCreateArgs>(
      args: SelectSubset<T, groups_modsCreateArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Create many Groups_mods.
     *     @param {groups_modsCreateManyArgs} args - Arguments to create many Groups_mods.
     *     @example
     *     // Create many Groups_mods
     *     const groups_mods = await prisma.groups_mods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groups_modsCreateManyArgs>(
      args?: SelectSubset<T, groups_modsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_mods.
     * @param {groups_modsDeleteArgs} args - Arguments to delete one Groups_mods.
     * @example
     * // Delete one Groups_mods
     * const Groups_mods = await prisma.groups_mods.delete({
     *   where: {
     *     // ... filter to delete one Groups_mods
     *   }
     * })
     * 
    **/
    delete<T extends groups_modsDeleteArgs>(
      args: SelectSubset<T, groups_modsDeleteArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Update one Groups_mods.
     * @param {groups_modsUpdateArgs} args - Arguments to update one Groups_mods.
     * @example
     * // Update one Groups_mods
     * const groups_mods = await prisma.groups_mods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groups_modsUpdateArgs>(
      args: SelectSubset<T, groups_modsUpdateArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Delete zero or more Groups_mods.
     * @param {groups_modsDeleteManyArgs} args - Arguments to filter Groups_mods to delete.
     * @example
     * // Delete a few Groups_mods
     * const { count } = await prisma.groups_mods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groups_modsDeleteManyArgs>(
      args?: SelectSubset<T, groups_modsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_mods
     * const groups_mods = await prisma.groups_mods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groups_modsUpdateManyArgs>(
      args: SelectSubset<T, groups_modsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_mods.
     * @param {groups_modsUpsertArgs} args - Arguments to update or create a Groups_mods.
     * @example
     * // Update or create a Groups_mods
     * const groups_mods = await prisma.groups_mods.upsert({
     *   create: {
     *     // ... data to create a Groups_mods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_mods we want to update
     *   }
     * })
    **/
    upsert<T extends groups_modsUpsertArgs>(
      args: SelectSubset<T, groups_modsUpsertArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Find one Groups_mods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {groups_modsFindUniqueOrThrowArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groups_modsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, groups_modsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Find the first Groups_mods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindFirstOrThrowArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groups_modsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, groups_modsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Count the number of Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsCountArgs} args - Arguments to filter Groups_mods to count.
     * @example
     * // Count the number of Groups_mods
     * const count = await prisma.groups_mods.count({
     *   where: {
     *     // ... the filter for the Groups_mods we want to count
     *   }
     * })
    **/
    count<T extends groups_modsCountArgs>(
      args?: Subset<T, groups_modsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_modsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_modsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_modsAggregateArgs>(args: Subset<T, Groups_modsAggregateArgs>): PrismaPromise<GetGroups_modsAggregateType<T>>

    /**
     * Group by Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_modsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_modsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_modsGroupByArgs['orderBy'] }
        : { orderBy?: Groups_modsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_modsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_modsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for groups_mods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groups_modsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * groups_mods base type for findUnique actions
   */
  export type groups_modsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }

  /**
   * groups_mods: findUnique
   */
  export interface groups_modsFindUniqueArgs extends groups_modsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_mods base type for findFirst actions
   */
  export type groups_modsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups_mods.
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups_mods.
     * 
    **/
    distinct?: Enumerable<Groups_modsScalarFieldEnum>
  }

  /**
   * groups_mods: findFirst
   */
  export interface groups_modsFindFirstArgs extends groups_modsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_mods findMany
   */
  export type groups_modsFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups_mods.
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_modsScalarFieldEnum>
  }


  /**
   * groups_mods create
   */
  export type groups_modsCreateArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The data needed to create a groups_mods.
     * 
    **/
    data: XOR<groups_modsCreateInput, groups_modsUncheckedCreateInput>
  }


  /**
   * groups_mods createMany
   */
  export type groups_modsCreateManyArgs = {
    /**
     * The data used to create many groups_mods.
     * 
    **/
    data: Enumerable<groups_modsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups_mods update
   */
  export type groups_modsUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The data needed to update a groups_mods.
     * 
    **/
    data: XOR<groups_modsUpdateInput, groups_modsUncheckedUpdateInput>
    /**
     * Choose, which groups_mods to update.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }


  /**
   * groups_mods updateMany
   */
  export type groups_modsUpdateManyArgs = {
    /**
     * The data used to update groups_mods.
     * 
    **/
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyInput>
    /**
     * Filter which groups_mods to update
     * 
    **/
    where?: groups_modsWhereInput
  }


  /**
   * groups_mods upsert
   */
  export type groups_modsUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The filter to search for the groups_mods to update in case it exists.
     * 
    **/
    where: groups_modsWhereUniqueInput
    /**
     * In case the groups_mods found by the `where` argument doesn't exist, create a new groups_mods with this data.
     * 
    **/
    create: XOR<groups_modsCreateInput, groups_modsUncheckedCreateInput>
    /**
     * In case the groups_mods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groups_modsUpdateInput, groups_modsUncheckedUpdateInput>
  }


  /**
   * groups_mods delete
   */
  export type groups_modsDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter which groups_mods to delete.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }


  /**
   * groups_mods deleteMany
   */
  export type groups_modsDeleteManyArgs = {
    /**
     * Filter which groups_mods to delete
     * 
    **/
    where?: groups_modsWhereInput
  }


  /**
   * groups_mods: findUniqueOrThrow
   */
  export type groups_modsFindUniqueOrThrowArgs = groups_modsFindUniqueArgsBase
      

  /**
   * groups_mods: findFirstOrThrow
   */
  export type groups_modsFindFirstOrThrowArgs = groups_modsFindFirstArgsBase
      

  /**
   * groups_mods without action
   */
  export type groups_modsArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
  }



  /**
   * Model Group_Version
   */


  export type AggregateGroup_Version = {
    _count: Group_VersionCountAggregateOutputType | null
    _avg: Group_VersionAvgAggregateOutputType | null
    _sum: Group_VersionSumAggregateOutputType | null
    _min: Group_VersionMinAggregateOutputType | null
    _max: Group_VersionMaxAggregateOutputType | null
  }

  export type Group_VersionAvgAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type Group_VersionSumAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type Group_VersionMinAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type Group_VersionMaxAggregateOutputType = {
    groupId: number | null
    versionId: number | null
  }

  export type Group_VersionCountAggregateOutputType = {
    groupId: number
    versionId: number
    _all: number
  }


  export type Group_VersionAvgAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type Group_VersionSumAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type Group_VersionMinAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type Group_VersionMaxAggregateInputType = {
    groupId?: true
    versionId?: true
  }

  export type Group_VersionCountAggregateInputType = {
    groupId?: true
    versionId?: true
    _all?: true
  }

  export type Group_VersionAggregateArgs = {
    /**
     * Filter which Group_Version to aggregate.
     * 
    **/
    where?: Group_VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Group_Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<Group_VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Group_VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Group_Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Group_Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Group_Versions
    **/
    _count?: true | Group_VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Group_VersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Group_VersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Group_VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Group_VersionMaxAggregateInputType
  }

  export type GetGroup_VersionAggregateType<T extends Group_VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup_Version]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup_Version[P]>
      : GetScalarType<T[P], AggregateGroup_Version[P]>
  }




  export type Group_VersionGroupByArgs = {
    where?: Group_VersionWhereInput
    orderBy?: Enumerable<Group_VersionOrderByWithAggregationInput>
    by: Array<Group_VersionScalarFieldEnum>
    having?: Group_VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Group_VersionCountAggregateInputType | true
    _avg?: Group_VersionAvgAggregateInputType
    _sum?: Group_VersionSumAggregateInputType
    _min?: Group_VersionMinAggregateInputType
    _max?: Group_VersionMaxAggregateInputType
  }


  export type Group_VersionGroupByOutputType = {
    groupId: number
    versionId: number
    _count: Group_VersionCountAggregateOutputType | null
    _avg: Group_VersionAvgAggregateOutputType | null
    _sum: Group_VersionSumAggregateOutputType | null
    _min: Group_VersionMinAggregateOutputType | null
    _max: Group_VersionMaxAggregateOutputType | null
  }

  type GetGroup_VersionGroupByPayload<T extends Group_VersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Group_VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Group_VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Group_VersionGroupByOutputType[P]>
            : GetScalarType<T[P], Group_VersionGroupByOutputType[P]>
        }
      >
    >


  export type Group_VersionSelect = {
    groupId?: boolean
    versionId?: boolean
    groups?: boolean | GroupsArgs
    version?: boolean | VersionArgs
  }

  export type Group_VersionInclude = {
    groups?: boolean | GroupsArgs
    version?: boolean | VersionArgs
  }

  export type Group_VersionGetPayload<
    S extends boolean | null | undefined | Group_VersionArgs,
    U = keyof S
      > = S extends true
        ? Group_Version
    : S extends undefined
    ? never
    : S extends Group_VersionArgs | Group_VersionFindManyArgs
    ?'include' extends U
    ? Group_Version  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Group_Version ? Group_Version[P] : never
  } 
    : Group_Version
  : Group_Version


  type Group_VersionCountArgs = Merge<
    Omit<Group_VersionFindManyArgs, 'select' | 'include'> & {
      select?: Group_VersionCountAggregateInputType | true
    }
  >

  export interface Group_VersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Group_Version that matches the filter.
     * @param {Group_VersionFindUniqueArgs} args - Arguments to find a Group_Version
     * @example
     * // Get one Group_Version
     * const group_Version = await prisma.group_Version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Group_VersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Group_VersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Group_Version'> extends True ? CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>> : CheckSelect<T, Prisma__Group_VersionClient<Group_Version | null >, Prisma__Group_VersionClient<Group_VersionGetPayload<T> | null >>

    /**
     * Find the first Group_Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionFindFirstArgs} args - Arguments to find a Group_Version
     * @example
     * // Get one Group_Version
     * const group_Version = await prisma.group_Version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Group_VersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Group_VersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Group_Version'> extends True ? CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>> : CheckSelect<T, Prisma__Group_VersionClient<Group_Version | null >, Prisma__Group_VersionClient<Group_VersionGetPayload<T> | null >>

    /**
     * Find zero or more Group_Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Group_Versions
     * const group_Versions = await prisma.group_Version.findMany()
     * 
     * // Get first 10 Group_Versions
     * const group_Versions = await prisma.group_Version.findMany({ take: 10 })
     * 
     * // Only select the `groupId`
     * const group_VersionWithGroupIdOnly = await prisma.group_Version.findMany({ select: { groupId: true } })
     * 
    **/
    findMany<T extends Group_VersionFindManyArgs>(
      args?: SelectSubset<T, Group_VersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Group_Version>>, PrismaPromise<Array<Group_VersionGetPayload<T>>>>

    /**
     * Create a Group_Version.
     * @param {Group_VersionCreateArgs} args - Arguments to create a Group_Version.
     * @example
     * // Create one Group_Version
     * const Group_Version = await prisma.group_Version.create({
     *   data: {
     *     // ... data to create a Group_Version
     *   }
     * })
     * 
    **/
    create<T extends Group_VersionCreateArgs>(
      args: SelectSubset<T, Group_VersionCreateArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Create many Group_Versions.
     *     @param {Group_VersionCreateManyArgs} args - Arguments to create many Group_Versions.
     *     @example
     *     // Create many Group_Versions
     *     const group_Version = await prisma.group_Version.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Group_VersionCreateManyArgs>(
      args?: SelectSubset<T, Group_VersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Group_Version.
     * @param {Group_VersionDeleteArgs} args - Arguments to delete one Group_Version.
     * @example
     * // Delete one Group_Version
     * const Group_Version = await prisma.group_Version.delete({
     *   where: {
     *     // ... filter to delete one Group_Version
     *   }
     * })
     * 
    **/
    delete<T extends Group_VersionDeleteArgs>(
      args: SelectSubset<T, Group_VersionDeleteArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Update one Group_Version.
     * @param {Group_VersionUpdateArgs} args - Arguments to update one Group_Version.
     * @example
     * // Update one Group_Version
     * const group_Version = await prisma.group_Version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Group_VersionUpdateArgs>(
      args: SelectSubset<T, Group_VersionUpdateArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Delete zero or more Group_Versions.
     * @param {Group_VersionDeleteManyArgs} args - Arguments to filter Group_Versions to delete.
     * @example
     * // Delete a few Group_Versions
     * const { count } = await prisma.group_Version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Group_VersionDeleteManyArgs>(
      args?: SelectSubset<T, Group_VersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Group_Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Group_Versions
     * const group_Version = await prisma.group_Version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Group_VersionUpdateManyArgs>(
      args: SelectSubset<T, Group_VersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Group_Version.
     * @param {Group_VersionUpsertArgs} args - Arguments to update or create a Group_Version.
     * @example
     * // Update or create a Group_Version
     * const group_Version = await prisma.group_Version.upsert({
     *   create: {
     *     // ... data to create a Group_Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group_Version we want to update
     *   }
     * })
    **/
    upsert<T extends Group_VersionUpsertArgs>(
      args: SelectSubset<T, Group_VersionUpsertArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Find one Group_Version that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Group_VersionFindUniqueOrThrowArgs} args - Arguments to find a Group_Version
     * @example
     * // Get one Group_Version
     * const group_Version = await prisma.group_Version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Group_VersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Group_VersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Find the first Group_Version that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionFindFirstOrThrowArgs} args - Arguments to find a Group_Version
     * @example
     * // Get one Group_Version
     * const group_Version = await prisma.group_Version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Group_VersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Group_VersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__Group_VersionClient<Group_Version>, Prisma__Group_VersionClient<Group_VersionGetPayload<T>>>

    /**
     * Count the number of Group_Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionCountArgs} args - Arguments to filter Group_Versions to count.
     * @example
     * // Count the number of Group_Versions
     * const count = await prisma.group_Version.count({
     *   where: {
     *     // ... the filter for the Group_Versions we want to count
     *   }
     * })
    **/
    count<T extends Group_VersionCountArgs>(
      args?: Subset<T, Group_VersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Group_VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group_Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Group_VersionAggregateArgs>(args: Subset<T, Group_VersionAggregateArgs>): PrismaPromise<GetGroup_VersionAggregateType<T>>

    /**
     * Group by Group_Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Group_VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Group_VersionGroupByArgs['orderBy'] }
        : { orderBy?: Group_VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Group_VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroup_VersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Group_Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Group_VersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Group_Version base type for findUnique actions
   */
  export type Group_VersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * Filter, which Group_Version to fetch.
     * 
    **/
    where: Group_VersionWhereUniqueInput
  }

  /**
   * Group_Version: findUnique
   */
  export interface Group_VersionFindUniqueArgs extends Group_VersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group_Version base type for findFirst actions
   */
  export type Group_VersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * Filter, which Group_Version to fetch.
     * 
    **/
    where?: Group_VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Group_Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<Group_VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Group_Versions.
     * 
    **/
    cursor?: Group_VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Group_Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Group_Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Group_Versions.
     * 
    **/
    distinct?: Enumerable<Group_VersionScalarFieldEnum>
  }

  /**
   * Group_Version: findFirst
   */
  export interface Group_VersionFindFirstArgs extends Group_VersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group_Version findMany
   */
  export type Group_VersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * Filter, which Group_Versions to fetch.
     * 
    **/
    where?: Group_VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Group_Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<Group_VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Group_Versions.
     * 
    **/
    cursor?: Group_VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Group_Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Group_Versions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Group_VersionScalarFieldEnum>
  }


  /**
   * Group_Version create
   */
  export type Group_VersionCreateArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * The data needed to create a Group_Version.
     * 
    **/
    data: XOR<Group_VersionCreateInput, Group_VersionUncheckedCreateInput>
  }


  /**
   * Group_Version createMany
   */
  export type Group_VersionCreateManyArgs = {
    /**
     * The data used to create many Group_Versions.
     * 
    **/
    data: Enumerable<Group_VersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Group_Version update
   */
  export type Group_VersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * The data needed to update a Group_Version.
     * 
    **/
    data: XOR<Group_VersionUpdateInput, Group_VersionUncheckedUpdateInput>
    /**
     * Choose, which Group_Version to update.
     * 
    **/
    where: Group_VersionWhereUniqueInput
  }


  /**
   * Group_Version updateMany
   */
  export type Group_VersionUpdateManyArgs = {
    /**
     * The data used to update Group_Versions.
     * 
    **/
    data: XOR<Group_VersionUpdateManyMutationInput, Group_VersionUncheckedUpdateManyInput>
    /**
     * Filter which Group_Versions to update
     * 
    **/
    where?: Group_VersionWhereInput
  }


  /**
   * Group_Version upsert
   */
  export type Group_VersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * The filter to search for the Group_Version to update in case it exists.
     * 
    **/
    where: Group_VersionWhereUniqueInput
    /**
     * In case the Group_Version found by the `where` argument doesn't exist, create a new Group_Version with this data.
     * 
    **/
    create: XOR<Group_VersionCreateInput, Group_VersionUncheckedCreateInput>
    /**
     * In case the Group_Version was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Group_VersionUpdateInput, Group_VersionUncheckedUpdateInput>
  }


  /**
   * Group_Version delete
   */
  export type Group_VersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
    /**
     * Filter which Group_Version to delete.
     * 
    **/
    where: Group_VersionWhereUniqueInput
  }


  /**
   * Group_Version deleteMany
   */
  export type Group_VersionDeleteManyArgs = {
    /**
     * Filter which Group_Versions to delete
     * 
    **/
    where?: Group_VersionWhereInput
  }


  /**
   * Group_Version: findUniqueOrThrow
   */
  export type Group_VersionFindUniqueOrThrowArgs = Group_VersionFindUniqueArgsBase
      

  /**
   * Group_Version: findFirstOrThrow
   */
  export type Group_VersionFindFirstOrThrowArgs = Group_VersionFindFirstArgsBase
      

  /**
   * Group_Version without action
   */
  export type Group_VersionArgs = {
    /**
     * Select specific fields to fetch from the Group_Version
     * 
    **/
    select?: Group_VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Group_VersionInclude | null
  }



  /**
   * Model groups_users
   */


  export type AggregateGroups_users = {
    _count: Groups_usersCountAggregateOutputType | null
    _avg: Groups_usersAvgAggregateOutputType | null
    _sum: Groups_usersSumAggregateOutputType | null
    _min: Groups_usersMinAggregateOutputType | null
    _max: Groups_usersMaxAggregateOutputType | null
  }

  export type Groups_usersAvgAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersSumAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersMinAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersMaxAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersCountAggregateOutputType = {
    user_id: number
    group_id: number
    _all: number
  }


  export type Groups_usersAvgAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersSumAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersMinAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersMaxAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersCountAggregateInputType = {
    user_id?: true
    group_id?: true
    _all?: true
  }

  export type Groups_usersAggregateArgs = {
    /**
     * Filter which groups_users to aggregate.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups_users
    **/
    _count?: true | Groups_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_usersMaxAggregateInputType
  }

  export type GetGroups_usersAggregateType<T extends Groups_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_users[P]>
      : GetScalarType<T[P], AggregateGroups_users[P]>
  }




  export type Groups_usersGroupByArgs = {
    where?: groups_usersWhereInput
    orderBy?: Enumerable<groups_usersOrderByWithAggregationInput>
    by: Array<Groups_usersScalarFieldEnum>
    having?: groups_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_usersCountAggregateInputType | true
    _avg?: Groups_usersAvgAggregateInputType
    _sum?: Groups_usersSumAggregateInputType
    _min?: Groups_usersMinAggregateInputType
    _max?: Groups_usersMaxAggregateInputType
  }


  export type Groups_usersGroupByOutputType = {
    user_id: number
    group_id: number
    _count: Groups_usersCountAggregateOutputType | null
    _avg: Groups_usersAvgAggregateOutputType | null
    _sum: Groups_usersSumAggregateOutputType | null
    _min: Groups_usersMinAggregateOutputType | null
    _max: Groups_usersMaxAggregateOutputType | null
  }

  type GetGroups_usersGroupByPayload<T extends Groups_usersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_usersGroupByOutputType[P]>
        }
      >
    >


  export type groups_usersSelect = {
    user_id?: boolean
    group_id?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type groups_usersInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | UsersArgs
  }

  export type groups_usersGetPayload<
    S extends boolean | null | undefined | groups_usersArgs,
    U = keyof S
      > = S extends true
        ? groups_users
    : S extends undefined
    ? never
    : S extends groups_usersArgs | groups_usersFindManyArgs
    ?'include' extends U
    ? groups_users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof groups_users ? groups_users[P] : never
  } 
    : groups_users
  : groups_users


  type groups_usersCountArgs = Merge<
    Omit<groups_usersFindManyArgs, 'select' | 'include'> & {
      select?: Groups_usersCountAggregateInputType | true
    }
  >

  export interface groups_usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_users that matches the filter.
     * @param {groups_usersFindUniqueArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groups_usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groups_usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups_users'> extends True ? CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>> : CheckSelect<T, Prisma__groups_usersClient<groups_users | null >, Prisma__groups_usersClient<groups_usersGetPayload<T> | null >>

    /**
     * Find the first Groups_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindFirstArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groups_usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groups_usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups_users'> extends True ? CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>> : CheckSelect<T, Prisma__groups_usersClient<groups_users | null >, Prisma__groups_usersClient<groups_usersGetPayload<T> | null >>

    /**
     * Find zero or more Groups_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_users
     * const groups_users = await prisma.groups_users.findMany()
     * 
     * // Get first 10 Groups_users
     * const groups_users = await prisma.groups_users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const groups_usersWithUser_idOnly = await prisma.groups_users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends groups_usersFindManyArgs>(
      args?: SelectSubset<T, groups_usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>

    /**
     * Create a Groups_users.
     * @param {groups_usersCreateArgs} args - Arguments to create a Groups_users.
     * @example
     * // Create one Groups_users
     * const Groups_users = await prisma.groups_users.create({
     *   data: {
     *     // ... data to create a Groups_users
     *   }
     * })
     * 
    **/
    create<T extends groups_usersCreateArgs>(
      args: SelectSubset<T, groups_usersCreateArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Create many Groups_users.
     *     @param {groups_usersCreateManyArgs} args - Arguments to create many Groups_users.
     *     @example
     *     // Create many Groups_users
     *     const groups_users = await prisma.groups_users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groups_usersCreateManyArgs>(
      args?: SelectSubset<T, groups_usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_users.
     * @param {groups_usersDeleteArgs} args - Arguments to delete one Groups_users.
     * @example
     * // Delete one Groups_users
     * const Groups_users = await prisma.groups_users.delete({
     *   where: {
     *     // ... filter to delete one Groups_users
     *   }
     * })
     * 
    **/
    delete<T extends groups_usersDeleteArgs>(
      args: SelectSubset<T, groups_usersDeleteArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Update one Groups_users.
     * @param {groups_usersUpdateArgs} args - Arguments to update one Groups_users.
     * @example
     * // Update one Groups_users
     * const groups_users = await prisma.groups_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groups_usersUpdateArgs>(
      args: SelectSubset<T, groups_usersUpdateArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Delete zero or more Groups_users.
     * @param {groups_usersDeleteManyArgs} args - Arguments to filter Groups_users to delete.
     * @example
     * // Delete a few Groups_users
     * const { count } = await prisma.groups_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groups_usersDeleteManyArgs>(
      args?: SelectSubset<T, groups_usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_users
     * const groups_users = await prisma.groups_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groups_usersUpdateManyArgs>(
      args: SelectSubset<T, groups_usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_users.
     * @param {groups_usersUpsertArgs} args - Arguments to update or create a Groups_users.
     * @example
     * // Update or create a Groups_users
     * const groups_users = await prisma.groups_users.upsert({
     *   create: {
     *     // ... data to create a Groups_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_users we want to update
     *   }
     * })
    **/
    upsert<T extends groups_usersUpsertArgs>(
      args: SelectSubset<T, groups_usersUpsertArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Find one Groups_users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {groups_usersFindUniqueOrThrowArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groups_usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, groups_usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Find the first Groups_users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindFirstOrThrowArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groups_usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, groups_usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Count the number of Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersCountArgs} args - Arguments to filter Groups_users to count.
     * @example
     * // Count the number of Groups_users
     * const count = await prisma.groups_users.count({
     *   where: {
     *     // ... the filter for the Groups_users we want to count
     *   }
     * })
    **/
    count<T extends groups_usersCountArgs>(
      args?: Subset<T, groups_usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_usersAggregateArgs>(args: Subset<T, Groups_usersAggregateArgs>): PrismaPromise<GetGroups_usersAggregateType<T>>

    /**
     * Group by Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_usersGroupByArgs['orderBy'] }
        : { orderBy?: Groups_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_usersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for groups_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groups_usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * groups_users base type for findUnique actions
   */
  export type groups_usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }

  /**
   * groups_users: findUnique
   */
  export interface groups_usersFindUniqueArgs extends groups_usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_users base type for findFirst actions
   */
  export type groups_usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups_users.
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups_users.
     * 
    **/
    distinct?: Enumerable<Groups_usersScalarFieldEnum>
  }

  /**
   * groups_users: findFirst
   */
  export interface groups_usersFindFirstArgs extends groups_usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_users findMany
   */
  export type groups_usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups_users.
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_usersScalarFieldEnum>
  }


  /**
   * groups_users create
   */
  export type groups_usersCreateArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The data needed to create a groups_users.
     * 
    **/
    data: XOR<groups_usersCreateInput, groups_usersUncheckedCreateInput>
  }


  /**
   * groups_users createMany
   */
  export type groups_usersCreateManyArgs = {
    /**
     * The data used to create many groups_users.
     * 
    **/
    data: Enumerable<groups_usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups_users update
   */
  export type groups_usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The data needed to update a groups_users.
     * 
    **/
    data: XOR<groups_usersUpdateInput, groups_usersUncheckedUpdateInput>
    /**
     * Choose, which groups_users to update.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }


  /**
   * groups_users updateMany
   */
  export type groups_usersUpdateManyArgs = {
    /**
     * The data used to update groups_users.
     * 
    **/
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyInput>
    /**
     * Filter which groups_users to update
     * 
    **/
    where?: groups_usersWhereInput
  }


  /**
   * groups_users upsert
   */
  export type groups_usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The filter to search for the groups_users to update in case it exists.
     * 
    **/
    where: groups_usersWhereUniqueInput
    /**
     * In case the groups_users found by the `where` argument doesn't exist, create a new groups_users with this data.
     * 
    **/
    create: XOR<groups_usersCreateInput, groups_usersUncheckedCreateInput>
    /**
     * In case the groups_users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groups_usersUpdateInput, groups_usersUncheckedUpdateInput>
  }


  /**
   * groups_users delete
   */
  export type groups_usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter which groups_users to delete.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }


  /**
   * groups_users deleteMany
   */
  export type groups_usersDeleteManyArgs = {
    /**
     * Filter which groups_users to delete
     * 
    **/
    where?: groups_usersWhereInput
  }


  /**
   * groups_users: findUniqueOrThrow
   */
  export type groups_usersFindUniqueOrThrowArgs = groups_usersFindUniqueArgsBase
      

  /**
   * groups_users: findFirstOrThrow
   */
  export type groups_usersFindFirstOrThrowArgs = groups_usersFindFirstArgsBase
      

  /**
   * groups_users without action
   */
  export type groups_usersArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
  }



  /**
   * Model Ingredient
   */


  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
    postedById: number | null
  }

  export type IngredientSumAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
    postedById: number | null
  }

  export type IngredientMinAggregateOutputType = {
    id: number | null
    date_created: Date | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: number | null
    date_created: Date | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    date_created: number
    name: number
    amount: number
    unit: number
    price: number
    source: number
    postedById: number
    _all: number
  }


  export type IngredientAvgAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    postedById?: true
  }

  export type IngredientSumAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    postedById?: true
  }

  export type IngredientMinAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    date_created?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    postedById?: true
    _all?: true
  }

  export type IngredientAggregateArgs = {
    /**
     * Filter which Ingredient to aggregate.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs = {
    where?: IngredientWhereInput
    orderBy?: Enumerable<IngredientOrderByWithAggregationInput>
    by: Array<IngredientScalarFieldEnum>
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _avg?: IngredientAvgAggregateInputType
    _sum?: IngredientSumAggregateInputType
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }


  export type IngredientGroupByOutputType = {
    id: number
    date_created: Date
    name: string
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    postedById: number | null
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect = {
    id?: boolean
    date_created?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    price?: boolean
    source?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    spec?: boolean | SpecFindManyArgs
    user_ingredient?: boolean | User_IngredientFindManyArgs
    _count?: boolean | IngredientCountOutputTypeArgs
  }

  export type IngredientInclude = {
    postedBy?: boolean | UsersArgs
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    spec?: boolean | SpecFindManyArgs
    user_ingredient?: boolean | User_IngredientFindManyArgs
    _count?: boolean | IngredientCountOutputTypeArgs
  }

  export type IngredientGetPayload<
    S extends boolean | null | undefined | IngredientArgs,
    U = keyof S
      > = S extends true
        ? Ingredient
    : S extends undefined
    ? never
    : S extends IngredientArgs | IngredientFindManyArgs
    ?'include' extends U
    ? Ingredient  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_ingredient' ? Array < User_IngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_ingredient' ? Array < User_IngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Ingredient ? Ingredient[P] : never
  } 
    : Ingredient
  : Ingredient


  type IngredientCountArgs = Merge<
    Omit<IngredientFindManyArgs, 'select' | 'include'> & {
      select?: IngredientCountAggregateInputType | true
    }
  >

  export interface IngredientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IngredientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IngredientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ingredient'> extends True ? CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>> : CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IngredientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IngredientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ingredient'> extends True ? CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>> : CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IngredientFindManyArgs>(
      args?: SelectSubset<T, IngredientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Ingredient>>, PrismaPromise<Array<IngredientGetPayload<T>>>>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
    **/
    create<T extends IngredientCreateArgs>(
      args: SelectSubset<T, IngredientCreateArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Create many Ingredients.
     *     @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     *     @example
     *     // Create many Ingredients
     *     const ingredient = await prisma.ingredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IngredientCreateManyArgs>(
      args?: SelectSubset<T, IngredientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
    **/
    delete<T extends IngredientDeleteArgs>(
      args: SelectSubset<T, IngredientDeleteArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IngredientUpdateArgs>(
      args: SelectSubset<T, IngredientUpdateArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IngredientDeleteManyArgs>(
      args?: SelectSubset<T, IngredientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IngredientUpdateManyArgs>(
      args: SelectSubset<T, IngredientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
    **/
    upsert<T extends IngredientUpsertArgs>(
      args: SelectSubset<T, IngredientUpsertArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Find one Ingredient that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IngredientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IngredientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientClient<Ingredient>, Prisma__IngredientClient<IngredientGetPayload<T>>>

    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IngredientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    groups_ingredients<T extends Groups_IngredientsFindManyArgs = {}>(args?: Subset<T, Groups_IngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>;

    spec<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    user_ingredient<T extends User_IngredientFindManyArgs = {}>(args?: Subset<T, User_IngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User_Ingredient>>, PrismaPromise<Array<User_IngredientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ingredient base type for findUnique actions
   */
  export type IngredientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredient to fetch.
     * 
    **/
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient: findUnique
   */
  export interface IngredientFindUniqueArgs extends IngredientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredient base type for findFirst actions
   */
  export type IngredientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredient to fetch.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     * 
    **/
    distinct?: Enumerable<IngredientScalarFieldEnum>
  }

  /**
   * Ingredient: findFirst
   */
  export interface IngredientFindFirstArgs extends IngredientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter, which Ingredients to fetch.
     * 
    **/
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     * 
    **/
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IngredientScalarFieldEnum>
  }


  /**
   * Ingredient create
   */
  export type IngredientCreateArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The data needed to create a Ingredient.
     * 
    **/
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }


  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs = {
    /**
     * The data used to create many Ingredients.
     * 
    **/
    data: Enumerable<IngredientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The data needed to update a Ingredient.
     * 
    **/
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     * 
    **/
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs = {
    /**
     * The data used to update Ingredients.
     * 
    **/
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     * 
    **/
    where?: IngredientWhereInput
  }


  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     * 
    **/
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     * 
    **/
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }


  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
    /**
     * Filter which Ingredient to delete.
     * 
    **/
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs = {
    /**
     * Filter which Ingredients to delete
     * 
    **/
    where?: IngredientWhereInput
  }


  /**
   * Ingredient: findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs = IngredientFindUniqueArgsBase
      

  /**
   * Ingredient: findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs = IngredientFindFirstArgsBase
      

  /**
   * Ingredient without action
   */
  export type IngredientArgs = {
    /**
     * Select specific fields to fetch from the Ingredient
     * 
    **/
    select?: IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientInclude | null
  }



  /**
   * Model Spec
   */


  export type AggregateSpec = {
    _count: SpecCountAggregateOutputType | null
    _avg: SpecAvgAggregateOutputType | null
    _sum: SpecSumAggregateOutputType | null
    _min: SpecMinAggregateOutputType | null
    _max: SpecMaxAggregateOutputType | null
  }

  export type SpecAvgAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecSumAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecMinAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecMaxAggregateOutputType = {
    id: number | null
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
  }

  export type SpecCountAggregateOutputType = {
    id: number
    ingredientId: number
    order: number
    amount: number
    unit: number
    versionId: number
    postedById: number
    _all: number
  }


  export type SpecAvgAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    versionId?: true
    postedById?: true
  }

  export type SpecSumAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    versionId?: true
    postedById?: true
  }

  export type SpecMinAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
  }

  export type SpecMaxAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
  }

  export type SpecCountAggregateInputType = {
    id?: true
    ingredientId?: true
    order?: true
    amount?: true
    unit?: true
    versionId?: true
    postedById?: true
    _all?: true
  }

  export type SpecAggregateArgs = {
    /**
     * Filter which Spec to aggregate.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specs
    **/
    _count?: true | SpecCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecMaxAggregateInputType
  }

  export type GetSpecAggregateType<T extends SpecAggregateArgs> = {
        [P in keyof T & keyof AggregateSpec]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpec[P]>
      : GetScalarType<T[P], AggregateSpec[P]>
  }




  export type SpecGroupByArgs = {
    where?: SpecWhereInput
    orderBy?: Enumerable<SpecOrderByWithAggregationInput>
    by: Array<SpecScalarFieldEnum>
    having?: SpecScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecCountAggregateInputType | true
    _avg?: SpecAvgAggregateInputType
    _sum?: SpecSumAggregateInputType
    _min?: SpecMinAggregateInputType
    _max?: SpecMaxAggregateInputType
  }


  export type SpecGroupByOutputType = {
    id: number
    ingredientId: number | null
    order: number | null
    amount: number | null
    unit: string | null
    versionId: number | null
    postedById: number | null
    _count: SpecCountAggregateOutputType | null
    _avg: SpecAvgAggregateOutputType | null
    _sum: SpecSumAggregateOutputType | null
    _min: SpecMinAggregateOutputType | null
    _max: SpecMaxAggregateOutputType | null
  }

  type GetSpecGroupByPayload<T extends SpecGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecGroupByOutputType[P]>
            : GetScalarType<T[P], SpecGroupByOutputType[P]>
        }
      >
    >


  export type SpecSelect = {
    id?: boolean
    ingredientId?: boolean
    order?: boolean
    amount?: boolean
    unit?: boolean
    ingredient?: boolean | IngredientArgs
    version?: boolean | VersionArgs
    versionId?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
  }

  export type SpecInclude = {
    ingredient?: boolean | IngredientArgs
    version?: boolean | VersionArgs
    postedBy?: boolean | UsersArgs
  }

  export type SpecGetPayload<
    S extends boolean | null | undefined | SpecArgs,
    U = keyof S
      > = S extends true
        ? Spec
    : S extends undefined
    ? never
    : S extends SpecArgs | SpecFindManyArgs
    ?'include' extends U
    ? Spec  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredient' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredient' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Spec ? Spec[P] : never
  } 
    : Spec
  : Spec


  type SpecCountArgs = Merge<
    Omit<SpecFindManyArgs, 'select' | 'include'> & {
      select?: SpecCountAggregateInputType | true
    }
  >

  export interface SpecDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Spec that matches the filter.
     * @param {SpecFindUniqueArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Spec'> extends True ? CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>> : CheckSelect<T, Prisma__SpecClient<Spec | null >, Prisma__SpecClient<SpecGetPayload<T> | null >>

    /**
     * Find the first Spec that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindFirstArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Spec'> extends True ? CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>> : CheckSelect<T, Prisma__SpecClient<Spec | null >, Prisma__SpecClient<SpecGetPayload<T> | null >>

    /**
     * Find zero or more Specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specs
     * const specs = await prisma.spec.findMany()
     * 
     * // Get first 10 Specs
     * const specs = await prisma.spec.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specWithIdOnly = await prisma.spec.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecFindManyArgs>(
      args?: SelectSubset<T, SpecFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>

    /**
     * Create a Spec.
     * @param {SpecCreateArgs} args - Arguments to create a Spec.
     * @example
     * // Create one Spec
     * const Spec = await prisma.spec.create({
     *   data: {
     *     // ... data to create a Spec
     *   }
     * })
     * 
    **/
    create<T extends SpecCreateArgs>(
      args: SelectSubset<T, SpecCreateArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Create many Specs.
     *     @param {SpecCreateManyArgs} args - Arguments to create many Specs.
     *     @example
     *     // Create many Specs
     *     const spec = await prisma.spec.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecCreateManyArgs>(
      args?: SelectSubset<T, SpecCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Spec.
     * @param {SpecDeleteArgs} args - Arguments to delete one Spec.
     * @example
     * // Delete one Spec
     * const Spec = await prisma.spec.delete({
     *   where: {
     *     // ... filter to delete one Spec
     *   }
     * })
     * 
    **/
    delete<T extends SpecDeleteArgs>(
      args: SelectSubset<T, SpecDeleteArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Update one Spec.
     * @param {SpecUpdateArgs} args - Arguments to update one Spec.
     * @example
     * // Update one Spec
     * const spec = await prisma.spec.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecUpdateArgs>(
      args: SelectSubset<T, SpecUpdateArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Delete zero or more Specs.
     * @param {SpecDeleteManyArgs} args - Arguments to filter Specs to delete.
     * @example
     * // Delete a few Specs
     * const { count } = await prisma.spec.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecDeleteManyArgs>(
      args?: SelectSubset<T, SpecDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specs
     * const spec = await prisma.spec.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecUpdateManyArgs>(
      args: SelectSubset<T, SpecUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Spec.
     * @param {SpecUpsertArgs} args - Arguments to update or create a Spec.
     * @example
     * // Update or create a Spec
     * const spec = await prisma.spec.upsert({
     *   create: {
     *     // ... data to create a Spec
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spec we want to update
     *   }
     * })
    **/
    upsert<T extends SpecUpsertArgs>(
      args: SelectSubset<T, SpecUpsertArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Find one Spec that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SpecFindUniqueOrThrowArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Find the first Spec that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecFindFirstOrThrowArgs} args - Arguments to find a Spec
     * @example
     * // Get one Spec
     * const spec = await prisma.spec.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SpecClient<Spec>, Prisma__SpecClient<SpecGetPayload<T>>>

    /**
     * Count the number of Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecCountArgs} args - Arguments to filter Specs to count.
     * @example
     * // Count the number of Specs
     * const count = await prisma.spec.count({
     *   where: {
     *     // ... the filter for the Specs we want to count
     *   }
     * })
    **/
    count<T extends SpecCountArgs>(
      args?: Subset<T, SpecCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecAggregateArgs>(args: Subset<T, SpecAggregateArgs>): PrismaPromise<GetSpecAggregateType<T>>

    /**
     * Group by Spec.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecGroupByArgs['orderBy'] }
        : { orderBy?: SpecGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Spec.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredient<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Spec base type for findUnique actions
   */
  export type SpecFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Spec to fetch.
     * 
    **/
    where: SpecWhereUniqueInput
  }

  /**
   * Spec: findUnique
   */
  export interface SpecFindUniqueArgs extends SpecFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Spec base type for findFirst actions
   */
  export type SpecFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Spec to fetch.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specs.
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specs.
     * 
    **/
    distinct?: Enumerable<SpecScalarFieldEnum>
  }

  /**
   * Spec: findFirst
   */
  export interface SpecFindFirstArgs extends SpecFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Spec findMany
   */
  export type SpecFindManyArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter, which Specs to fetch.
     * 
    **/
    where?: SpecWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specs to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specs.
     * 
    **/
    cursor?: SpecWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecScalarFieldEnum>
  }


  /**
   * Spec create
   */
  export type SpecCreateArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The data needed to create a Spec.
     * 
    **/
    data: XOR<SpecCreateInput, SpecUncheckedCreateInput>
  }


  /**
   * Spec createMany
   */
  export type SpecCreateManyArgs = {
    /**
     * The data used to create many Specs.
     * 
    **/
    data: Enumerable<SpecCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Spec update
   */
  export type SpecUpdateArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The data needed to update a Spec.
     * 
    **/
    data: XOR<SpecUpdateInput, SpecUncheckedUpdateInput>
    /**
     * Choose, which Spec to update.
     * 
    **/
    where: SpecWhereUniqueInput
  }


  /**
   * Spec updateMany
   */
  export type SpecUpdateManyArgs = {
    /**
     * The data used to update Specs.
     * 
    **/
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyInput>
    /**
     * Filter which Specs to update
     * 
    **/
    where?: SpecWhereInput
  }


  /**
   * Spec upsert
   */
  export type SpecUpsertArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * The filter to search for the Spec to update in case it exists.
     * 
    **/
    where: SpecWhereUniqueInput
    /**
     * In case the Spec found by the `where` argument doesn't exist, create a new Spec with this data.
     * 
    **/
    create: XOR<SpecCreateInput, SpecUncheckedCreateInput>
    /**
     * In case the Spec was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecUpdateInput, SpecUncheckedUpdateInput>
  }


  /**
   * Spec delete
   */
  export type SpecDeleteArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
    /**
     * Filter which Spec to delete.
     * 
    **/
    where: SpecWhereUniqueInput
  }


  /**
   * Spec deleteMany
   */
  export type SpecDeleteManyArgs = {
    /**
     * Filter which Specs to delete
     * 
    **/
    where?: SpecWhereInput
  }


  /**
   * Spec: findUniqueOrThrow
   */
  export type SpecFindUniqueOrThrowArgs = SpecFindUniqueArgsBase
      

  /**
   * Spec: findFirstOrThrow
   */
  export type SpecFindFirstOrThrowArgs = SpecFindFirstArgsBase
      

  /**
   * Spec without action
   */
  export type SpecArgs = {
    /**
     * Select specific fields to fetch from the Spec
     * 
    **/
    select?: SpecSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecInclude | null
  }



  /**
   * Model Recipe
   */


  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type RecipeSumAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    origin: string | null
    history: string | null
    postedById: number | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    origin: string | null
    history: string | null
    postedById: number | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    origin: number
    history: number
    postedById: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type RecipeSumAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    origin?: true
    history?: true
    postedById?: true
    _all?: true
  }

  export type RecipeAggregateArgs = {
    /**
     * Filter which Recipe to aggregate.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs = {
    where?: RecipeWhereInput
    orderBy?: Enumerable<RecipeOrderByWithAggregationInput>
    by: Array<RecipeScalarFieldEnum>
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }


  export type RecipeGroupByOutputType = {
    id: number
    createdAt: Date
    name: string
    origin: string
    history: string | null
    postedById: number | null
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    origin?: boolean
    history?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    version?: boolean | VersionFindManyArgs
    _count?: boolean | RecipeCountOutputTypeArgs
  }

  export type RecipeInclude = {
    postedBy?: boolean | UsersArgs
    version?: boolean | VersionFindManyArgs
    _count?: boolean | RecipeCountOutputTypeArgs
  }

  export type RecipeGetPayload<
    S extends boolean | null | undefined | RecipeArgs,
    U = keyof S
      > = S extends true
        ? Recipe
    : S extends undefined
    ? never
    : S extends RecipeArgs | RecipeFindManyArgs
    ?'include' extends U
    ? Recipe  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RecipeCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RecipeCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Recipe ? Recipe[P] : never
  } 
    : Recipe
  : Recipe


  type RecipeCountArgs = Merge<
    Omit<RecipeFindManyArgs, 'select' | 'include'> & {
      select?: RecipeCountAggregateInputType | true
    }
  >

  export interface RecipeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecipeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recipe'> extends True ? CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>> : CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecipeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recipe'> extends True ? CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>> : CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecipeFindManyArgs>(
      args?: SelectSubset<T, RecipeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Recipe>>, PrismaPromise<Array<RecipeGetPayload<T>>>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
    **/
    create<T extends RecipeCreateArgs>(
      args: SelectSubset<T, RecipeCreateArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Create many Recipes.
     *     @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipe = await prisma.recipe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipeCreateManyArgs>(
      args?: SelectSubset<T, RecipeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
    **/
    delete<T extends RecipeDeleteArgs>(
      args: SelectSubset<T, RecipeDeleteArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipeUpdateArgs>(
      args: SelectSubset<T, RecipeUpdateArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipeDeleteManyArgs>(
      args?: SelectSubset<T, RecipeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipeUpdateManyArgs>(
      args: SelectSubset<T, RecipeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
    **/
    upsert<T extends RecipeUpsertArgs>(
      args: SelectSubset<T, RecipeUpsertArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Find one Recipe that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RecipeFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Find the first Recipe that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RecipeFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RecipeClient<Recipe>, Prisma__RecipeClient<RecipeGetPayload<T>>>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecipeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    version<T extends VersionFindManyArgs = {}>(args?: Subset<T, VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recipe base type for findUnique actions
   */
  export type RecipeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipe to fetch.
     * 
    **/
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe: findUnique
   */
  export interface RecipeFindUniqueArgs extends RecipeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recipe base type for findFirst actions
   */
  export type RecipeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipe to fetch.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     * 
    **/
    distinct?: Enumerable<RecipeScalarFieldEnum>
  }

  /**
   * Recipe: findFirst
   */
  export interface RecipeFindFirstArgs extends RecipeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter, which Recipes to fetch.
     * 
    **/
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<RecipeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     * 
    **/
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecipeScalarFieldEnum>
  }


  /**
   * Recipe create
   */
  export type RecipeCreateArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The data needed to create a Recipe.
     * 
    **/
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }


  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs = {
    /**
     * The data used to create many Recipes.
     * 
    **/
    data: Enumerable<RecipeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recipe update
   */
  export type RecipeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The data needed to update a Recipe.
     * 
    **/
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     * 
    **/
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs = {
    /**
     * The data used to update Recipes.
     * 
    **/
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     * 
    **/
    where?: RecipeWhereInput
  }


  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     * 
    **/
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     * 
    **/
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }


  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
    /**
     * Filter which Recipe to delete.
     * 
    **/
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs = {
    /**
     * Filter which Recipes to delete
     * 
    **/
    where?: RecipeWhereInput
  }


  /**
   * Recipe: findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs = RecipeFindUniqueArgsBase
      

  /**
   * Recipe: findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs = RecipeFindFirstArgsBase
      

  /**
   * Recipe without action
   */
  export type RecipeArgs = {
    /**
     * Select specific fields to fetch from the Recipe
     * 
    **/
    select?: RecipeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecipeInclude | null
  }



  /**
   * Model Version
   */


  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionAvgAggregateOutputType = {
    id: number | null
    postedById: number | null
    recipeId: number | null
  }

  export type VersionSumAggregateOutputType = {
    id: number | null
    postedById: number | null
    recipeId: number | null
  }

  export type VersionMinAggregateOutputType = {
    id: number | null
    versionName: string | null
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
  }

  export type VersionMaxAggregateOutputType = {
    id: number | null
    versionName: string | null
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    versionName: number
    postedById: number
    instructions: number
    glassware: number
    ice: number
    recipeId: number
    _all: number
  }


  export type VersionAvgAggregateInputType = {
    id?: true
    postedById?: true
    recipeId?: true
  }

  export type VersionSumAggregateInputType = {
    id?: true
    postedById?: true
    recipeId?: true
  }

  export type VersionMinAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    versionName?: true
    postedById?: true
    instructions?: true
    glassware?: true
    ice?: true
    recipeId?: true
    _all?: true
  }

  export type VersionAggregateArgs = {
    /**
     * Filter which Version to aggregate.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs = {
    where?: VersionWhereInput
    orderBy?: Enumerable<VersionOrderByWithAggregationInput>
    by: Array<VersionScalarFieldEnum>
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _avg?: VersionAvgAggregateInputType
    _sum?: VersionSumAggregateInputType
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }


  export type VersionGroupByOutputType = {
    id: number
    versionName: string
    postedById: number | null
    instructions: string | null
    glassware: string | null
    ice: string | null
    recipeId: number | null
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect = {
    id?: boolean
    versionName?: boolean
    postedBy?: boolean | UsersArgs
    postedById?: boolean
    instructions?: boolean
    glassware?: boolean
    ice?: boolean
    group_version?: boolean | Group_VersionFindManyArgs
    user_version?: boolean | UserVersionFindManyArgs
    recipe?: boolean | RecipeArgs
    recipeId?: boolean
    specs?: boolean | SpecFindManyArgs
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionInclude = {
    postedBy?: boolean | UsersArgs
    group_version?: boolean | Group_VersionFindManyArgs
    user_version?: boolean | UserVersionFindManyArgs
    recipe?: boolean | RecipeArgs
    specs?: boolean | SpecFindManyArgs
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionGetPayload<
    S extends boolean | null | undefined | VersionArgs,
    U = keyof S
      > = S extends true
        ? Version
    : S extends undefined
    ? never
    : S extends VersionArgs | VersionFindManyArgs
    ?'include' extends U
    ? Version  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'group_version' ? Array < Group_VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_version' ? Array < UserVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'recipe' ? RecipeGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'specs' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postedBy' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'group_version' ? Array < Group_VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_version' ? Array < UserVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'recipe' ? RecipeGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'specs' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Version ? Version[P] : never
  } 
    : Version
  : Version


  type VersionCountArgs = Merge<
    Omit<VersionFindManyArgs, 'select' | 'include'> & {
      select?: VersionCountAggregateInputType | true
    }
  >

  export interface VersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VersionFindManyArgs>(
      args?: SelectSubset<T, VersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
    **/
    create<T extends VersionCreateArgs>(
      args: SelectSubset<T, VersionCreateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Create many Versions.
     *     @param {VersionCreateManyArgs} args - Arguments to create many Versions.
     *     @example
     *     // Create many Versions
     *     const version = await prisma.version.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VersionCreateManyArgs>(
      args?: SelectSubset<T, VersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
    **/
    delete<T extends VersionDeleteArgs>(
      args: SelectSubset<T, VersionDeleteArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VersionUpdateArgs>(
      args: SelectSubset<T, VersionUpdateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VersionDeleteManyArgs>(
      args?: SelectSubset<T, VersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VersionUpdateManyArgs>(
      args: SelectSubset<T, VersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
    **/
    upsert<T extends VersionUpsertArgs>(
      args: SelectSubset<T, VersionUpsertArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find one Version that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find the first Version that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postedBy<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    group_version<T extends Group_VersionFindManyArgs = {}>(args?: Subset<T, Group_VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Group_Version>>, PrismaPromise<Array<Group_VersionGetPayload<T>>>>;

    user_version<T extends UserVersionFindManyArgs = {}>(args?: Subset<T, UserVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserVersion>>, PrismaPromise<Array<UserVersionGetPayload<T>>>>;

    recipe<T extends RecipeArgs = {}>(args?: Subset<T, RecipeArgs>): CheckSelect<T, Prisma__RecipeClient<Recipe | null >, Prisma__RecipeClient<RecipeGetPayload<T> | null >>;

    specs<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Version base type for findUnique actions
   */
  export type VersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where: VersionWhereUniqueInput
  }

  /**
   * Version: findUnique
   */
  export interface VersionFindUniqueArgs extends VersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version base type for findFirst actions
   */
  export type VersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     * 
    **/
    distinct?: Enumerable<VersionScalarFieldEnum>
  }

  /**
   * Version: findFirst
   */
  export interface VersionFindFirstArgs extends VersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version findMany
   */
  export type VersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Versions to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Version create
   */
  export type VersionCreateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to create a Version.
     * 
    **/
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }


  /**
   * Version createMany
   */
  export type VersionCreateManyArgs = {
    /**
     * The data used to create many Versions.
     * 
    **/
    data: Enumerable<VersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Version update
   */
  export type VersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to update a Version.
     * 
    **/
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs = {
    /**
     * The data used to update Versions.
     * 
    **/
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version upsert
   */
  export type VersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The filter to search for the Version to update in case it exists.
     * 
    **/
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     * 
    **/
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }


  /**
   * Version delete
   */
  export type VersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter which Version to delete.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs = {
    /**
     * Filter which Versions to delete
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version: findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs = VersionFindUniqueArgsBase
      

  /**
   * Version: findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs = VersionFindFirstArgsBase
      

  /**
   * Version without action
   */
  export type VersionArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
  }



  /**
   * Model user_data
   */


  export type AggregateUser_data = {
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  export type User_dataAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_dataSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_dataMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
  }

  export type User_dataMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
  }

  export type User_dataCountAggregateOutputType = {
    id: number
    user_id: number
    user_bio: number
    work_place: number
    profile_picture: number
    _all: number
  }


  export type User_dataAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_dataSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_dataMinAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
  }

  export type User_dataMaxAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
  }

  export type User_dataCountAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
    _all?: true
  }

  export type User_dataAggregateArgs = {
    /**
     * Filter which user_data to aggregate.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_data
    **/
    _count?: true | User_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_dataMaxAggregateInputType
  }

  export type GetUser_dataAggregateType<T extends User_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_data[P]>
      : GetScalarType<T[P], AggregateUser_data[P]>
  }




  export type User_dataGroupByArgs = {
    where?: user_dataWhereInput
    orderBy?: Enumerable<user_dataOrderByWithAggregationInput>
    by: Array<User_dataScalarFieldEnum>
    having?: user_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_dataCountAggregateInputType | true
    _avg?: User_dataAvgAggregateInputType
    _sum?: User_dataSumAggregateInputType
    _min?: User_dataMinAggregateInputType
    _max?: User_dataMaxAggregateInputType
  }


  export type User_dataGroupByOutputType = {
    id: number
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  type GetUser_dataGroupByPayload<T extends User_dataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_dataGroupByOutputType[P]>
            : GetScalarType<T[P], User_dataGroupByOutputType[P]>
        }
      >
    >


  export type user_dataSelect = {
    id?: boolean
    user_id?: boolean
    user_bio?: boolean
    work_place?: boolean
    profile_picture?: boolean
    users?: boolean | UsersArgs
  }

  export type user_dataInclude = {
    users?: boolean | UsersArgs
  }

  export type user_dataGetPayload<
    S extends boolean | null | undefined | user_dataArgs,
    U = keyof S
      > = S extends true
        ? user_data
    : S extends undefined
    ? never
    : S extends user_dataArgs | user_dataFindManyArgs
    ?'include' extends U
    ? user_data  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof user_data ? user_data[P] : never
  } 
    : user_data
  : user_data


  type user_dataCountArgs = Merge<
    Omit<user_dataFindManyArgs, 'select' | 'include'> & {
      select?: User_dataCountAggregateInputType | true
    }
  >

  export interface user_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User_data that matches the filter.
     * @param {user_dataFindUniqueArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_data'> extends True ? CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>> : CheckSelect<T, Prisma__user_dataClient<user_data | null >, Prisma__user_dataClient<user_dataGetPayload<T> | null >>

    /**
     * Find the first User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_data'> extends True ? CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>> : CheckSelect<T, Prisma__user_dataClient<user_data | null >, Prisma__user_dataClient<user_dataGetPayload<T> | null >>

    /**
     * Find zero or more User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_data
     * const user_data = await prisma.user_data.findMany()
     * 
     * // Get first 10 User_data
     * const user_data = await prisma.user_data.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_dataWithIdOnly = await prisma.user_data.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_dataFindManyArgs>(
      args?: SelectSubset<T, user_dataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_data>>, PrismaPromise<Array<user_dataGetPayload<T>>>>

    /**
     * Create a User_data.
     * @param {user_dataCreateArgs} args - Arguments to create a User_data.
     * @example
     * // Create one User_data
     * const User_data = await prisma.user_data.create({
     *   data: {
     *     // ... data to create a User_data
     *   }
     * })
     * 
    **/
    create<T extends user_dataCreateArgs>(
      args: SelectSubset<T, user_dataCreateArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Create many User_data.
     *     @param {user_dataCreateManyArgs} args - Arguments to create many User_data.
     *     @example
     *     // Create many User_data
     *     const user_data = await prisma.user_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_dataCreateManyArgs>(
      args?: SelectSubset<T, user_dataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_data.
     * @param {user_dataDeleteArgs} args - Arguments to delete one User_data.
     * @example
     * // Delete one User_data
     * const User_data = await prisma.user_data.delete({
     *   where: {
     *     // ... filter to delete one User_data
     *   }
     * })
     * 
    **/
    delete<T extends user_dataDeleteArgs>(
      args: SelectSubset<T, user_dataDeleteArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Update one User_data.
     * @param {user_dataUpdateArgs} args - Arguments to update one User_data.
     * @example
     * // Update one User_data
     * const user_data = await prisma.user_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_dataUpdateArgs>(
      args: SelectSubset<T, user_dataUpdateArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Delete zero or more User_data.
     * @param {user_dataDeleteManyArgs} args - Arguments to filter User_data to delete.
     * @example
     * // Delete a few User_data
     * const { count } = await prisma.user_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_dataDeleteManyArgs>(
      args?: SelectSubset<T, user_dataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_data
     * const user_data = await prisma.user_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_dataUpdateManyArgs>(
      args: SelectSubset<T, user_dataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_data.
     * @param {user_dataUpsertArgs} args - Arguments to update or create a User_data.
     * @example
     * // Update or create a User_data
     * const user_data = await prisma.user_data.upsert({
     *   create: {
     *     // ... data to create a User_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_data we want to update
     *   }
     * })
    **/
    upsert<T extends user_dataUpsertArgs>(
      args: SelectSubset<T, user_dataUpsertArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Find one User_data that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_dataFindUniqueOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Find the first User_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Count the number of User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataCountArgs} args - Arguments to filter User_data to count.
     * @example
     * // Count the number of User_data
     * const count = await prisma.user_data.count({
     *   where: {
     *     // ... the filter for the User_data we want to count
     *   }
     * })
    **/
    count<T extends user_dataCountArgs>(
      args?: Subset<T, user_dataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_dataAggregateArgs>(args: Subset<T, User_dataAggregateArgs>): PrismaPromise<GetUser_dataAggregateType<T>>

    /**
     * Group by User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_dataGroupByArgs['orderBy'] }
        : { orderBy?: User_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_dataGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_dataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_data base type for findUnique actions
   */
  export type user_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where: user_dataWhereUniqueInput
  }

  /**
   * user_data: findUnique
   */
  export interface user_dataFindUniqueArgs extends user_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data base type for findFirst actions
   */
  export type user_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_data.
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_data.
     * 
    **/
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }

  /**
   * user_data: findFirst
   */
  export interface user_dataFindFirstArgs extends user_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data findMany
   */
  export type user_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_data.
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }


  /**
   * user_data create
   */
  export type user_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The data needed to create a user_data.
     * 
    **/
    data: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
  }


  /**
   * user_data createMany
   */
  export type user_dataCreateManyArgs = {
    /**
     * The data used to create many user_data.
     * 
    **/
    data: Enumerable<user_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_data update
   */
  export type user_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The data needed to update a user_data.
     * 
    **/
    data: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
    /**
     * Choose, which user_data to update.
     * 
    **/
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data updateMany
   */
  export type user_dataUpdateManyArgs = {
    /**
     * The data used to update user_data.
     * 
    **/
    data: XOR<user_dataUpdateManyMutationInput, user_dataUncheckedUpdateManyInput>
    /**
     * Filter which user_data to update
     * 
    **/
    where?: user_dataWhereInput
  }


  /**
   * user_data upsert
   */
  export type user_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The filter to search for the user_data to update in case it exists.
     * 
    **/
    where: user_dataWhereUniqueInput
    /**
     * In case the user_data found by the `where` argument doesn't exist, create a new user_data with this data.
     * 
    **/
    create: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
    /**
     * In case the user_data was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
  }


  /**
   * user_data delete
   */
  export type user_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter which user_data to delete.
     * 
    **/
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data deleteMany
   */
  export type user_dataDeleteManyArgs = {
    /**
     * Filter which user_data to delete
     * 
    **/
    where?: user_dataWhereInput
  }


  /**
   * user_data: findUniqueOrThrow
   */
  export type user_dataFindUniqueOrThrowArgs = user_dataFindUniqueArgsBase
      

  /**
   * user_data: findFirstOrThrow
   */
  export type user_dataFindFirstOrThrowArgs = user_dataFindFirstArgsBase
      

  /**
   * user_data without action
   */
  export type user_dataArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
  }



  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    user_name: number
    first_name: number
    last_name: number
    date_joined: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    user_name: string
    first_name: string | null
    last_name: string | null
    date_joined: Date
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    user_name?: boolean
    first_name?: boolean
    last_name?: boolean
    date_joined?: boolean
    email?: boolean
    password?: boolean
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    user_data?: boolean | user_dataFindManyArgs
    user_ingredient?: boolean | User_IngredientFindManyArgs
    user_version?: boolean | UserVersionFindManyArgs
    recipes?: boolean | RecipeFindManyArgs
    version?: boolean | VersionFindManyArgs
    ingredients?: boolean | IngredientFindManyArgs
    spec?: boolean | SpecFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersInclude = {
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    user_data?: boolean | user_dataFindManyArgs
    user_ingredient?: boolean | User_IngredientFindManyArgs
    user_version?: boolean | UserVersionFindManyArgs
    recipes?: boolean | RecipeFindManyArgs
    version?: boolean | VersionFindManyArgs
    ingredients?: boolean | IngredientFindManyArgs
    spec?: boolean | SpecFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_data' ? Array < user_dataGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_ingredient' ? Array < User_IngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_version' ? Array < UserVersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'recipes' ? Array < RecipeGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'ingredients' ? Array < IngredientGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_data' ? Array < user_dataGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_ingredient' ? Array < User_IngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_version' ? Array < UserVersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'recipes' ? Array < RecipeGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'version' ? Array < VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'ingredients' ? Array < IngredientGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'spec' ? Array < SpecGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Users ? Users[P] : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups_mods<T extends groups_modsFindManyArgs = {}>(args?: Subset<T, groups_modsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>;

    groups_users<T extends groups_usersFindManyArgs = {}>(args?: Subset<T, groups_usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>;

    user_data<T extends user_dataFindManyArgs = {}>(args?: Subset<T, user_dataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_data>>, PrismaPromise<Array<user_dataGetPayload<T>>>>;

    user_ingredient<T extends User_IngredientFindManyArgs = {}>(args?: Subset<T, User_IngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User_Ingredient>>, PrismaPromise<Array<User_IngredientGetPayload<T>>>>;

    user_version<T extends UserVersionFindManyArgs = {}>(args?: Subset<T, UserVersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserVersion>>, PrismaPromise<Array<UserVersionGetPayload<T>>>>;

    recipes<T extends RecipeFindManyArgs = {}>(args?: Subset<T, RecipeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Recipe>>, PrismaPromise<Array<RecipeGetPayload<T>>>>;

    version<T extends VersionFindManyArgs = {}>(args?: Subset<T, VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>;

    ingredients<T extends IngredientFindManyArgs = {}>(args?: Subset<T, IngredientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Ingredient>>, PrismaPromise<Array<IngredientGetPayload<T>>>>;

    spec<T extends SpecFindManyArgs = {}>(args?: Subset<T, SpecFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Spec>>, PrismaPromise<Array<SpecGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users: findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users: findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users: findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = UsersFindUniqueArgsBase
      

  /**
   * Users: findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = UsersFindFirstArgsBase
      

  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model User_Ingredient
   */


  export type AggregateUser_Ingredient = {
    _count: User_IngredientCountAggregateOutputType | null
    _avg: User_IngredientAvgAggregateOutputType | null
    _sum: User_IngredientSumAggregateOutputType | null
    _min: User_IngredientMinAggregateOutputType | null
    _max: User_IngredientMaxAggregateOutputType | null
  }

  export type User_IngredientAvgAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type User_IngredientSumAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type User_IngredientMinAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type User_IngredientMaxAggregateOutputType = {
    userId: number | null
    ingredientId: number | null
  }

  export type User_IngredientCountAggregateOutputType = {
    userId: number
    ingredientId: number
    _all: number
  }


  export type User_IngredientAvgAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type User_IngredientSumAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type User_IngredientMinAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type User_IngredientMaxAggregateInputType = {
    userId?: true
    ingredientId?: true
  }

  export type User_IngredientCountAggregateInputType = {
    userId?: true
    ingredientId?: true
    _all?: true
  }

  export type User_IngredientAggregateArgs = {
    /**
     * Filter which User_Ingredient to aggregate.
     * 
    **/
    where?: User_IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<User_IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: User_IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned User_Ingredients
    **/
    _count?: true | User_IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_IngredientMaxAggregateInputType
  }

  export type GetUser_IngredientAggregateType<T extends User_IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_Ingredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_Ingredient[P]>
      : GetScalarType<T[P], AggregateUser_Ingredient[P]>
  }




  export type User_IngredientGroupByArgs = {
    where?: User_IngredientWhereInput
    orderBy?: Enumerable<User_IngredientOrderByWithAggregationInput>
    by: Array<User_IngredientScalarFieldEnum>
    having?: User_IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_IngredientCountAggregateInputType | true
    _avg?: User_IngredientAvgAggregateInputType
    _sum?: User_IngredientSumAggregateInputType
    _min?: User_IngredientMinAggregateInputType
    _max?: User_IngredientMaxAggregateInputType
  }


  export type User_IngredientGroupByOutputType = {
    userId: number
    ingredientId: number
    _count: User_IngredientCountAggregateOutputType | null
    _avg: User_IngredientAvgAggregateOutputType | null
    _sum: User_IngredientSumAggregateOutputType | null
    _min: User_IngredientMinAggregateOutputType | null
    _max: User_IngredientMaxAggregateOutputType | null
  }

  type GetUser_IngredientGroupByPayload<T extends User_IngredientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], User_IngredientGroupByOutputType[P]>
        }
      >
    >


  export type User_IngredientSelect = {
    userId?: boolean
    ingredientId?: boolean
    ingredients?: boolean | IngredientArgs
    users?: boolean | UsersArgs
  }

  export type User_IngredientInclude = {
    ingredients?: boolean | IngredientArgs
    users?: boolean | UsersArgs
  }

  export type User_IngredientGetPayload<
    S extends boolean | null | undefined | User_IngredientArgs,
    U = keyof S
      > = S extends true
        ? User_Ingredient
    : S extends undefined
    ? never
    : S extends User_IngredientArgs | User_IngredientFindManyArgs
    ?'include' extends U
    ? User_Ingredient  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredients' ? IngredientGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User_Ingredient ? User_Ingredient[P] : never
  } 
    : User_Ingredient
  : User_Ingredient


  type User_IngredientCountArgs = Merge<
    Omit<User_IngredientFindManyArgs, 'select' | 'include'> & {
      select?: User_IngredientCountAggregateInputType | true
    }
  >

  export interface User_IngredientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User_Ingredient that matches the filter.
     * @param {User_IngredientFindUniqueArgs} args - Arguments to find a User_Ingredient
     * @example
     * // Get one User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends User_IngredientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, User_IngredientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User_Ingredient'> extends True ? CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>> : CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient | null >, Prisma__User_IngredientClient<User_IngredientGetPayload<T> | null >>

    /**
     * Find the first User_Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientFindFirstArgs} args - Arguments to find a User_Ingredient
     * @example
     * // Get one User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends User_IngredientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, User_IngredientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User_Ingredient'> extends True ? CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>> : CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient | null >, Prisma__User_IngredientClient<User_IngredientGetPayload<T> | null >>

    /**
     * Find zero or more User_Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_Ingredients
     * const user_Ingredients = await prisma.user_Ingredient.findMany()
     * 
     * // Get first 10 User_Ingredients
     * const user_Ingredients = await prisma.user_Ingredient.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const user_IngredientWithUserIdOnly = await prisma.user_Ingredient.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends User_IngredientFindManyArgs>(
      args?: SelectSubset<T, User_IngredientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User_Ingredient>>, PrismaPromise<Array<User_IngredientGetPayload<T>>>>

    /**
     * Create a User_Ingredient.
     * @param {User_IngredientCreateArgs} args - Arguments to create a User_Ingredient.
     * @example
     * // Create one User_Ingredient
     * const User_Ingredient = await prisma.user_Ingredient.create({
     *   data: {
     *     // ... data to create a User_Ingredient
     *   }
     * })
     * 
    **/
    create<T extends User_IngredientCreateArgs>(
      args: SelectSubset<T, User_IngredientCreateArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Create many User_Ingredients.
     *     @param {User_IngredientCreateManyArgs} args - Arguments to create many User_Ingredients.
     *     @example
     *     // Create many User_Ingredients
     *     const user_Ingredient = await prisma.user_Ingredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends User_IngredientCreateManyArgs>(
      args?: SelectSubset<T, User_IngredientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_Ingredient.
     * @param {User_IngredientDeleteArgs} args - Arguments to delete one User_Ingredient.
     * @example
     * // Delete one User_Ingredient
     * const User_Ingredient = await prisma.user_Ingredient.delete({
     *   where: {
     *     // ... filter to delete one User_Ingredient
     *   }
     * })
     * 
    **/
    delete<T extends User_IngredientDeleteArgs>(
      args: SelectSubset<T, User_IngredientDeleteArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Update one User_Ingredient.
     * @param {User_IngredientUpdateArgs} args - Arguments to update one User_Ingredient.
     * @example
     * // Update one User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends User_IngredientUpdateArgs>(
      args: SelectSubset<T, User_IngredientUpdateArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Delete zero or more User_Ingredients.
     * @param {User_IngredientDeleteManyArgs} args - Arguments to filter User_Ingredients to delete.
     * @example
     * // Delete a few User_Ingredients
     * const { count } = await prisma.user_Ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends User_IngredientDeleteManyArgs>(
      args?: SelectSubset<T, User_IngredientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_Ingredients
     * const user_Ingredient = await prisma.user_Ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends User_IngredientUpdateManyArgs>(
      args: SelectSubset<T, User_IngredientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_Ingredient.
     * @param {User_IngredientUpsertArgs} args - Arguments to update or create a User_Ingredient.
     * @example
     * // Update or create a User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.upsert({
     *   create: {
     *     // ... data to create a User_Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_Ingredient we want to update
     *   }
     * })
    **/
    upsert<T extends User_IngredientUpsertArgs>(
      args: SelectSubset<T, User_IngredientUpsertArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Find one User_Ingredient that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {User_IngredientFindUniqueOrThrowArgs} args - Arguments to find a User_Ingredient
     * @example
     * // Get one User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends User_IngredientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, User_IngredientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Find the first User_Ingredient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientFindFirstOrThrowArgs} args - Arguments to find a User_Ingredient
     * @example
     * // Get one User_Ingredient
     * const user_Ingredient = await prisma.user_Ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends User_IngredientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, User_IngredientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__User_IngredientClient<User_Ingredient>, Prisma__User_IngredientClient<User_IngredientGetPayload<T>>>

    /**
     * Count the number of User_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientCountArgs} args - Arguments to filter User_Ingredients to count.
     * @example
     * // Count the number of User_Ingredients
     * const count = await prisma.user_Ingredient.count({
     *   where: {
     *     // ... the filter for the User_Ingredients we want to count
     *   }
     * })
    **/
    count<T extends User_IngredientCountArgs>(
      args?: Subset<T, User_IngredientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_IngredientAggregateArgs>(args: Subset<T, User_IngredientAggregateArgs>): PrismaPromise<GetUser_IngredientAggregateType<T>>

    /**
     * Group by User_Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_IngredientGroupByArgs['orderBy'] }
        : { orderBy?: User_IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_IngredientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User_Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__User_IngredientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredients<T extends IngredientArgs = {}>(args?: Subset<T, IngredientArgs>): CheckSelect<T, Prisma__IngredientClient<Ingredient | null >, Prisma__IngredientClient<IngredientGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User_Ingredient base type for findUnique actions
   */
  export type User_IngredientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * Filter, which User_Ingredient to fetch.
     * 
    **/
    where: User_IngredientWhereUniqueInput
  }

  /**
   * User_Ingredient: findUnique
   */
  export interface User_IngredientFindUniqueArgs extends User_IngredientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User_Ingredient base type for findFirst actions
   */
  export type User_IngredientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * Filter, which User_Ingredient to fetch.
     * 
    **/
    where?: User_IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<User_IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_Ingredients.
     * 
    **/
    cursor?: User_IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_Ingredients.
     * 
    **/
    distinct?: Enumerable<User_IngredientScalarFieldEnum>
  }

  /**
   * User_Ingredient: findFirst
   */
  export interface User_IngredientFindFirstArgs extends User_IngredientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User_Ingredient findMany
   */
  export type User_IngredientFindManyArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * Filter, which User_Ingredients to fetch.
     * 
    **/
    where?: User_IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<User_IngredientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing User_Ingredients.
     * 
    **/
    cursor?: User_IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_IngredientScalarFieldEnum>
  }


  /**
   * User_Ingredient create
   */
  export type User_IngredientCreateArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * The data needed to create a User_Ingredient.
     * 
    **/
    data: XOR<User_IngredientCreateInput, User_IngredientUncheckedCreateInput>
  }


  /**
   * User_Ingredient createMany
   */
  export type User_IngredientCreateManyArgs = {
    /**
     * The data used to create many User_Ingredients.
     * 
    **/
    data: Enumerable<User_IngredientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User_Ingredient update
   */
  export type User_IngredientUpdateArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * The data needed to update a User_Ingredient.
     * 
    **/
    data: XOR<User_IngredientUpdateInput, User_IngredientUncheckedUpdateInput>
    /**
     * Choose, which User_Ingredient to update.
     * 
    **/
    where: User_IngredientWhereUniqueInput
  }


  /**
   * User_Ingredient updateMany
   */
  export type User_IngredientUpdateManyArgs = {
    /**
     * The data used to update User_Ingredients.
     * 
    **/
    data: XOR<User_IngredientUpdateManyMutationInput, User_IngredientUncheckedUpdateManyInput>
    /**
     * Filter which User_Ingredients to update
     * 
    **/
    where?: User_IngredientWhereInput
  }


  /**
   * User_Ingredient upsert
   */
  export type User_IngredientUpsertArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * The filter to search for the User_Ingredient to update in case it exists.
     * 
    **/
    where: User_IngredientWhereUniqueInput
    /**
     * In case the User_Ingredient found by the `where` argument doesn't exist, create a new User_Ingredient with this data.
     * 
    **/
    create: XOR<User_IngredientCreateInput, User_IngredientUncheckedCreateInput>
    /**
     * In case the User_Ingredient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<User_IngredientUpdateInput, User_IngredientUncheckedUpdateInput>
  }


  /**
   * User_Ingredient delete
   */
  export type User_IngredientDeleteArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
    /**
     * Filter which User_Ingredient to delete.
     * 
    **/
    where: User_IngredientWhereUniqueInput
  }


  /**
   * User_Ingredient deleteMany
   */
  export type User_IngredientDeleteManyArgs = {
    /**
     * Filter which User_Ingredients to delete
     * 
    **/
    where?: User_IngredientWhereInput
  }


  /**
   * User_Ingredient: findUniqueOrThrow
   */
  export type User_IngredientFindUniqueOrThrowArgs = User_IngredientFindUniqueArgsBase
      

  /**
   * User_Ingredient: findFirstOrThrow
   */
  export type User_IngredientFindFirstOrThrowArgs = User_IngredientFindFirstArgsBase
      

  /**
   * User_Ingredient without action
   */
  export type User_IngredientArgs = {
    /**
     * Select specific fields to fetch from the User_Ingredient
     * 
    **/
    select?: User_IngredientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: User_IngredientInclude | null
  }



  /**
   * Model UserVersion
   */


  export type AggregateUserVersion = {
    _count: UserVersionCountAggregateOutputType | null
    _avg: UserVersionAvgAggregateOutputType | null
    _sum: UserVersionSumAggregateOutputType | null
    _min: UserVersionMinAggregateOutputType | null
    _max: UserVersionMaxAggregateOutputType | null
  }

  export type UserVersionAvgAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type UserVersionSumAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type UserVersionMinAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type UserVersionMaxAggregateOutputType = {
    userId: number | null
    versionId: number | null
  }

  export type UserVersionCountAggregateOutputType = {
    userId: number
    versionId: number
    _all: number
  }


  export type UserVersionAvgAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type UserVersionSumAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type UserVersionMinAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type UserVersionMaxAggregateInputType = {
    userId?: true
    versionId?: true
  }

  export type UserVersionCountAggregateInputType = {
    userId?: true
    versionId?: true
    _all?: true
  }

  export type UserVersionAggregateArgs = {
    /**
     * Filter which UserVersion to aggregate.
     * 
    **/
    where?: UserVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserVersions
    **/
    _count?: true | UserVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserVersionMaxAggregateInputType
  }

  export type GetUserVersionAggregateType<T extends UserVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserVersion[P]>
      : GetScalarType<T[P], AggregateUserVersion[P]>
  }




  export type UserVersionGroupByArgs = {
    where?: UserVersionWhereInput
    orderBy?: Enumerable<UserVersionOrderByWithAggregationInput>
    by: Array<UserVersionScalarFieldEnum>
    having?: UserVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserVersionCountAggregateInputType | true
    _avg?: UserVersionAvgAggregateInputType
    _sum?: UserVersionSumAggregateInputType
    _min?: UserVersionMinAggregateInputType
    _max?: UserVersionMaxAggregateInputType
  }


  export type UserVersionGroupByOutputType = {
    userId: number
    versionId: number
    _count: UserVersionCountAggregateOutputType | null
    _avg: UserVersionAvgAggregateOutputType | null
    _sum: UserVersionSumAggregateOutputType | null
    _min: UserVersionMinAggregateOutputType | null
    _max: UserVersionMaxAggregateOutputType | null
  }

  type GetUserVersionGroupByPayload<T extends UserVersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserVersionGroupByOutputType[P]>
            : GetScalarType<T[P], UserVersionGroupByOutputType[P]>
        }
      >
    >


  export type UserVersionSelect = {
    userId?: boolean
    versionId?: boolean
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type UserVersionInclude = {
    version?: boolean | VersionArgs
    users?: boolean | UsersArgs
  }

  export type UserVersionGetPayload<
    S extends boolean | null | undefined | UserVersionArgs,
    U = keyof S
      > = S extends true
        ? UserVersion
    : S extends undefined
    ? never
    : S extends UserVersionArgs | UserVersionFindManyArgs
    ?'include' extends U
    ? UserVersion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserVersion ? UserVersion[P] : never
  } 
    : UserVersion
  : UserVersion


  type UserVersionCountArgs = Merge<
    Omit<UserVersionFindManyArgs, 'select' | 'include'> & {
      select?: UserVersionCountAggregateInputType | true
    }
  >

  export interface UserVersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserVersion that matches the filter.
     * @param {UserVersionFindUniqueArgs} args - Arguments to find a UserVersion
     * @example
     * // Get one UserVersion
     * const userVersion = await prisma.userVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserVersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserVersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserVersion'> extends True ? CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>> : CheckSelect<T, Prisma__UserVersionClient<UserVersion | null >, Prisma__UserVersionClient<UserVersionGetPayload<T> | null >>

    /**
     * Find the first UserVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionFindFirstArgs} args - Arguments to find a UserVersion
     * @example
     * // Get one UserVersion
     * const userVersion = await prisma.userVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserVersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserVersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserVersion'> extends True ? CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>> : CheckSelect<T, Prisma__UserVersionClient<UserVersion | null >, Prisma__UserVersionClient<UserVersionGetPayload<T> | null >>

    /**
     * Find zero or more UserVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserVersions
     * const userVersions = await prisma.userVersion.findMany()
     * 
     * // Get first 10 UserVersions
     * const userVersions = await prisma.userVersion.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userVersionWithUserIdOnly = await prisma.userVersion.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserVersionFindManyArgs>(
      args?: SelectSubset<T, UserVersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserVersion>>, PrismaPromise<Array<UserVersionGetPayload<T>>>>

    /**
     * Create a UserVersion.
     * @param {UserVersionCreateArgs} args - Arguments to create a UserVersion.
     * @example
     * // Create one UserVersion
     * const UserVersion = await prisma.userVersion.create({
     *   data: {
     *     // ... data to create a UserVersion
     *   }
     * })
     * 
    **/
    create<T extends UserVersionCreateArgs>(
      args: SelectSubset<T, UserVersionCreateArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Create many UserVersions.
     *     @param {UserVersionCreateManyArgs} args - Arguments to create many UserVersions.
     *     @example
     *     // Create many UserVersions
     *     const userVersion = await prisma.userVersion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserVersionCreateManyArgs>(
      args?: SelectSubset<T, UserVersionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserVersion.
     * @param {UserVersionDeleteArgs} args - Arguments to delete one UserVersion.
     * @example
     * // Delete one UserVersion
     * const UserVersion = await prisma.userVersion.delete({
     *   where: {
     *     // ... filter to delete one UserVersion
     *   }
     * })
     * 
    **/
    delete<T extends UserVersionDeleteArgs>(
      args: SelectSubset<T, UserVersionDeleteArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Update one UserVersion.
     * @param {UserVersionUpdateArgs} args - Arguments to update one UserVersion.
     * @example
     * // Update one UserVersion
     * const userVersion = await prisma.userVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserVersionUpdateArgs>(
      args: SelectSubset<T, UserVersionUpdateArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Delete zero or more UserVersions.
     * @param {UserVersionDeleteManyArgs} args - Arguments to filter UserVersions to delete.
     * @example
     * // Delete a few UserVersions
     * const { count } = await prisma.userVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserVersionDeleteManyArgs>(
      args?: SelectSubset<T, UserVersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserVersions
     * const userVersion = await prisma.userVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserVersionUpdateManyArgs>(
      args: SelectSubset<T, UserVersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserVersion.
     * @param {UserVersionUpsertArgs} args - Arguments to update or create a UserVersion.
     * @example
     * // Update or create a UserVersion
     * const userVersion = await prisma.userVersion.upsert({
     *   create: {
     *     // ... data to create a UserVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserVersion we want to update
     *   }
     * })
    **/
    upsert<T extends UserVersionUpsertArgs>(
      args: SelectSubset<T, UserVersionUpsertArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Find one UserVersion that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserVersionFindUniqueOrThrowArgs} args - Arguments to find a UserVersion
     * @example
     * // Get one UserVersion
     * const userVersion = await prisma.userVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserVersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserVersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Find the first UserVersion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionFindFirstOrThrowArgs} args - Arguments to find a UserVersion
     * @example
     * // Get one UserVersion
     * const userVersion = await prisma.userVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserVersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserVersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserVersionClient<UserVersion>, Prisma__UserVersionClient<UserVersionGetPayload<T>>>

    /**
     * Count the number of UserVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionCountArgs} args - Arguments to filter UserVersions to count.
     * @example
     * // Count the number of UserVersions
     * const count = await prisma.userVersion.count({
     *   where: {
     *     // ... the filter for the UserVersions we want to count
     *   }
     * })
    **/
    count<T extends UserVersionCountArgs>(
      args?: Subset<T, UserVersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserVersionAggregateArgs>(args: Subset<T, UserVersionAggregateArgs>): PrismaPromise<GetUserVersionAggregateType<T>>

    /**
     * Group by UserVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserVersionGroupByArgs['orderBy'] }
        : { orderBy?: UserVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserVersionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | null >, Prisma__VersionClient<VersionGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserVersion base type for findUnique actions
   */
  export type UserVersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * Filter, which UserVersion to fetch.
     * 
    **/
    where: UserVersionWhereUniqueInput
  }

  /**
   * UserVersion: findUnique
   */
  export interface UserVersionFindUniqueArgs extends UserVersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserVersion base type for findFirst actions
   */
  export type UserVersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * Filter, which UserVersion to fetch.
     * 
    **/
    where?: UserVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserVersions.
     * 
    **/
    cursor?: UserVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVersions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserVersions.
     * 
    **/
    distinct?: Enumerable<UserVersionScalarFieldEnum>
  }

  /**
   * UserVersion: findFirst
   */
  export interface UserVersionFindFirstArgs extends UserVersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserVersion findMany
   */
  export type UserVersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * Filter, which UserVersions to fetch.
     * 
    **/
    where?: UserVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserVersions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserVersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserVersions.
     * 
    **/
    cursor?: UserVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserVersions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserVersions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserVersionScalarFieldEnum>
  }


  /**
   * UserVersion create
   */
  export type UserVersionCreateArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * The data needed to create a UserVersion.
     * 
    **/
    data: XOR<UserVersionCreateInput, UserVersionUncheckedCreateInput>
  }


  /**
   * UserVersion createMany
   */
  export type UserVersionCreateManyArgs = {
    /**
     * The data used to create many UserVersions.
     * 
    **/
    data: Enumerable<UserVersionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserVersion update
   */
  export type UserVersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * The data needed to update a UserVersion.
     * 
    **/
    data: XOR<UserVersionUpdateInput, UserVersionUncheckedUpdateInput>
    /**
     * Choose, which UserVersion to update.
     * 
    **/
    where: UserVersionWhereUniqueInput
  }


  /**
   * UserVersion updateMany
   */
  export type UserVersionUpdateManyArgs = {
    /**
     * The data used to update UserVersions.
     * 
    **/
    data: XOR<UserVersionUpdateManyMutationInput, UserVersionUncheckedUpdateManyInput>
    /**
     * Filter which UserVersions to update
     * 
    **/
    where?: UserVersionWhereInput
  }


  /**
   * UserVersion upsert
   */
  export type UserVersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * The filter to search for the UserVersion to update in case it exists.
     * 
    **/
    where: UserVersionWhereUniqueInput
    /**
     * In case the UserVersion found by the `where` argument doesn't exist, create a new UserVersion with this data.
     * 
    **/
    create: XOR<UserVersionCreateInput, UserVersionUncheckedCreateInput>
    /**
     * In case the UserVersion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserVersionUpdateInput, UserVersionUncheckedUpdateInput>
  }


  /**
   * UserVersion delete
   */
  export type UserVersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
    /**
     * Filter which UserVersion to delete.
     * 
    **/
    where: UserVersionWhereUniqueInput
  }


  /**
   * UserVersion deleteMany
   */
  export type UserVersionDeleteManyArgs = {
    /**
     * Filter which UserVersions to delete
     * 
    **/
    where?: UserVersionWhereInput
  }


  /**
   * UserVersion: findUniqueOrThrow
   */
  export type UserVersionFindUniqueOrThrowArgs = UserVersionFindUniqueArgsBase
      

  /**
   * UserVersion: findFirstOrThrow
   */
  export type UserVersionFindFirstOrThrowArgs = UserVersionFindFirstArgsBase
      

  /**
   * UserVersion without action
   */
  export type UserVersionArgs = {
    /**
     * Select specific fields to fetch from the UserVersion
     * 
    **/
    select?: UserVersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserVersionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Group_VersionScalarFieldEnum: {
    groupId: 'groupId',
    versionId: 'versionId'
  };

  export type Group_VersionScalarFieldEnum = (typeof Group_VersionScalarFieldEnum)[keyof typeof Group_VersionScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    id: 'id',
    group_name: 'group_name',
    date_created: 'date_created'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const Groups_IngredientsScalarFieldEnum: {
    group_id: 'group_id',
    ingredient_id: 'ingredient_id'
  };

  export type Groups_IngredientsScalarFieldEnum = (typeof Groups_IngredientsScalarFieldEnum)[keyof typeof Groups_IngredientsScalarFieldEnum]


  export const Groups_modsScalarFieldEnum: {
    user_id: 'user_id',
    group_id: 'group_id'
  };

  export type Groups_modsScalarFieldEnum = (typeof Groups_modsScalarFieldEnum)[keyof typeof Groups_modsScalarFieldEnum]


  export const Groups_usersScalarFieldEnum: {
    user_id: 'user_id',
    group_id: 'group_id'
  };

  export type Groups_usersScalarFieldEnum = (typeof Groups_usersScalarFieldEnum)[keyof typeof Groups_usersScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    date_created: 'date_created',
    name: 'name',
    amount: 'amount',
    unit: 'unit',
    price: 'price',
    source: 'source',
    postedById: 'postedById'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    origin: 'origin',
    history: 'history',
    postedById: 'postedById'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SpecScalarFieldEnum: {
    id: 'id',
    ingredientId: 'ingredientId',
    order: 'order',
    amount: 'amount',
    unit: 'unit',
    versionId: 'versionId',
    postedById: 'postedById'
  };

  export type SpecScalarFieldEnum = (typeof SpecScalarFieldEnum)[keyof typeof SpecScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserVersionScalarFieldEnum: {
    userId: 'userId',
    versionId: 'versionId'
  };

  export type UserVersionScalarFieldEnum = (typeof UserVersionScalarFieldEnum)[keyof typeof UserVersionScalarFieldEnum]


  export const User_IngredientScalarFieldEnum: {
    userId: 'userId',
    ingredientId: 'ingredientId'
  };

  export type User_IngredientScalarFieldEnum = (typeof User_IngredientScalarFieldEnum)[keyof typeof User_IngredientScalarFieldEnum]


  export const User_dataScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    user_bio: 'user_bio',
    work_place: 'work_place',
    profile_picture: 'profile_picture'
  };

  export type User_dataScalarFieldEnum = (typeof User_dataScalarFieldEnum)[keyof typeof User_dataScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    user_name: 'user_name',
    first_name: 'first_name',
    last_name: 'last_name',
    date_joined: 'date_joined',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const VersionScalarFieldEnum: {
    id: 'id',
    versionName: 'versionName',
    postedById: 'postedById',
    instructions: 'instructions',
    glassware: 'glassware',
    ice: 'ice',
    recipeId: 'recipeId'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type GroupsWhereInput = {
    AND?: Enumerable<GroupsWhereInput>
    OR?: Enumerable<GroupsWhereInput>
    NOT?: Enumerable<GroupsWhereInput>
    id?: IntFilter | number
    group_name?: StringFilter | string
    date_created?: DateTimeFilter | Date | string
    groups_ingredients?: Groups_IngredientsListRelationFilter
    groups_mods?: Groups_modsListRelationFilter
    group_version?: Group_VersionListRelationFilter
    groups_users?: Groups_usersListRelationFilter
  }

  export type GroupsOrderByWithRelationInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
    groups_ingredients?: Groups_IngredientsOrderByRelationAggregateInput
    groups_mods?: groups_modsOrderByRelationAggregateInput
    group_version?: Group_VersionOrderByRelationAggregateInput
    groups_users?: groups_usersOrderByRelationAggregateInput
  }

  export type GroupsWhereUniqueInput = {
    id?: number
  }

  export type GroupsOrderByWithAggregationInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
    _count?: GroupsCountOrderByAggregateInput
    _avg?: GroupsAvgOrderByAggregateInput
    _max?: GroupsMaxOrderByAggregateInput
    _min?: GroupsMinOrderByAggregateInput
    _sum?: GroupsSumOrderByAggregateInput
  }

  export type GroupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    group_name?: StringWithAggregatesFilter | string
    date_created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Groups_IngredientsWhereInput = {
    AND?: Enumerable<Groups_IngredientsWhereInput>
    OR?: Enumerable<Groups_IngredientsWhereInput>
    NOT?: Enumerable<Groups_IngredientsWhereInput>
    group_id?: IntFilter | number
    ingredient_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    ingredients?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }

  export type Groups_IngredientsOrderByWithRelationInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    ingredients?: IngredientOrderByWithRelationInput
  }

  export type Groups_IngredientsWhereUniqueInput = {
    group_id_ingredient_id?: Groups_IngredientsGroup_idIngredient_idCompoundUniqueInput
  }

  export type Groups_IngredientsOrderByWithAggregationInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
    _count?: Groups_IngredientsCountOrderByAggregateInput
    _avg?: Groups_IngredientsAvgOrderByAggregateInput
    _max?: Groups_IngredientsMaxOrderByAggregateInput
    _min?: Groups_IngredientsMinOrderByAggregateInput
    _sum?: Groups_IngredientsSumOrderByAggregateInput
  }

  export type Groups_IngredientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    group_id?: IntWithAggregatesFilter | number
    ingredient_id?: IntWithAggregatesFilter | number
  }

  export type groups_modsWhereInput = {
    AND?: Enumerable<groups_modsWhereInput>
    OR?: Enumerable<groups_modsWhereInput>
    NOT?: Enumerable<groups_modsWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type groups_modsOrderByWithRelationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type groups_modsWhereUniqueInput = {
    user_id_group_id?: groups_modsUser_idGroup_idCompoundUniqueInput
  }

  export type groups_modsOrderByWithAggregationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    _count?: groups_modsCountOrderByAggregateInput
    _avg?: groups_modsAvgOrderByAggregateInput
    _max?: groups_modsMaxOrderByAggregateInput
    _min?: groups_modsMinOrderByAggregateInput
    _sum?: groups_modsSumOrderByAggregateInput
  }

  export type groups_modsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    OR?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    group_id?: IntWithAggregatesFilter | number
  }

  export type Group_VersionWhereInput = {
    AND?: Enumerable<Group_VersionWhereInput>
    OR?: Enumerable<Group_VersionWhereInput>
    NOT?: Enumerable<Group_VersionWhereInput>
    groupId?: IntFilter | number
    versionId?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    version?: XOR<VersionRelationFilter, VersionWhereInput>
  }

  export type Group_VersionOrderByWithRelationInput = {
    groupId?: SortOrder
    versionId?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
  }

  export type Group_VersionWhereUniqueInput = {
    groupId_versionId?: Group_VersionGroupIdVersionIdCompoundUniqueInput
  }

  export type Group_VersionOrderByWithAggregationInput = {
    groupId?: SortOrder
    versionId?: SortOrder
    _count?: Group_VersionCountOrderByAggregateInput
    _avg?: Group_VersionAvgOrderByAggregateInput
    _max?: Group_VersionMaxOrderByAggregateInput
    _min?: Group_VersionMinOrderByAggregateInput
    _sum?: Group_VersionSumOrderByAggregateInput
  }

  export type Group_VersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Group_VersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<Group_VersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Group_VersionScalarWhereWithAggregatesInput>
    groupId?: IntWithAggregatesFilter | number
    versionId?: IntWithAggregatesFilter | number
  }

  export type groups_usersWhereInput = {
    AND?: Enumerable<groups_usersWhereInput>
    OR?: Enumerable<groups_usersWhereInput>
    NOT?: Enumerable<groups_usersWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type groups_usersOrderByWithRelationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type groups_usersWhereUniqueInput = {
    user_id_group_id?: groups_usersUser_idGroup_idCompoundUniqueInput
  }

  export type groups_usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    _count?: groups_usersCountOrderByAggregateInput
    _avg?: groups_usersAvgOrderByAggregateInput
    _max?: groups_usersMaxOrderByAggregateInput
    _min?: groups_usersMinOrderByAggregateInput
    _sum?: groups_usersSumOrderByAggregateInput
  }

  export type groups_usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    group_id?: IntWithAggregatesFilter | number
  }

  export type IngredientWhereInput = {
    AND?: Enumerable<IngredientWhereInput>
    OR?: Enumerable<IngredientWhereInput>
    NOT?: Enumerable<IngredientWhereInput>
    id?: IntFilter | number
    date_created?: DateTimeFilter | Date | string
    name?: StringFilter | string
    amount?: IntNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableFilter | string | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    groups_ingredients?: Groups_IngredientsListRelationFilter
    spec?: SpecListRelationFilter
    user_ingredient?: User_IngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    groups_ingredients?: Groups_IngredientsOrderByRelationAggregateInput
    spec?: SpecOrderByRelationAggregateInput
    user_ingredient?: User_IngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = {
    id?: number
  }

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _avg?: IngredientAvgOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
    _sum?: IngredientSumOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    OR?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IngredientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date_created?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    amount?: IntNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
    price?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableWithAggregatesFilter | string | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type SpecWhereInput = {
    AND?: Enumerable<SpecWhereInput>
    OR?: Enumerable<SpecWhereInput>
    NOT?: Enumerable<SpecWhereInput>
    id?: IntFilter | number
    ingredientId?: IntNullableFilter | number | null
    order?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput> | null
    version?: XOR<VersionRelationFilter, VersionWhereInput> | null
    versionId?: IntNullableFilter | number | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
  }

  export type SpecOrderByWithRelationInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    ingredient?: IngredientOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
    versionId?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
  }

  export type SpecWhereUniqueInput = {
    id?: number
  }

  export type SpecOrderByWithAggregationInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
    _count?: SpecCountOrderByAggregateInput
    _avg?: SpecAvgOrderByAggregateInput
    _max?: SpecMaxOrderByAggregateInput
    _min?: SpecMinOrderByAggregateInput
    _sum?: SpecSumOrderByAggregateInput
  }

  export type SpecScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ingredientId?: IntNullableWithAggregatesFilter | number | null
    order?: IntNullableWithAggregatesFilter | number | null
    amount?: FloatNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
    versionId?: IntNullableWithAggregatesFilter | number | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type RecipeWhereInput = {
    AND?: Enumerable<RecipeWhereInput>
    OR?: Enumerable<RecipeWhereInput>
    NOT?: Enumerable<RecipeWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    origin?: StringFilter | string
    history?: StringNullableFilter | string | null
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    version?: VersionListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    version?: VersionOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = {
    id?: number
  }

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecipeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    origin?: StringWithAggregatesFilter | string
    history?: StringNullableWithAggregatesFilter | string | null
    postedById?: IntNullableWithAggregatesFilter | number | null
  }

  export type VersionWhereInput = {
    AND?: Enumerable<VersionWhereInput>
    OR?: Enumerable<VersionWhereInput>
    NOT?: Enumerable<VersionWhereInput>
    id?: IntFilter | number
    versionName?: StringFilter | string
    postedBy?: XOR<UsersRelationFilter, UsersWhereInput> | null
    postedById?: IntNullableFilter | number | null
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
    group_version?: Group_VersionListRelationFilter
    user_version?: UserVersionListRelationFilter
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput> | null
    recipeId?: IntNullableFilter | number | null
    specs?: SpecListRelationFilter
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedBy?: UsersOrderByWithRelationInput
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    group_version?: Group_VersionOrderByRelationAggregateInput
    user_version?: UserVersionOrderByRelationAggregateInput
    recipe?: RecipeOrderByWithRelationInput
    recipeId?: SortOrder
    specs?: SpecOrderByRelationAggregateInput
  }

  export type VersionWhereUniqueInput = {
    id?: number
  }

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
    _count?: VersionCountOrderByAggregateInput
    _avg?: VersionAvgOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
    _sum?: VersionSumOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<VersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VersionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    versionName?: StringWithAggregatesFilter | string
    postedById?: IntNullableWithAggregatesFilter | number | null
    instructions?: StringNullableWithAggregatesFilter | string | null
    glassware?: StringNullableWithAggregatesFilter | string | null
    ice?: StringNullableWithAggregatesFilter | string | null
    recipeId?: IntNullableWithAggregatesFilter | number | null
  }

  export type user_dataWhereInput = {
    AND?: Enumerable<user_dataWhereInput>
    OR?: Enumerable<user_dataWhereInput>
    NOT?: Enumerable<user_dataWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    user_bio?: StringNullableFilter | string | null
    work_place?: StringNullableFilter | string | null
    profile_picture?: StringNullableFilter | string | null
    users?: XOR<UsersRelationFilter, UsersWhereInput> | null
  }

  export type user_dataOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
    users?: UsersOrderByWithRelationInput
  }

  export type user_dataWhereUniqueInput = {
    id?: number
  }

  export type user_dataOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
    _count?: user_dataCountOrderByAggregateInput
    _avg?: user_dataAvgOrderByAggregateInput
    _max?: user_dataMaxOrderByAggregateInput
    _min?: user_dataMinOrderByAggregateInput
    _sum?: user_dataSumOrderByAggregateInput
  }

  export type user_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
    user_bio?: StringNullableWithAggregatesFilter | string | null
    work_place?: StringNullableWithAggregatesFilter | string | null
    profile_picture?: StringNullableWithAggregatesFilter | string | null
  }

  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    user_name?: StringFilter | string
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    date_joined?: DateTimeFilter | Date | string
    email?: StringFilter | string
    password?: StringFilter | string
    groups_mods?: Groups_modsListRelationFilter
    groups_users?: Groups_usersListRelationFilter
    user_data?: User_dataListRelationFilter
    user_ingredient?: User_IngredientListRelationFilter
    user_version?: UserVersionListRelationFilter
    recipes?: RecipeListRelationFilter
    version?: VersionListRelationFilter
    ingredients?: IngredientListRelationFilter
    spec?: SpecListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    groups_mods?: groups_modsOrderByRelationAggregateInput
    groups_users?: groups_usersOrderByRelationAggregateInput
    user_data?: user_dataOrderByRelationAggregateInput
    user_ingredient?: User_IngredientOrderByRelationAggregateInput
    user_version?: UserVersionOrderByRelationAggregateInput
    recipes?: RecipeOrderByRelationAggregateInput
    version?: VersionOrderByRelationAggregateInput
    ingredients?: IngredientOrderByRelationAggregateInput
    spec?: SpecOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_name?: StringWithAggregatesFilter | string
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    date_joined?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type User_IngredientWhereInput = {
    AND?: Enumerable<User_IngredientWhereInput>
    OR?: Enumerable<User_IngredientWhereInput>
    NOT?: Enumerable<User_IngredientWhereInput>
    userId?: IntFilter | number
    ingredientId?: IntFilter | number
    ingredients?: XOR<IngredientRelationFilter, IngredientWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type User_IngredientOrderByWithRelationInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
    ingredients?: IngredientOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type User_IngredientWhereUniqueInput = {
    userId_ingredientId?: User_IngredientUserIdIngredientIdCompoundUniqueInput
  }

  export type User_IngredientOrderByWithAggregationInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
    _count?: User_IngredientCountOrderByAggregateInput
    _avg?: User_IngredientAvgOrderByAggregateInput
    _max?: User_IngredientMaxOrderByAggregateInput
    _min?: User_IngredientMinOrderByAggregateInput
    _sum?: User_IngredientSumOrderByAggregateInput
  }

  export type User_IngredientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<User_IngredientScalarWhereWithAggregatesInput>
    OR?: Enumerable<User_IngredientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<User_IngredientScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    ingredientId?: IntWithAggregatesFilter | number
  }

  export type UserVersionWhereInput = {
    AND?: Enumerable<UserVersionWhereInput>
    OR?: Enumerable<UserVersionWhereInput>
    NOT?: Enumerable<UserVersionWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type UserVersionOrderByWithRelationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    version?: VersionOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type UserVersionWhereUniqueInput = {
    userId_versionId?: UserVersionUserIdVersionIdCompoundUniqueInput
  }

  export type UserVersionOrderByWithAggregationInput = {
    userId?: SortOrder
    versionId?: SortOrder
    _count?: UserVersionCountOrderByAggregateInput
    _avg?: UserVersionAvgOrderByAggregateInput
    _max?: UserVersionMaxOrderByAggregateInput
    _min?: UserVersionMinOrderByAggregateInput
    _sum?: UserVersionSumOrderByAggregateInput
  }

  export type UserVersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserVersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserVersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserVersionScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    versionId?: IntWithAggregatesFilter | number
  }

  export type GroupsCreateInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUpdateInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsCreateManyInput = {
    id?: number
    group_name: string
    date_created: Date | string
  }

  export type GroupsUpdateManyMutationInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Groups_IngredientsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_ingredientsInput
    ingredients: IngredientCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
    ingredients?: IngredientUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsCreateManyInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsUpdateManyMutationInput = {

  }

  export type Groups_IngredientsUncheckedUpdateManyInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_modsInput
    users: UsersCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_modsNestedInput
    users?: UsersUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsCreateManyInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsUpdateManyMutationInput = {

  }

  export type groups_modsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type Group_VersionCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroup_versionInput
    version: VersionCreateNestedOneWithoutGroup_versionInput
  }

  export type Group_VersionUncheckedCreateInput = {
    groupId: number
    versionId: number
  }

  export type Group_VersionUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroup_versionNestedInput
    version?: VersionUpdateOneRequiredWithoutGroup_versionNestedInput
  }

  export type Group_VersionUncheckedUpdateInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type Group_VersionCreateManyInput = {
    groupId: number
    versionId: number
  }

  export type Group_VersionUpdateManyMutationInput = {

  }

  export type Group_VersionUncheckedUpdateManyInput = {
    groupId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_usersInput
    users: UsersCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_usersNestedInput
    users?: UsersUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersCreateManyInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersUpdateManyMutationInput = {

  }

  export type groups_usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type IngredientCreateInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUpdateInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
  }

  export type IngredientUpdateManyMutationInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecCreateInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    version?: VersionCreateNestedOneWithoutSpecsInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecUpdateInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    version?: VersionUpdateOneWithoutSpecsNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecCreateManyInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecUpdateManyMutationInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpecUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RecipeCreateInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedBy?: UsersCreateNestedOneWithoutRecipesInput
    version?: VersionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
    version?: VersionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutRecipesNestedInput
    version?: VersionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    version?: VersionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
  }

  export type RecipeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VersionCreateInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionCreateNestedManyWithoutVersionInput
    user_version?: UserVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutVersionInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionUpdateInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUncheckedUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionCreateManyInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipeId?: number | null
  }

  export type VersionUpdateManyMutationInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_dataCreateInput = {
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
    users?: UsersCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUpdateInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataCreateManyInput = {
    id?: number
    user_id?: number | null
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUpdateManyMutationInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
  }

  export type UsersUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type User_IngredientCreateInput = {
    ingredients: IngredientCreateNestedOneWithoutUser_ingredientInput
    users: UsersCreateNestedOneWithoutUser_ingredientInput
  }

  export type User_IngredientUncheckedCreateInput = {
    userId: number
    ingredientId: number
  }

  export type User_IngredientUpdateInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutUser_ingredientNestedInput
    users?: UsersUpdateOneRequiredWithoutUser_ingredientNestedInput
  }

  export type User_IngredientUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type User_IngredientCreateManyInput = {
    userId: number
    ingredientId: number
  }

  export type User_IngredientUpdateManyMutationInput = {

  }

  export type User_IngredientUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVersionCreateInput = {
    version: VersionCreateNestedOneWithoutUser_versionInput
    users: UsersCreateNestedOneWithoutUser_versionInput
  }

  export type UserVersionUncheckedCreateInput = {
    userId: number
    versionId: number
  }

  export type UserVersionUpdateInput = {
    version?: VersionUpdateOneRequiredWithoutUser_versionNestedInput
    users?: UsersUpdateOneRequiredWithoutUser_versionNestedInput
  }

  export type UserVersionUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVersionCreateManyInput = {
    userId: number
    versionId: number
  }

  export type UserVersionUpdateManyMutationInput = {

  }

  export type UserVersionUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Groups_IngredientsListRelationFilter = {
    every?: Groups_IngredientsWhereInput
    some?: Groups_IngredientsWhereInput
    none?: Groups_IngredientsWhereInput
  }

  export type Groups_modsListRelationFilter = {
    every?: groups_modsWhereInput
    some?: groups_modsWhereInput
    none?: groups_modsWhereInput
  }

  export type Group_VersionListRelationFilter = {
    every?: Group_VersionWhereInput
    some?: Group_VersionWhereInput
    none?: Group_VersionWhereInput
  }

  export type Groups_usersListRelationFilter = {
    every?: groups_usersWhereInput
    some?: groups_usersWhereInput
    none?: groups_usersWhereInput
  }

  export type Groups_IngredientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groups_modsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Group_VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groups_usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupsCountOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsMinOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupsRelationFilter = {
    is?: GroupsWhereInput
    isNot?: GroupsWhereInput
  }

  export type IngredientRelationFilter = {
    is?: IngredientWhereInput | null
    isNot?: IngredientWhereInput | null
  }

  export type Groups_IngredientsGroup_idIngredient_idCompoundUniqueInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsCountOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsAvgOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsMaxOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsMinOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsSumOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type groups_modsUser_idGroup_idCompoundUniqueInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsCountOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsMinOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsSumOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type VersionRelationFilter = {
    is?: VersionWhereInput
    isNot?: VersionWhereInput
  }

  export type Group_VersionGroupIdVersionIdCompoundUniqueInput = {
    groupId: number
    versionId: number
  }

  export type Group_VersionCountOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type Group_VersionAvgOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type Group_VersionMaxOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type Group_VersionMinOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type Group_VersionSumOrderByAggregateInput = {
    groupId?: SortOrder
    versionId?: SortOrder
  }

  export type groups_usersUser_idGroup_idCompoundUniqueInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersSumOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type SpecListRelationFilter = {
    every?: SpecWhereInput
    some?: SpecWhereInput
    none?: SpecWhereInput
  }

  export type User_IngredientListRelationFilter = {
    every?: User_IngredientWhereInput
    some?: User_IngredientWhereInput
    none?: User_IngredientWhereInput
  }

  export type SpecOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type User_IngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    postedById?: SortOrder
  }

  export type IngredientSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    postedById?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type SpecCountOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecAvgOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecMaxOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecMinOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type SpecSumOrderByAggregateInput = {
    id?: SortOrder
    ingredientId?: SortOrder
    order?: SortOrder
    amount?: SortOrder
    versionId?: SortOrder
    postedById?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    origin?: SortOrder
    history?: SortOrder
    postedById?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type UserVersionListRelationFilter = {
    every?: UserVersionWhereInput
    some?: UserVersionWhereInput
    none?: UserVersionWhereInput
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput | null
    isNot?: RecipeWhereInput | null
  }

  export type UserVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionAvgOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    versionName?: SortOrder
    postedById?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipeId?: SortOrder
  }

  export type VersionSumOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
    recipeId?: SortOrder
  }

  export type user_dataCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type user_dataMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type User_dataListRelationFilter = {
    every?: user_dataWhereInput
    some?: user_dataWhereInput
    none?: user_dataWhereInput
  }

  export type RecipeListRelationFilter = {
    every?: RecipeWhereInput
    some?: RecipeWhereInput
    none?: RecipeWhereInput
  }

  export type IngredientListRelationFilter = {
    every?: IngredientWhereInput
    some?: IngredientWhereInput
    none?: IngredientWhereInput
  }

  export type user_dataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type User_IngredientUserIdIngredientIdCompoundUniqueInput = {
    userId: number
    ingredientId: number
  }

  export type User_IngredientCountOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type User_IngredientAvgOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type User_IngredientMaxOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type User_IngredientMinOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type User_IngredientSumOrderByAggregateInput = {
    userId?: SortOrder
    ingredientId?: SortOrder
  }

  export type UserVersionUserIdVersionIdCompoundUniqueInput = {
    userId: number
    versionId: number
  }

  export type UserVersionCountOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type UserVersionAvgOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type UserVersionMaxOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type UserVersionMinOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type UserVersionSumOrderByAggregateInput = {
    userId?: SortOrder
    versionId?: SortOrder
  }

  export type Groups_IngredientsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type groups_modsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type Group_VersionCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutGroupsInput>, Enumerable<Group_VersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutGroupsInput>
    createMany?: Group_VersionCreateManyGroupsInputEnvelope
    connect?: Enumerable<Group_VersionWhereUniqueInput>
  }

  export type groups_usersCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type groups_modsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type Group_VersionUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutGroupsInput>, Enumerable<Group_VersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutGroupsInput>
    createMany?: Group_VersionCreateManyGroupsInputEnvelope
    connect?: Enumerable<Group_VersionWhereUniqueInput>
  }

  export type groups_usersUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Groups_IngredientsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type groups_modsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type Group_VersionUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutGroupsInput>, Enumerable<Group_VersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Group_VersionUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Group_VersionCreateManyGroupsInputEnvelope
    set?: Enumerable<Group_VersionWhereUniqueInput>
    disconnect?: Enumerable<Group_VersionWhereUniqueInput>
    delete?: Enumerable<Group_VersionWhereUniqueInput>
    connect?: Enumerable<Group_VersionWhereUniqueInput>
    update?: Enumerable<Group_VersionUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Group_VersionUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Group_VersionScalarWhereInput>
  }

  export type groups_usersUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type groups_modsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type Group_VersionUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutGroupsInput>, Enumerable<Group_VersionUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Group_VersionUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Group_VersionCreateManyGroupsInputEnvelope
    set?: Enumerable<Group_VersionWhereUniqueInput>
    disconnect?: Enumerable<Group_VersionWhereUniqueInput>
    delete?: Enumerable<Group_VersionWhereUniqueInput>
    connect?: Enumerable<Group_VersionWhereUniqueInput>
    update?: Enumerable<Group_VersionUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Group_VersionUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Group_VersionScalarWhereInput>
  }

  export type groups_usersUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_ingredientsInput = {
    create?: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_ingredientsInput
    connect?: GroupsWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutGroups_ingredientsInput = {
    create?: XOR<IngredientCreateWithoutGroups_ingredientsInput, IngredientUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutGroups_ingredientsInput
    connect?: IngredientWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_ingredientsInput
    upsert?: GroupsUpsertWithoutGroups_ingredientsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_ingredientsInput, GroupsUncheckedUpdateWithoutGroups_ingredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutGroups_ingredientsNestedInput = {
    create?: XOR<IngredientCreateWithoutGroups_ingredientsInput, IngredientUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutGroups_ingredientsInput
    upsert?: IngredientUpsertWithoutGroups_ingredientsInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutGroups_ingredientsInput, IngredientUncheckedUpdateWithoutGroups_ingredientsInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_modsInput = {
    create?: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_modsInput
    connect?: GroupsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutGroups_modsInput = {
    create?: XOR<UsersCreateWithoutGroups_modsInput, UsersUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroups_modsInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_modsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_modsInput
    upsert?: GroupsUpsertWithoutGroups_modsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_modsInput, GroupsUncheckedUpdateWithoutGroups_modsInput>
  }

  export type UsersUpdateOneRequiredWithoutGroups_modsNestedInput = {
    create?: XOR<UsersCreateWithoutGroups_modsInput, UsersUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroups_modsInput
    upsert?: UsersUpsertWithoutGroups_modsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutGroups_modsInput, UsersUncheckedUpdateWithoutGroups_modsInput>
  }

  export type GroupsCreateNestedOneWithoutGroup_versionInput = {
    create?: XOR<GroupsCreateWithoutGroup_versionInput, GroupsUncheckedCreateWithoutGroup_versionInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroup_versionInput
    connect?: GroupsWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutGroup_versionInput = {
    create?: XOR<VersionCreateWithoutGroup_versionInput, VersionUncheckedCreateWithoutGroup_versionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutGroup_versionInput
    connect?: VersionWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroup_versionNestedInput = {
    create?: XOR<GroupsCreateWithoutGroup_versionInput, GroupsUncheckedCreateWithoutGroup_versionInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroup_versionInput
    upsert?: GroupsUpsertWithoutGroup_versionInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroup_versionInput, GroupsUncheckedUpdateWithoutGroup_versionInput>
  }

  export type VersionUpdateOneRequiredWithoutGroup_versionNestedInput = {
    create?: XOR<VersionCreateWithoutGroup_versionInput, VersionUncheckedCreateWithoutGroup_versionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutGroup_versionInput
    upsert?: VersionUpsertWithoutGroup_versionInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutGroup_versionInput, VersionUncheckedUpdateWithoutGroup_versionInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_usersInput = {
    create?: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_usersInput
    connect?: GroupsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutGroups_usersInput = {
    create?: XOR<UsersCreateWithoutGroups_usersInput, UsersUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroups_usersInput
    connect?: UsersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_usersNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_usersInput
    upsert?: GroupsUpsertWithoutGroups_usersInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_usersInput, GroupsUncheckedUpdateWithoutGroups_usersInput>
  }

  export type UsersUpdateOneRequiredWithoutGroups_usersNestedInput = {
    create?: XOR<UsersCreateWithoutGroups_usersInput, UsersUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutGroups_usersInput
    upsert?: UsersUpsertWithoutGroups_usersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutGroups_usersInput, UsersUncheckedUpdateWithoutGroups_usersInput>
  }

  export type UsersCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutIngredientsInput
    connect?: UsersWhereUniqueInput
  }

  export type Groups_IngredientsCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type SpecCreateNestedManyWithoutIngredientInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type User_IngredientCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutIngredientsInput>, Enumerable<User_IngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutIngredientsInput>
    createMany?: User_IngredientCreateManyIngredientsInputEnvelope
    connect?: Enumerable<User_IngredientWhereUniqueInput>
  }

  export type Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type User_IngredientUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutIngredientsInput>, Enumerable<User_IngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutIngredientsInput>
    createMany?: User_IngredientCreateManyIngredientsInputEnvelope
    connect?: Enumerable<User_IngredientWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UsersUpdateOneWithoutIngredientsNestedInput = {
    create?: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutIngredientsInput
    upsert?: UsersUpsertWithoutIngredientsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutIngredientsInput, UsersUncheckedUpdateWithoutIngredientsInput>
  }

  export type Groups_IngredientsUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type SpecUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutIngredientInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutIngredientInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type User_IngredientUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutIngredientsInput>, Enumerable<User_IngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<User_IngredientUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: User_IngredientCreateManyIngredientsInputEnvelope
    set?: Enumerable<User_IngredientWhereUniqueInput>
    disconnect?: Enumerable<User_IngredientWhereUniqueInput>
    delete?: Enumerable<User_IngredientWhereUniqueInput>
    connect?: Enumerable<User_IngredientWhereUniqueInput>
    update?: Enumerable<User_IngredientUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<User_IngredientUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<User_IngredientScalarWhereInput>
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutIngredientInput>, Enumerable<SpecUncheckedCreateWithoutIngredientInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutIngredientInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutIngredientInput>
    createMany?: SpecCreateManyIngredientInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutIngredientInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutIngredientInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type User_IngredientUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutIngredientsInput>, Enumerable<User_IngredientUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<User_IngredientUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: User_IngredientCreateManyIngredientsInputEnvelope
    set?: Enumerable<User_IngredientWhereUniqueInput>
    disconnect?: Enumerable<User_IngredientWhereUniqueInput>
    delete?: Enumerable<User_IngredientWhereUniqueInput>
    connect?: Enumerable<User_IngredientWhereUniqueInput>
    update?: Enumerable<User_IngredientUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<User_IngredientUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<User_IngredientScalarWhereInput>
  }

  export type IngredientCreateNestedOneWithoutSpecInput = {
    create?: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSpecInput
    connect?: IngredientWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutSpecsInput = {
    create?: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSpecsInput
    connect?: VersionWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSpecInput = {
    create?: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSpecInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IngredientUpdateOneWithoutSpecNestedInput = {
    create?: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutSpecInput
    upsert?: IngredientUpsertWithoutSpecInput
    disconnect?: boolean
    delete?: boolean
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutSpecInput, IngredientUncheckedUpdateWithoutSpecInput>
  }

  export type VersionUpdateOneWithoutSpecsNestedInput = {
    create?: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutSpecsInput
    upsert?: VersionUpsertWithoutSpecsInput
    disconnect?: boolean
    delete?: boolean
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutSpecsInput, VersionUncheckedUpdateWithoutSpecsInput>
  }

  export type UsersUpdateOneWithoutSpecNestedInput = {
    create?: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSpecInput
    upsert?: UsersUpsertWithoutSpecInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutSpecInput, UsersUncheckedUpdateWithoutSpecInput>
  }

  export type UsersCreateNestedOneWithoutRecipesInput = {
    create?: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecipesInput
    connect?: UsersWhereUniqueInput
  }

  export type VersionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type UsersUpdateOneWithoutRecipesNestedInput = {
    create?: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRecipesInput
    upsert?: UsersUpsertWithoutRecipesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutRecipesInput, UsersUncheckedUpdateWithoutRecipesInput>
  }

  export type VersionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutRecipeInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutRecipeInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutRecipeInput>, Enumerable<VersionUncheckedCreateWithoutRecipeInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutRecipeInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutRecipeInput>
    createMany?: VersionCreateManyRecipeInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutRecipeInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutRecipeInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutVersionInput = {
    create?: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVersionInput
    connect?: UsersWhereUniqueInput
  }

  export type Group_VersionCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutVersionInput>, Enumerable<Group_VersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutVersionInput>
    createMany?: Group_VersionCreateManyVersionInputEnvelope
    connect?: Enumerable<Group_VersionWhereUniqueInput>
  }

  export type UserVersionCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutVersionInput>, Enumerable<UserVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutVersionInput>
    createMany?: UserVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<UserVersionWhereUniqueInput>
  }

  export type RecipeCreateNestedOneWithoutVersionInput = {
    create?: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutVersionInput
    connect?: RecipeWhereUniqueInput
  }

  export type SpecCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type Group_VersionUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutVersionInput>, Enumerable<Group_VersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutVersionInput>
    createMany?: Group_VersionCreateManyVersionInputEnvelope
    connect?: Enumerable<Group_VersionWhereUniqueInput>
  }

  export type UserVersionUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutVersionInput>, Enumerable<UserVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutVersionInput>
    createMany?: UserVersionCreateManyVersionInputEnvelope
    connect?: Enumerable<UserVersionWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type UsersUpdateOneWithoutVersionNestedInput = {
    create?: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVersionInput
    upsert?: UsersUpsertWithoutVersionInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutVersionInput, UsersUncheckedUpdateWithoutVersionInput>
  }

  export type Group_VersionUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutVersionInput>, Enumerable<Group_VersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<Group_VersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: Group_VersionCreateManyVersionInputEnvelope
    set?: Enumerable<Group_VersionWhereUniqueInput>
    disconnect?: Enumerable<Group_VersionWhereUniqueInput>
    delete?: Enumerable<Group_VersionWhereUniqueInput>
    connect?: Enumerable<Group_VersionWhereUniqueInput>
    update?: Enumerable<Group_VersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<Group_VersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<Group_VersionScalarWhereInput>
  }

  export type UserVersionUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutVersionInput>, Enumerable<UserVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<UserVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: UserVersionCreateManyVersionInputEnvelope
    set?: Enumerable<UserVersionWhereUniqueInput>
    disconnect?: Enumerable<UserVersionWhereUniqueInput>
    delete?: Enumerable<UserVersionWhereUniqueInput>
    connect?: Enumerable<UserVersionWhereUniqueInput>
    update?: Enumerable<UserVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<UserVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<UserVersionScalarWhereInput>
  }

  export type RecipeUpdateOneWithoutVersionNestedInput = {
    create?: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutVersionInput
    upsert?: RecipeUpsertWithoutVersionInput
    disconnect?: boolean
    delete?: boolean
    connect?: RecipeWhereUniqueInput
    update?: XOR<RecipeUpdateWithoutVersionInput, RecipeUncheckedUpdateWithoutVersionInput>
  }

  export type SpecUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type Group_VersionUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<Group_VersionCreateWithoutVersionInput>, Enumerable<Group_VersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<Group_VersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<Group_VersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: Group_VersionCreateManyVersionInputEnvelope
    set?: Enumerable<Group_VersionWhereUniqueInput>
    disconnect?: Enumerable<Group_VersionWhereUniqueInput>
    delete?: Enumerable<Group_VersionWhereUniqueInput>
    connect?: Enumerable<Group_VersionWhereUniqueInput>
    update?: Enumerable<Group_VersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<Group_VersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<Group_VersionScalarWhereInput>
  }

  export type UserVersionUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutVersionInput>, Enumerable<UserVersionUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<UserVersionUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: UserVersionCreateManyVersionInputEnvelope
    set?: Enumerable<UserVersionWhereUniqueInput>
    disconnect?: Enumerable<UserVersionWhereUniqueInput>
    delete?: Enumerable<UserVersionWhereUniqueInput>
    connect?: Enumerable<UserVersionWhereUniqueInput>
    update?: Enumerable<UserVersionUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<UserVersionUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<UserVersionScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutVersionInput>, Enumerable<SpecUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutVersionInput>
    createMany?: SpecCreateManyVersionInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutUser_dataInput = {
    create?: XOR<UsersCreateWithoutUser_dataInput, UsersUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_dataInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneWithoutUser_dataNestedInput = {
    create?: XOR<UsersCreateWithoutUser_dataInput, UsersUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_dataInput
    upsert?: UsersUpsertWithoutUser_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutUser_dataInput, UsersUncheckedUpdateWithoutUser_dataInput>
  }

  export type groups_modsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_usersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type user_dataCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    connect?: Enumerable<user_dataWhereUniqueInput>
  }

  export type User_IngredientCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutUsersInput>, Enumerable<User_IngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutUsersInput>
    createMany?: User_IngredientCreateManyUsersInputEnvelope
    connect?: Enumerable<User_IngredientWhereUniqueInput>
  }

  export type UserVersionCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutUsersInput>, Enumerable<UserVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutUsersInput>
    createMany?: UserVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<UserVersionWhereUniqueInput>
  }

  export type RecipeCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    connect?: Enumerable<RecipeWhereUniqueInput>
  }

  export type VersionCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type IngredientCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    connect?: Enumerable<IngredientWhereUniqueInput>
  }

  export type SpecCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type groups_modsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_usersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type user_dataUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    connect?: Enumerable<user_dataWhereUniqueInput>
  }

  export type User_IngredientUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutUsersInput>, Enumerable<User_IngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutUsersInput>
    createMany?: User_IngredientCreateManyUsersInputEnvelope
    connect?: Enumerable<User_IngredientWhereUniqueInput>
  }

  export type UserVersionUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutUsersInput>, Enumerable<UserVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutUsersInput>
    createMany?: UserVersionCreateManyUsersInputEnvelope
    connect?: Enumerable<UserVersionWhereUniqueInput>
  }

  export type RecipeUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    connect?: Enumerable<RecipeWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type IngredientUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    connect?: Enumerable<IngredientWhereUniqueInput>
  }

  export type SpecUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    connect?: Enumerable<SpecWhereUniqueInput>
  }

  export type groups_modsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_usersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type user_dataUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_dataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    set?: Enumerable<user_dataWhereUniqueInput>
    disconnect?: Enumerable<user_dataWhereUniqueInput>
    delete?: Enumerable<user_dataWhereUniqueInput>
    connect?: Enumerable<user_dataWhereUniqueInput>
    update?: Enumerable<user_dataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_dataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_dataScalarWhereInput>
  }

  export type User_IngredientUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutUsersInput>, Enumerable<User_IngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<User_IngredientUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: User_IngredientCreateManyUsersInputEnvelope
    set?: Enumerable<User_IngredientWhereUniqueInput>
    disconnect?: Enumerable<User_IngredientWhereUniqueInput>
    delete?: Enumerable<User_IngredientWhereUniqueInput>
    connect?: Enumerable<User_IngredientWhereUniqueInput>
    update?: Enumerable<User_IngredientUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<User_IngredientUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<User_IngredientScalarWhereInput>
  }

  export type UserVersionUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutUsersInput>, Enumerable<UserVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserVersionCreateManyUsersInputEnvelope
    set?: Enumerable<UserVersionWhereUniqueInput>
    disconnect?: Enumerable<UserVersionWhereUniqueInput>
    delete?: Enumerable<UserVersionWhereUniqueInput>
    connect?: Enumerable<UserVersionWhereUniqueInput>
    update?: Enumerable<UserVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserVersionScalarWhereInput>
  }

  export type RecipeUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<RecipeUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    set?: Enumerable<RecipeWhereUniqueInput>
    disconnect?: Enumerable<RecipeWhereUniqueInput>
    delete?: Enumerable<RecipeWhereUniqueInput>
    connect?: Enumerable<RecipeWhereUniqueInput>
    update?: Enumerable<RecipeUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<RecipeUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<RecipeScalarWhereInput>
  }

  export type VersionUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type IngredientUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<IngredientUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    set?: Enumerable<IngredientWhereUniqueInput>
    disconnect?: Enumerable<IngredientWhereUniqueInput>
    delete?: Enumerable<IngredientWhereUniqueInput>
    connect?: Enumerable<IngredientWhereUniqueInput>
    update?: Enumerable<IngredientUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<IngredientUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<IngredientScalarWhereInput>
  }

  export type SpecUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type groups_modsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_usersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type user_dataUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_dataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    set?: Enumerable<user_dataWhereUniqueInput>
    disconnect?: Enumerable<user_dataWhereUniqueInput>
    delete?: Enumerable<user_dataWhereUniqueInput>
    connect?: Enumerable<user_dataWhereUniqueInput>
    update?: Enumerable<user_dataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_dataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_dataScalarWhereInput>
  }

  export type User_IngredientUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<User_IngredientCreateWithoutUsersInput>, Enumerable<User_IngredientUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<User_IngredientCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<User_IngredientUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: User_IngredientCreateManyUsersInputEnvelope
    set?: Enumerable<User_IngredientWhereUniqueInput>
    disconnect?: Enumerable<User_IngredientWhereUniqueInput>
    delete?: Enumerable<User_IngredientWhereUniqueInput>
    connect?: Enumerable<User_IngredientWhereUniqueInput>
    update?: Enumerable<User_IngredientUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<User_IngredientUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<User_IngredientScalarWhereInput>
  }

  export type UserVersionUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserVersionCreateWithoutUsersInput>, Enumerable<UserVersionUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserVersionCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserVersionUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserVersionCreateManyUsersInputEnvelope
    set?: Enumerable<UserVersionWhereUniqueInput>
    disconnect?: Enumerable<UserVersionWhereUniqueInput>
    delete?: Enumerable<UserVersionWhereUniqueInput>
    connect?: Enumerable<UserVersionWhereUniqueInput>
    update?: Enumerable<UserVersionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserVersionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserVersionScalarWhereInput>
  }

  export type RecipeUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<RecipeCreateWithoutPostedByInput>, Enumerable<RecipeUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<RecipeCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<RecipeUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: RecipeCreateManyPostedByInputEnvelope
    set?: Enumerable<RecipeWhereUniqueInput>
    disconnect?: Enumerable<RecipeWhereUniqueInput>
    delete?: Enumerable<RecipeWhereUniqueInput>
    connect?: Enumerable<RecipeWhereUniqueInput>
    update?: Enumerable<RecipeUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<RecipeUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<RecipeScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutPostedByInput>, Enumerable<VersionUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: VersionCreateManyPostedByInputEnvelope
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type IngredientUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<IngredientCreateWithoutPostedByInput>, Enumerable<IngredientUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<IngredientCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<IngredientUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: IngredientCreateManyPostedByInputEnvelope
    set?: Enumerable<IngredientWhereUniqueInput>
    disconnect?: Enumerable<IngredientWhereUniqueInput>
    delete?: Enumerable<IngredientWhereUniqueInput>
    connect?: Enumerable<IngredientWhereUniqueInput>
    update?: Enumerable<IngredientUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<IngredientUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<IngredientScalarWhereInput>
  }

  export type SpecUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<Enumerable<SpecCreateWithoutPostedByInput>, Enumerable<SpecUncheckedCreateWithoutPostedByInput>>
    connectOrCreate?: Enumerable<SpecCreateOrConnectWithoutPostedByInput>
    upsert?: Enumerable<SpecUpsertWithWhereUniqueWithoutPostedByInput>
    createMany?: SpecCreateManyPostedByInputEnvelope
    set?: Enumerable<SpecWhereUniqueInput>
    disconnect?: Enumerable<SpecWhereUniqueInput>
    delete?: Enumerable<SpecWhereUniqueInput>
    connect?: Enumerable<SpecWhereUniqueInput>
    update?: Enumerable<SpecUpdateWithWhereUniqueWithoutPostedByInput>
    updateMany?: Enumerable<SpecUpdateManyWithWhereWithoutPostedByInput>
    deleteMany?: Enumerable<SpecScalarWhereInput>
  }

  export type IngredientCreateNestedOneWithoutUser_ingredientInput = {
    create?: XOR<IngredientCreateWithoutUser_ingredientInput, IngredientUncheckedCreateWithoutUser_ingredientInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutUser_ingredientInput
    connect?: IngredientWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutUser_ingredientInput = {
    create?: XOR<UsersCreateWithoutUser_ingredientInput, UsersUncheckedCreateWithoutUser_ingredientInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_ingredientInput
    connect?: UsersWhereUniqueInput
  }

  export type IngredientUpdateOneRequiredWithoutUser_ingredientNestedInput = {
    create?: XOR<IngredientCreateWithoutUser_ingredientInput, IngredientUncheckedCreateWithoutUser_ingredientInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutUser_ingredientInput
    upsert?: IngredientUpsertWithoutUser_ingredientInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<IngredientUpdateWithoutUser_ingredientInput, IngredientUncheckedUpdateWithoutUser_ingredientInput>
  }

  export type UsersUpdateOneRequiredWithoutUser_ingredientNestedInput = {
    create?: XOR<UsersCreateWithoutUser_ingredientInput, UsersUncheckedCreateWithoutUser_ingredientInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_ingredientInput
    upsert?: UsersUpsertWithoutUser_ingredientInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutUser_ingredientInput, UsersUncheckedUpdateWithoutUser_ingredientInput>
  }

  export type VersionCreateNestedOneWithoutUser_versionInput = {
    create?: XOR<VersionCreateWithoutUser_versionInput, VersionUncheckedCreateWithoutUser_versionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutUser_versionInput
    connect?: VersionWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutUser_versionInput = {
    create?: XOR<UsersCreateWithoutUser_versionInput, UsersUncheckedCreateWithoutUser_versionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_versionInput
    connect?: UsersWhereUniqueInput
  }

  export type VersionUpdateOneRequiredWithoutUser_versionNestedInput = {
    create?: XOR<VersionCreateWithoutUser_versionInput, VersionUncheckedCreateWithoutUser_versionInput>
    connectOrCreate?: VersionCreateOrConnectWithoutUser_versionInput
    upsert?: VersionUpsertWithoutUser_versionInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutUser_versionInput, VersionUncheckedUpdateWithoutUser_versionInput>
  }

  export type UsersUpdateOneRequiredWithoutUser_versionNestedInput = {
    create?: XOR<UsersCreateWithoutUser_versionInput, UsersUncheckedCreateWithoutUser_versionInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_versionInput
    upsert?: UsersUpsertWithoutUser_versionInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutUser_versionInput, UsersUncheckedUpdateWithoutUser_versionInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type Groups_IngredientsCreateWithoutGroupsInput = {
    ingredients: IngredientCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateWithoutGroupsInput = {
    ingredient_id: number
  }

  export type Groups_IngredientsCreateOrConnectWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    create: XOR<Groups_IngredientsCreateWithoutGroupsInput, Groups_IngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type Groups_IngredientsCreateManyGroupsInputEnvelope = {
    data: Enumerable<Groups_IngredientsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type groups_modsCreateWithoutGroupsInput = {
    users: UsersCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateWithoutGroupsInput = {
    user_id: number
  }

  export type groups_modsCreateOrConnectWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    create: XOR<groups_modsCreateWithoutGroupsInput, groups_modsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_modsCreateManyGroupsInputEnvelope = {
    data: Enumerable<groups_modsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type Group_VersionCreateWithoutGroupsInput = {
    version: VersionCreateNestedOneWithoutGroup_versionInput
  }

  export type Group_VersionUncheckedCreateWithoutGroupsInput = {
    versionId: number
  }

  export type Group_VersionCreateOrConnectWithoutGroupsInput = {
    where: Group_VersionWhereUniqueInput
    create: XOR<Group_VersionCreateWithoutGroupsInput, Group_VersionUncheckedCreateWithoutGroupsInput>
  }

  export type Group_VersionCreateManyGroupsInputEnvelope = {
    data: Enumerable<Group_VersionCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type groups_usersCreateWithoutGroupsInput = {
    users: UsersCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateWithoutGroupsInput = {
    user_id: number
  }

  export type groups_usersCreateOrConnectWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    create: XOR<groups_usersCreateWithoutGroupsInput, groups_usersUncheckedCreateWithoutGroupsInput>
  }

  export type groups_usersCreateManyGroupsInputEnvelope = {
    data: Enumerable<groups_usersCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    update: XOR<Groups_IngredientsUpdateWithoutGroupsInput, Groups_IngredientsUncheckedUpdateWithoutGroupsInput>
    create: XOR<Groups_IngredientsCreateWithoutGroupsInput, Groups_IngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    data: XOR<Groups_IngredientsUpdateWithoutGroupsInput, Groups_IngredientsUncheckedUpdateWithoutGroupsInput>
  }

  export type Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput = {
    where: Groups_IngredientsScalarWhereInput
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput>
  }

  export type Groups_IngredientsScalarWhereInput = {
    AND?: Enumerable<Groups_IngredientsScalarWhereInput>
    OR?: Enumerable<Groups_IngredientsScalarWhereInput>
    NOT?: Enumerable<Groups_IngredientsScalarWhereInput>
    group_id?: IntFilter | number
    ingredient_id?: IntFilter | number
  }

  export type groups_modsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    update: XOR<groups_modsUpdateWithoutGroupsInput, groups_modsUncheckedUpdateWithoutGroupsInput>
    create: XOR<groups_modsCreateWithoutGroupsInput, groups_modsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_modsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    data: XOR<groups_modsUpdateWithoutGroupsInput, groups_modsUncheckedUpdateWithoutGroupsInput>
  }

  export type groups_modsUpdateManyWithWhereWithoutGroupsInput = {
    where: groups_modsScalarWhereInput
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyWithoutGroups_modsInput>
  }

  export type groups_modsScalarWhereInput = {
    AND?: Enumerable<groups_modsScalarWhereInput>
    OR?: Enumerable<groups_modsScalarWhereInput>
    NOT?: Enumerable<groups_modsScalarWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
  }

  export type Group_VersionUpsertWithWhereUniqueWithoutGroupsInput = {
    where: Group_VersionWhereUniqueInput
    update: XOR<Group_VersionUpdateWithoutGroupsInput, Group_VersionUncheckedUpdateWithoutGroupsInput>
    create: XOR<Group_VersionCreateWithoutGroupsInput, Group_VersionUncheckedCreateWithoutGroupsInput>
  }

  export type Group_VersionUpdateWithWhereUniqueWithoutGroupsInput = {
    where: Group_VersionWhereUniqueInput
    data: XOR<Group_VersionUpdateWithoutGroupsInput, Group_VersionUncheckedUpdateWithoutGroupsInput>
  }

  export type Group_VersionUpdateManyWithWhereWithoutGroupsInput = {
    where: Group_VersionScalarWhereInput
    data: XOR<Group_VersionUpdateManyMutationInput, Group_VersionUncheckedUpdateManyWithoutGroup_versionInput>
  }

  export type Group_VersionScalarWhereInput = {
    AND?: Enumerable<Group_VersionScalarWhereInput>
    OR?: Enumerable<Group_VersionScalarWhereInput>
    NOT?: Enumerable<Group_VersionScalarWhereInput>
    groupId?: IntFilter | number
    versionId?: IntFilter | number
  }

  export type groups_usersUpsertWithWhereUniqueWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    update: XOR<groups_usersUpdateWithoutGroupsInput, groups_usersUncheckedUpdateWithoutGroupsInput>
    create: XOR<groups_usersCreateWithoutGroupsInput, groups_usersUncheckedCreateWithoutGroupsInput>
  }

  export type groups_usersUpdateWithWhereUniqueWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    data: XOR<groups_usersUpdateWithoutGroupsInput, groups_usersUncheckedUpdateWithoutGroupsInput>
  }

  export type groups_usersUpdateManyWithWhereWithoutGroupsInput = {
    where: groups_usersScalarWhereInput
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyWithoutGroups_usersInput>
  }

  export type groups_usersScalarWhereInput = {
    AND?: Enumerable<groups_usersScalarWhereInput>
    OR?: Enumerable<groups_usersScalarWhereInput>
    NOT?: Enumerable<groups_usersScalarWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
  }

  export type GroupsCreateWithoutGroups_ingredientsInput = {
    group_name: string
    date_created: Date | string
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_ingredientsInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_ingredientsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type IngredientCreateWithoutGroups_ingredientsInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutGroups_ingredientsInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutGroups_ingredientsInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutGroups_ingredientsInput, IngredientUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type GroupsUpsertWithoutGroups_ingredientsInput = {
    update: XOR<GroupsUpdateWithoutGroups_ingredientsInput, GroupsUncheckedUpdateWithoutGroups_ingredientsInput>
    create: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type GroupsUpdateWithoutGroups_ingredientsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type IngredientUpsertWithoutGroups_ingredientsInput = {
    update: XOR<IngredientUpdateWithoutGroups_ingredientsInput, IngredientUncheckedUpdateWithoutGroups_ingredientsInput>
    create: XOR<IngredientCreateWithoutGroups_ingredientsInput, IngredientUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type IngredientUpdateWithoutGroups_ingredientsInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutGroups_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type GroupsCreateWithoutGroups_modsInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_modsInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_modsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
  }

  export type UsersCreateWithoutGroups_modsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutGroups_modsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutGroups_modsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutGroups_modsInput, UsersUncheckedCreateWithoutGroups_modsInput>
  }

  export type GroupsUpsertWithoutGroups_modsInput = {
    update: XOR<GroupsUpdateWithoutGroups_modsInput, GroupsUncheckedUpdateWithoutGroups_modsInput>
    create: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
  }

  export type GroupsUpdateWithoutGroups_modsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_modsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type UsersUpsertWithoutGroups_modsInput = {
    update: XOR<UsersUpdateWithoutGroups_modsInput, UsersUncheckedUpdateWithoutGroups_modsInput>
    create: XOR<UsersCreateWithoutGroups_modsInput, UsersUncheckedCreateWithoutGroups_modsInput>
  }

  export type UsersUpdateWithoutGroups_modsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutGroups_modsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type GroupsCreateWithoutGroup_versionInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroup_versionInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroup_versionInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroup_versionInput, GroupsUncheckedCreateWithoutGroup_versionInput>
  }

  export type VersionCreateWithoutGroup_versionInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    user_version?: UserVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutGroup_versionInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    user_version?: UserVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutGroup_versionInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutGroup_versionInput, VersionUncheckedCreateWithoutGroup_versionInput>
  }

  export type GroupsUpsertWithoutGroup_versionInput = {
    update: XOR<GroupsUpdateWithoutGroup_versionInput, GroupsUncheckedUpdateWithoutGroup_versionInput>
    create: XOR<GroupsCreateWithoutGroup_versionInput, GroupsUncheckedCreateWithoutGroup_versionInput>
  }

  export type GroupsUpdateWithoutGroup_versionInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroup_versionInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type VersionUpsertWithoutGroup_versionInput = {
    update: XOR<VersionUpdateWithoutGroup_versionInput, VersionUncheckedUpdateWithoutGroup_versionInput>
    create: XOR<VersionCreateWithoutGroup_versionInput, VersionUncheckedCreateWithoutGroup_versionInput>
  }

  export type VersionUpdateWithoutGroup_versionInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    user_version?: UserVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutGroup_versionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    user_version?: UserVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type GroupsCreateWithoutGroups_usersInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_usersInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_usersInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
  }

  export type UsersCreateWithoutGroups_usersInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutGroups_usersInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutGroups_usersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutGroups_usersInput, UsersUncheckedCreateWithoutGroups_usersInput>
  }

  export type GroupsUpsertWithoutGroups_usersInput = {
    update: XOR<GroupsUpdateWithoutGroups_usersInput, GroupsUncheckedUpdateWithoutGroups_usersInput>
    create: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
  }

  export type GroupsUpdateWithoutGroups_usersInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    group_version?: Group_VersionUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type UsersUpsertWithoutGroups_usersInput = {
    update: XOR<UsersUpdateWithoutGroups_usersInput, UsersUncheckedUpdateWithoutGroups_usersInput>
    create: XOR<UsersCreateWithoutGroups_usersInput, UsersUncheckedCreateWithoutGroups_usersInput>
  }

  export type UsersUpdateWithoutGroups_usersInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutGroups_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type UsersCreateWithoutIngredientsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutIngredientsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutIngredientsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
  }

  export type Groups_IngredientsCreateWithoutIngredientsInput = {
    groups: GroupsCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateWithoutIngredientsInput = {
    group_id: number
  }

  export type Groups_IngredientsCreateOrConnectWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    create: XOR<Groups_IngredientsCreateWithoutIngredientsInput, Groups_IngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type Groups_IngredientsCreateManyIngredientsInputEnvelope = {
    data: Enumerable<Groups_IngredientsCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type SpecCreateWithoutIngredientInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    version?: VersionCreateNestedOneWithoutSpecsInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateWithoutIngredientInput = {
    id?: number
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type SpecCreateOrConnectWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutIngredientInput, SpecUncheckedCreateWithoutIngredientInput>
  }

  export type SpecCreateManyIngredientInputEnvelope = {
    data: Enumerable<SpecCreateManyIngredientInput>
    skipDuplicates?: boolean
  }

  export type User_IngredientCreateWithoutIngredientsInput = {
    users: UsersCreateNestedOneWithoutUser_ingredientInput
  }

  export type User_IngredientUncheckedCreateWithoutIngredientsInput = {
    userId: number
  }

  export type User_IngredientCreateOrConnectWithoutIngredientsInput = {
    where: User_IngredientWhereUniqueInput
    create: XOR<User_IngredientCreateWithoutIngredientsInput, User_IngredientUncheckedCreateWithoutIngredientsInput>
  }

  export type User_IngredientCreateManyIngredientsInputEnvelope = {
    data: Enumerable<User_IngredientCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutIngredientsInput = {
    update: XOR<UsersUpdateWithoutIngredientsInput, UsersUncheckedUpdateWithoutIngredientsInput>
    create: XOR<UsersCreateWithoutIngredientsInput, UsersUncheckedCreateWithoutIngredientsInput>
  }

  export type UsersUpdateWithoutIngredientsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    update: XOR<Groups_IngredientsUpdateWithoutIngredientsInput, Groups_IngredientsUncheckedUpdateWithoutIngredientsInput>
    create: XOR<Groups_IngredientsCreateWithoutIngredientsInput, Groups_IngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    data: XOR<Groups_IngredientsUpdateWithoutIngredientsInput, Groups_IngredientsUncheckedUpdateWithoutIngredientsInput>
  }

  export type Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput = {
    where: Groups_IngredientsScalarWhereInput
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput>
  }

  export type SpecUpsertWithWhereUniqueWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutIngredientInput, SpecUncheckedUpdateWithoutIngredientInput>
    create: XOR<SpecCreateWithoutIngredientInput, SpecUncheckedCreateWithoutIngredientInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutIngredientInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutIngredientInput, SpecUncheckedUpdateWithoutIngredientInput>
  }

  export type SpecUpdateManyWithWhereWithoutIngredientInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecInput>
  }

  export type SpecScalarWhereInput = {
    AND?: Enumerable<SpecScalarWhereInput>
    OR?: Enumerable<SpecScalarWhereInput>
    NOT?: Enumerable<SpecScalarWhereInput>
    id?: IntFilter | number
    ingredientId?: IntNullableFilter | number | null
    order?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    versionId?: IntNullableFilter | number | null
    postedById?: IntNullableFilter | number | null
  }

  export type User_IngredientUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: User_IngredientWhereUniqueInput
    update: XOR<User_IngredientUpdateWithoutIngredientsInput, User_IngredientUncheckedUpdateWithoutIngredientsInput>
    create: XOR<User_IngredientCreateWithoutIngredientsInput, User_IngredientUncheckedCreateWithoutIngredientsInput>
  }

  export type User_IngredientUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: User_IngredientWhereUniqueInput
    data: XOR<User_IngredientUpdateWithoutIngredientsInput, User_IngredientUncheckedUpdateWithoutIngredientsInput>
  }

  export type User_IngredientUpdateManyWithWhereWithoutIngredientsInput = {
    where: User_IngredientScalarWhereInput
    data: XOR<User_IngredientUpdateManyMutationInput, User_IngredientUncheckedUpdateManyWithoutUser_ingredientInput>
  }

  export type User_IngredientScalarWhereInput = {
    AND?: Enumerable<User_IngredientScalarWhereInput>
    OR?: Enumerable<User_IngredientScalarWhereInput>
    NOT?: Enumerable<User_IngredientScalarWhereInput>
    userId?: IntFilter | number
    ingredientId?: IntFilter | number
  }

  export type IngredientCreateWithoutSpecInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutSpecInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutSpecInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
  }

  export type VersionCreateWithoutSpecsInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionCreateNestedManyWithoutVersionInput
    user_version?: UserVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutSpecsInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutVersionInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
  }

  export type VersionCreateOrConnectWithoutSpecsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
  }

  export type UsersCreateWithoutSpecInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutSpecInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutSpecInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
  }

  export type IngredientUpsertWithoutSpecInput = {
    update: XOR<IngredientUpdateWithoutSpecInput, IngredientUncheckedUpdateWithoutSpecInput>
    create: XOR<IngredientCreateWithoutSpecInput, IngredientUncheckedCreateWithoutSpecInput>
  }

  export type IngredientUpdateWithoutSpecInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type VersionUpsertWithoutSpecsInput = {
    update: XOR<VersionUpdateWithoutSpecsInput, VersionUncheckedUpdateWithoutSpecsInput>
    create: XOR<VersionCreateWithoutSpecsInput, VersionUncheckedCreateWithoutSpecsInput>
  }

  export type VersionUpdateWithoutSpecsInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUncheckedUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersUpsertWithoutSpecInput = {
    update: XOR<UsersUpdateWithoutSpecInput, UsersUncheckedUpdateWithoutSpecInput>
    create: XOR<UsersCreateWithoutSpecInput, UsersUncheckedCreateWithoutSpecInput>
  }

  export type UsersUpdateWithoutSpecInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type UsersCreateWithoutRecipesInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutRecipesInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutRecipesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
  }

  export type VersionCreateWithoutRecipeInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionCreateNestedManyWithoutVersionInput
    user_version?: UserVersionCreateNestedManyWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutRecipeInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutVersionInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutVersionInput
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutRecipeInput, VersionUncheckedCreateWithoutRecipeInput>
  }

  export type VersionCreateManyRecipeInputEnvelope = {
    data: Enumerable<VersionCreateManyRecipeInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutRecipesInput = {
    update: XOR<UsersUpdateWithoutRecipesInput, UsersUncheckedUpdateWithoutRecipesInput>
    create: XOR<UsersCreateWithoutRecipesInput, UsersUncheckedCreateWithoutRecipesInput>
  }

  export type UsersUpdateWithoutRecipesInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type VersionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutRecipeInput, VersionUncheckedUpdateWithoutRecipeInput>
    create: XOR<VersionCreateWithoutRecipeInput, VersionUncheckedCreateWithoutRecipeInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutRecipeInput, VersionUncheckedUpdateWithoutRecipeInput>
  }

  export type VersionUpdateManyWithWhereWithoutRecipeInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionInput>
  }

  export type VersionScalarWhereInput = {
    AND?: Enumerable<VersionScalarWhereInput>
    OR?: Enumerable<VersionScalarWhereInput>
    NOT?: Enumerable<VersionScalarWhereInput>
    id?: IntFilter | number
    versionName?: StringFilter | string
    postedById?: IntNullableFilter | number | null
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
    recipeId?: IntNullableFilter | number | null
  }

  export type UsersCreateWithoutVersionInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutVersionInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutVersionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
  }

  export type Group_VersionCreateWithoutVersionInput = {
    groups: GroupsCreateNestedOneWithoutGroup_versionInput
  }

  export type Group_VersionUncheckedCreateWithoutVersionInput = {
    groupId: number
  }

  export type Group_VersionCreateOrConnectWithoutVersionInput = {
    where: Group_VersionWhereUniqueInput
    create: XOR<Group_VersionCreateWithoutVersionInput, Group_VersionUncheckedCreateWithoutVersionInput>
  }

  export type Group_VersionCreateManyVersionInputEnvelope = {
    data: Enumerable<Group_VersionCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type UserVersionCreateWithoutVersionInput = {
    users: UsersCreateNestedOneWithoutUser_versionInput
  }

  export type UserVersionUncheckedCreateWithoutVersionInput = {
    userId: number
  }

  export type UserVersionCreateOrConnectWithoutVersionInput = {
    where: UserVersionWhereUniqueInput
    create: XOR<UserVersionCreateWithoutVersionInput, UserVersionUncheckedCreateWithoutVersionInput>
  }

  export type UserVersionCreateManyVersionInputEnvelope = {
    data: Enumerable<UserVersionCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutVersionInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedBy?: UsersCreateNestedOneWithoutRecipesInput
  }

  export type RecipeUncheckedCreateWithoutVersionInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    postedById?: number | null
  }

  export type RecipeCreateOrConnectWithoutVersionInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
  }

  export type SpecCreateWithoutVersionInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    postedBy?: UsersCreateNestedOneWithoutSpecInput
  }

  export type SpecUncheckedCreateWithoutVersionInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    postedById?: number | null
  }

  export type SpecCreateOrConnectWithoutVersionInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutVersionInput, SpecUncheckedCreateWithoutVersionInput>
  }

  export type SpecCreateManyVersionInputEnvelope = {
    data: Enumerable<SpecCreateManyVersionInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutVersionInput = {
    update: XOR<UsersUpdateWithoutVersionInput, UsersUncheckedUpdateWithoutVersionInput>
    create: XOR<UsersCreateWithoutVersionInput, UsersUncheckedCreateWithoutVersionInput>
  }

  export type UsersUpdateWithoutVersionInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type Group_VersionUpsertWithWhereUniqueWithoutVersionInput = {
    where: Group_VersionWhereUniqueInput
    update: XOR<Group_VersionUpdateWithoutVersionInput, Group_VersionUncheckedUpdateWithoutVersionInput>
    create: XOR<Group_VersionCreateWithoutVersionInput, Group_VersionUncheckedCreateWithoutVersionInput>
  }

  export type Group_VersionUpdateWithWhereUniqueWithoutVersionInput = {
    where: Group_VersionWhereUniqueInput
    data: XOR<Group_VersionUpdateWithoutVersionInput, Group_VersionUncheckedUpdateWithoutVersionInput>
  }

  export type Group_VersionUpdateManyWithWhereWithoutVersionInput = {
    where: Group_VersionScalarWhereInput
    data: XOR<Group_VersionUpdateManyMutationInput, Group_VersionUncheckedUpdateManyWithoutGroup_versionInput>
  }

  export type UserVersionUpsertWithWhereUniqueWithoutVersionInput = {
    where: UserVersionWhereUniqueInput
    update: XOR<UserVersionUpdateWithoutVersionInput, UserVersionUncheckedUpdateWithoutVersionInput>
    create: XOR<UserVersionCreateWithoutVersionInput, UserVersionUncheckedCreateWithoutVersionInput>
  }

  export type UserVersionUpdateWithWhereUniqueWithoutVersionInput = {
    where: UserVersionWhereUniqueInput
    data: XOR<UserVersionUpdateWithoutVersionInput, UserVersionUncheckedUpdateWithoutVersionInput>
  }

  export type UserVersionUpdateManyWithWhereWithoutVersionInput = {
    where: UserVersionScalarWhereInput
    data: XOR<UserVersionUpdateManyMutationInput, UserVersionUncheckedUpdateManyWithoutUser_versionInput>
  }

  export type UserVersionScalarWhereInput = {
    AND?: Enumerable<UserVersionScalarWhereInput>
    OR?: Enumerable<UserVersionScalarWhereInput>
    NOT?: Enumerable<UserVersionScalarWhereInput>
    userId?: IntFilter | number
    versionId?: IntFilter | number
  }

  export type RecipeUpsertWithoutVersionInput = {
    update: XOR<RecipeUpdateWithoutVersionInput, RecipeUncheckedUpdateWithoutVersionInput>
    create: XOR<RecipeCreateWithoutVersionInput, RecipeUncheckedCreateWithoutVersionInput>
  }

  export type RecipeUpdateWithoutVersionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutRecipesNestedInput
  }

  export type RecipeUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUpsertWithWhereUniqueWithoutVersionInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutVersionInput, SpecUncheckedUpdateWithoutVersionInput>
    create: XOR<SpecCreateWithoutVersionInput, SpecUncheckedCreateWithoutVersionInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutVersionInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutVersionInput, SpecUncheckedUpdateWithoutVersionInput>
  }

  export type SpecUpdateManyWithWhereWithoutVersionInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecsInput>
  }

  export type UsersCreateWithoutUser_dataInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutUser_dataInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutUser_dataInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUser_dataInput, UsersUncheckedCreateWithoutUser_dataInput>
  }

  export type UsersUpsertWithoutUser_dataInput = {
    update: XOR<UsersUpdateWithoutUser_dataInput, UsersUncheckedUpdateWithoutUser_dataInput>
    create: XOR<UsersCreateWithoutUser_dataInput, UsersUncheckedCreateWithoutUser_dataInput>
  }

  export type UsersUpdateWithoutUser_dataInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUser_dataInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type groups_modsCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateWithoutUsersInput = {
    group_id: number
  }

  export type groups_modsCreateOrConnectWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    create: XOR<groups_modsCreateWithoutUsersInput, groups_modsUncheckedCreateWithoutUsersInput>
  }

  export type groups_modsCreateManyUsersInputEnvelope = {
    data: Enumerable<groups_modsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type groups_usersCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateWithoutUsersInput = {
    group_id: number
  }

  export type groups_usersCreateOrConnectWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    create: XOR<groups_usersCreateWithoutUsersInput, groups_usersUncheckedCreateWithoutUsersInput>
  }

  export type groups_usersCreateManyUsersInputEnvelope = {
    data: Enumerable<groups_usersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type user_dataCreateWithoutUsersInput = {
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUncheckedCreateWithoutUsersInput = {
    id?: number
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataCreateOrConnectWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    create: XOR<user_dataCreateWithoutUsersInput, user_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_dataCreateManyUsersInputEnvelope = {
    data: Enumerable<user_dataCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type User_IngredientCreateWithoutUsersInput = {
    ingredients: IngredientCreateNestedOneWithoutUser_ingredientInput
  }

  export type User_IngredientUncheckedCreateWithoutUsersInput = {
    ingredientId: number
  }

  export type User_IngredientCreateOrConnectWithoutUsersInput = {
    where: User_IngredientWhereUniqueInput
    create: XOR<User_IngredientCreateWithoutUsersInput, User_IngredientUncheckedCreateWithoutUsersInput>
  }

  export type User_IngredientCreateManyUsersInputEnvelope = {
    data: Enumerable<User_IngredientCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type UserVersionCreateWithoutUsersInput = {
    version: VersionCreateNestedOneWithoutUser_versionInput
  }

  export type UserVersionUncheckedCreateWithoutUsersInput = {
    versionId: number
  }

  export type UserVersionCreateOrConnectWithoutUsersInput = {
    where: UserVersionWhereUniqueInput
    create: XOR<UserVersionCreateWithoutUsersInput, UserVersionUncheckedCreateWithoutUsersInput>
  }

  export type UserVersionCreateManyUsersInputEnvelope = {
    data: Enumerable<UserVersionCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutPostedByInput = {
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    version?: VersionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutPostedByInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
    version?: VersionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutPostedByInput, RecipeUncheckedCreateWithoutPostedByInput>
  }

  export type RecipeCreateManyPostedByInputEnvelope = {
    data: Enumerable<RecipeCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type VersionCreateWithoutPostedByInput = {
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionCreateNestedManyWithoutVersionInput
    user_version?: UserVersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutPostedByInput = {
    id?: number
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutVersionInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutPostedByInput, VersionUncheckedCreateWithoutPostedByInput>
  }

  export type VersionCreateManyPostedByInputEnvelope = {
    data: Enumerable<VersionCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type IngredientCreateWithoutPostedByInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutPostedByInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutPostedByInput, IngredientUncheckedCreateWithoutPostedByInput>
  }

  export type IngredientCreateManyPostedByInputEnvelope = {
    data: Enumerable<IngredientCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type SpecCreateWithoutPostedByInput = {
    order?: number | null
    amount?: number | null
    unit?: string | null
    ingredient?: IngredientCreateNestedOneWithoutSpecInput
    version?: VersionCreateNestedOneWithoutSpecsInput
  }

  export type SpecUncheckedCreateWithoutPostedByInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
  }

  export type SpecCreateOrConnectWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    create: XOR<SpecCreateWithoutPostedByInput, SpecUncheckedCreateWithoutPostedByInput>
  }

  export type SpecCreateManyPostedByInputEnvelope = {
    data: Enumerable<SpecCreateManyPostedByInput>
    skipDuplicates?: boolean
  }

  export type groups_modsUpsertWithWhereUniqueWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    update: XOR<groups_modsUpdateWithoutUsersInput, groups_modsUncheckedUpdateWithoutUsersInput>
    create: XOR<groups_modsCreateWithoutUsersInput, groups_modsUncheckedCreateWithoutUsersInput>
  }

  export type groups_modsUpdateWithWhereUniqueWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    data: XOR<groups_modsUpdateWithoutUsersInput, groups_modsUncheckedUpdateWithoutUsersInput>
  }

  export type groups_modsUpdateManyWithWhereWithoutUsersInput = {
    where: groups_modsScalarWhereInput
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyWithoutGroups_modsInput>
  }

  export type groups_usersUpsertWithWhereUniqueWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    update: XOR<groups_usersUpdateWithoutUsersInput, groups_usersUncheckedUpdateWithoutUsersInput>
    create: XOR<groups_usersCreateWithoutUsersInput, groups_usersUncheckedCreateWithoutUsersInput>
  }

  export type groups_usersUpdateWithWhereUniqueWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    data: XOR<groups_usersUpdateWithoutUsersInput, groups_usersUncheckedUpdateWithoutUsersInput>
  }

  export type groups_usersUpdateManyWithWhereWithoutUsersInput = {
    where: groups_usersScalarWhereInput
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyWithoutGroups_usersInput>
  }

  export type user_dataUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    update: XOR<user_dataUpdateWithoutUsersInput, user_dataUncheckedUpdateWithoutUsersInput>
    create: XOR<user_dataCreateWithoutUsersInput, user_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_dataUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    data: XOR<user_dataUpdateWithoutUsersInput, user_dataUncheckedUpdateWithoutUsersInput>
  }

  export type user_dataUpdateManyWithWhereWithoutUsersInput = {
    where: user_dataScalarWhereInput
    data: XOR<user_dataUpdateManyMutationInput, user_dataUncheckedUpdateManyWithoutUser_dataInput>
  }

  export type user_dataScalarWhereInput = {
    AND?: Enumerable<user_dataScalarWhereInput>
    OR?: Enumerable<user_dataScalarWhereInput>
    NOT?: Enumerable<user_dataScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    user_bio?: StringNullableFilter | string | null
    work_place?: StringNullableFilter | string | null
    profile_picture?: StringNullableFilter | string | null
  }

  export type User_IngredientUpsertWithWhereUniqueWithoutUsersInput = {
    where: User_IngredientWhereUniqueInput
    update: XOR<User_IngredientUpdateWithoutUsersInput, User_IngredientUncheckedUpdateWithoutUsersInput>
    create: XOR<User_IngredientCreateWithoutUsersInput, User_IngredientUncheckedCreateWithoutUsersInput>
  }

  export type User_IngredientUpdateWithWhereUniqueWithoutUsersInput = {
    where: User_IngredientWhereUniqueInput
    data: XOR<User_IngredientUpdateWithoutUsersInput, User_IngredientUncheckedUpdateWithoutUsersInput>
  }

  export type User_IngredientUpdateManyWithWhereWithoutUsersInput = {
    where: User_IngredientScalarWhereInput
    data: XOR<User_IngredientUpdateManyMutationInput, User_IngredientUncheckedUpdateManyWithoutUser_ingredientInput>
  }

  export type UserVersionUpsertWithWhereUniqueWithoutUsersInput = {
    where: UserVersionWhereUniqueInput
    update: XOR<UserVersionUpdateWithoutUsersInput, UserVersionUncheckedUpdateWithoutUsersInput>
    create: XOR<UserVersionCreateWithoutUsersInput, UserVersionUncheckedCreateWithoutUsersInput>
  }

  export type UserVersionUpdateWithWhereUniqueWithoutUsersInput = {
    where: UserVersionWhereUniqueInput
    data: XOR<UserVersionUpdateWithoutUsersInput, UserVersionUncheckedUpdateWithoutUsersInput>
  }

  export type UserVersionUpdateManyWithWhereWithoutUsersInput = {
    where: UserVersionScalarWhereInput
    data: XOR<UserVersionUpdateManyMutationInput, UserVersionUncheckedUpdateManyWithoutUser_versionInput>
  }

  export type RecipeUpsertWithWhereUniqueWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutPostedByInput, RecipeUncheckedUpdateWithoutPostedByInput>
    create: XOR<RecipeCreateWithoutPostedByInput, RecipeUncheckedCreateWithoutPostedByInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutPostedByInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutPostedByInput, RecipeUncheckedUpdateWithoutPostedByInput>
  }

  export type RecipeUpdateManyWithWhereWithoutPostedByInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutRecipesInput>
  }

  export type RecipeScalarWhereInput = {
    AND?: Enumerable<RecipeScalarWhereInput>
    OR?: Enumerable<RecipeScalarWhereInput>
    NOT?: Enumerable<RecipeScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    origin?: StringFilter | string
    history?: StringNullableFilter | string | null
    postedById?: IntNullableFilter | number | null
  }

  export type VersionUpsertWithWhereUniqueWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutPostedByInput, VersionUncheckedUpdateWithoutPostedByInput>
    create: XOR<VersionCreateWithoutPostedByInput, VersionUncheckedCreateWithoutPostedByInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutPostedByInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutPostedByInput, VersionUncheckedUpdateWithoutPostedByInput>
  }

  export type VersionUpdateManyWithWhereWithoutPostedByInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionInput>
  }

  export type IngredientUpsertWithWhereUniqueWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutPostedByInput, IngredientUncheckedUpdateWithoutPostedByInput>
    create: XOR<IngredientCreateWithoutPostedByInput, IngredientUncheckedCreateWithoutPostedByInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutPostedByInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutPostedByInput, IngredientUncheckedUpdateWithoutPostedByInput>
  }

  export type IngredientUpdateManyWithWhereWithoutPostedByInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type IngredientScalarWhereInput = {
    AND?: Enumerable<IngredientScalarWhereInput>
    OR?: Enumerable<IngredientScalarWhereInput>
    NOT?: Enumerable<IngredientScalarWhereInput>
    id?: IntFilter | number
    date_created?: DateTimeFilter | Date | string
    name?: StringFilter | string
    amount?: IntNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableFilter | string | null
    postedById?: IntNullableFilter | number | null
  }

  export type SpecUpsertWithWhereUniqueWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    update: XOR<SpecUpdateWithoutPostedByInput, SpecUncheckedUpdateWithoutPostedByInput>
    create: XOR<SpecCreateWithoutPostedByInput, SpecUncheckedCreateWithoutPostedByInput>
  }

  export type SpecUpdateWithWhereUniqueWithoutPostedByInput = {
    where: SpecWhereUniqueInput
    data: XOR<SpecUpdateWithoutPostedByInput, SpecUncheckedUpdateWithoutPostedByInput>
  }

  export type SpecUpdateManyWithWhereWithoutPostedByInput = {
    where: SpecScalarWhereInput
    data: XOR<SpecUpdateManyMutationInput, SpecUncheckedUpdateManyWithoutSpecInput>
  }

  export type IngredientCreateWithoutUser_ingredientInput = {
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedBy?: UsersCreateNestedOneWithoutIngredientsInput
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    spec?: SpecCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateWithoutUser_ingredientInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    postedById?: number | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    spec?: SpecUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientCreateOrConnectWithoutUser_ingredientInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutUser_ingredientInput, IngredientUncheckedCreateWithoutUser_ingredientInput>
  }

  export type UsersCreateWithoutUser_ingredientInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_version?: UserVersionCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutUser_ingredientInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_version?: UserVersionUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutUser_ingredientInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUser_ingredientInput, UsersUncheckedCreateWithoutUser_ingredientInput>
  }

  export type IngredientUpsertWithoutUser_ingredientInput = {
    update: XOR<IngredientUpdateWithoutUser_ingredientInput, IngredientUncheckedUpdateWithoutUser_ingredientInput>
    create: XOR<IngredientCreateWithoutUser_ingredientInput, IngredientUncheckedCreateWithoutUser_ingredientInput>
  }

  export type IngredientUpdateWithoutUser_ingredientInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedBy?: UsersUpdateOneWithoutIngredientsNestedInput
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateWithoutUser_ingredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type UsersUpsertWithoutUser_ingredientInput = {
    update: XOR<UsersUpdateWithoutUser_ingredientInput, UsersUncheckedUpdateWithoutUser_ingredientInput>
    create: XOR<UsersCreateWithoutUser_ingredientInput, UsersUncheckedCreateWithoutUser_ingredientInput>
  }

  export type UsersUpdateWithoutUser_ingredientInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUser_ingredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type VersionCreateWithoutUser_versionInput = {
    versionName: string
    postedBy?: UsersCreateNestedOneWithoutVersionInput
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionCreateNestedManyWithoutVersionInput
    recipe?: RecipeCreateNestedOneWithoutVersionInput
    specs?: SpecCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutUser_versionInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    group_version?: Group_VersionUncheckedCreateNestedManyWithoutVersionInput
    recipeId?: number | null
    specs?: SpecUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutUser_versionInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutUser_versionInput, VersionUncheckedCreateWithoutUser_versionInput>
  }

  export type UsersCreateWithoutUser_versionInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientCreateNestedManyWithoutUsersInput
    recipes?: RecipeCreateNestedManyWithoutPostedByInput
    version?: VersionCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientCreateNestedManyWithoutPostedByInput
    spec?: SpecCreateNestedManyWithoutPostedByInput
  }

  export type UsersUncheckedCreateWithoutUser_versionInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    user_ingredient?: User_IngredientUncheckedCreateNestedManyWithoutUsersInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutPostedByInput
    version?: VersionUncheckedCreateNestedManyWithoutPostedByInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutPostedByInput
    spec?: SpecUncheckedCreateNestedManyWithoutPostedByInput
  }

  export type UsersCreateOrConnectWithoutUser_versionInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUser_versionInput, UsersUncheckedCreateWithoutUser_versionInput>
  }

  export type VersionUpsertWithoutUser_versionInput = {
    update: XOR<VersionUpdateWithoutUser_versionInput, VersionUncheckedUpdateWithoutUser_versionInput>
    create: XOR<VersionCreateWithoutUser_versionInput, VersionUncheckedCreateWithoutUser_versionInput>
  }

  export type VersionUpdateWithoutUser_versionInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutUser_versionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type UsersUpsertWithoutUser_versionInput = {
    update: XOR<UsersUpdateWithoutUser_versionInput, UsersUncheckedUpdateWithoutUser_versionInput>
    create: XOR<UsersCreateWithoutUser_versionInput, UsersUncheckedCreateWithoutUser_versionInput>
  }

  export type UsersUpdateWithoutUser_versionInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUpdateManyWithoutPostedByNestedInput
    version?: VersionUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUpdateManyWithoutPostedByNestedInput
    spec?: SpecUpdateManyWithoutPostedByNestedInput
  }

  export type UsersUncheckedUpdateWithoutUser_versionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutUsersNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutPostedByNestedInput
    version?: VersionUncheckedUpdateManyWithoutPostedByNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutPostedByNestedInput
    spec?: SpecUncheckedUpdateManyWithoutPostedByNestedInput
  }

  export type Groups_IngredientsCreateManyGroupsInput = {
    ingredient_id: number
  }

  export type groups_modsCreateManyGroupsInput = {
    user_id: number
  }

  export type Group_VersionCreateManyGroupsInput = {
    versionId: number
  }

  export type groups_usersCreateManyGroupsInput = {
    user_id: number
  }

  export type Groups_IngredientsUpdateWithoutGroupsInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateWithoutGroupsInput = {
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput = {
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsUpdateWithoutGroupsInput = {
    users?: UsersUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateWithoutGroupsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsUncheckedUpdateManyWithoutGroups_modsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Group_VersionUpdateWithoutGroupsInput = {
    version?: VersionUpdateOneRequiredWithoutGroup_versionNestedInput
  }

  export type Group_VersionUncheckedUpdateWithoutGroupsInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type Group_VersionUncheckedUpdateManyWithoutGroup_versionInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUpdateWithoutGroupsInput = {
    users?: UsersUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateWithoutGroupsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUncheckedUpdateManyWithoutGroups_usersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsCreateManyIngredientsInput = {
    group_id: number
  }

  export type SpecCreateManyIngredientInput = {
    id?: number
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
    postedById?: number | null
  }

  export type User_IngredientCreateManyIngredientsInput = {
    userId: number
  }

  export type Groups_IngredientsUpdateWithoutIngredientsInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateWithoutIngredientsInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type SpecUpdateWithoutIngredientInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUpdateOneWithoutSpecsNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateWithoutIngredientInput = {
    id?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUncheckedUpdateManyWithoutSpecInput = {
    id?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type User_IngredientUpdateWithoutIngredientsInput = {
    users?: UsersUpdateOneRequiredWithoutUser_ingredientNestedInput
  }

  export type User_IngredientUncheckedUpdateWithoutIngredientsInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type User_IngredientUncheckedUpdateManyWithoutUser_ingredientInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type VersionCreateManyRecipeInput = {
    id?: number
    versionName: string
    postedById?: number | null
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
  }

  export type VersionUpdateWithoutRecipeInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    postedBy?: UsersUpdateOneWithoutVersionNestedInput
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUpdateManyWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutRecipeInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUncheckedUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutVersionNestedInput
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateManyWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Group_VersionCreateManyVersionInput = {
    groupId: number
  }

  export type UserVersionCreateManyVersionInput = {
    userId: number
  }

  export type SpecCreateManyVersionInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    postedById?: number | null
  }

  export type Group_VersionUpdateWithoutVersionInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroup_versionNestedInput
  }

  export type Group_VersionUncheckedUpdateWithoutVersionInput = {
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVersionUpdateWithoutVersionInput = {
    users?: UsersUpdateOneRequiredWithoutUser_versionNestedInput
  }

  export type UserVersionUncheckedUpdateWithoutVersionInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVersionUncheckedUpdateManyWithoutUser_versionInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SpecUpdateWithoutVersionInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    postedBy?: UsersUpdateOneWithoutSpecNestedInput
  }

  export type SpecUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpecUncheckedUpdateManyWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    postedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type groups_modsCreateManyUsersInput = {
    group_id: number
  }

  export type groups_usersCreateManyUsersInput = {
    group_id: number
  }

  export type user_dataCreateManyUsersInput = {
    id?: number
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type User_IngredientCreateManyUsersInput = {
    ingredientId: number
  }

  export type UserVersionCreateManyUsersInput = {
    versionId: number
  }

  export type RecipeCreateManyPostedByInput = {
    id?: number
    createdAt?: Date | string
    name: string
    origin: string
    history?: string | null
  }

  export type VersionCreateManyPostedByInput = {
    id?: number
    versionName: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipeId?: number | null
  }

  export type IngredientCreateManyPostedByInput = {
    id?: number
    date_created?: Date | string
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
  }

  export type SpecCreateManyPostedByInput = {
    id?: number
    ingredientId?: number | null
    order?: number | null
    amount?: number | null
    unit?: string | null
    versionId?: number | null
  }

  export type groups_modsUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateWithoutUsersInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateWithoutUsersInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_dataUpdateWithoutUsersInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateManyWithoutUser_dataInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type User_IngredientUpdateWithoutUsersInput = {
    ingredients?: IngredientUpdateOneRequiredWithoutUser_ingredientNestedInput
  }

  export type User_IngredientUncheckedUpdateWithoutUsersInput = {
    ingredientId?: IntFieldUpdateOperationsInput | number
  }

  export type UserVersionUpdateWithoutUsersInput = {
    version?: VersionUpdateOneRequiredWithoutUser_versionNestedInput
  }

  export type UserVersionUncheckedUpdateWithoutUsersInput = {
    versionId?: IntFieldUpdateOperationsInput | number
  }

  export type RecipeUpdateWithoutPostedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    version?: VersionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateManyWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionUpdateWithoutPostedByInput = {
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUpdateManyWithoutVersionNestedInput
    recipe?: RecipeUpdateOneWithoutVersionNestedInput
    specs?: SpecUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    versionName?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    group_version?: Group_VersionUncheckedUpdateManyWithoutVersionNestedInput
    user_version?: UserVersionUncheckedUpdateManyWithoutVersionNestedInput
    recipeId?: NullableIntFieldUpdateOperationsInput | number | null
    specs?: SpecUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type IngredientUpdateWithoutPostedByInput = {
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    spec?: SpecUncheckedUpdateManyWithoutIngredientNestedInput
    user_ingredient?: User_IngredientUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SpecUpdateWithoutPostedByInput = {
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredient?: IngredientUpdateOneWithoutSpecNestedInput
    version?: VersionUpdateOneWithoutSpecsNestedInput
  }

  export type SpecUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredientId?: NullableIntFieldUpdateOperationsInput | number | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    versionId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}