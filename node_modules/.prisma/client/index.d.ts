
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Groups
 * 
 */
export type Groups = {
  id: number
  group_name: string
  date_created: Date
}

/**
 * Model Groups_Ingredients
 * 
 */
export type Groups_Ingredients = {
  group_id: number
  ingredient_id: number
}

/**
 * Model groups_mods
 * 
 */
export type groups_mods = {
  user_id: number
  group_id: number
}

/**
 * Model groups_specs
 * 
 */
export type groups_specs = {
  group_id: number
  spec_id: number
}

/**
 * Model groups_users
 * 
 */
export type groups_users = {
  user_id: number
  group_id: number
}

/**
 * Model Ingredients
 * 
 */
export type Ingredients = {
  id: number
  name: string
  amount: number | null
  unit: string | null
  price: Prisma.Decimal | null
  source: string | null
}

/**
 * Model quantities
 * 
 */
export type quantities = {
  id: number
  spec_id: number | null
  ingredient_id: number | null
  amount: number | null
  unit: string | null
}

/**
 * Model recipes
 * 
 */
export type recipes = {
  id: number
  name: string
  created_by: string
  history: string | null
}

/**
 * Model specs
 * 
 */
export type specs = {
  id: number
  recipe_id: number | null
  created_by: string
  instructions: string | null
  glassware: string | null
  ice: string | null
}

/**
 * Model user_data
 * 
 */
export type user_data = {
  id: number
  user_id: number | null
  user_bio: string | null
  work_place: string | null
  profile_picture: string | null
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  user_name: string
  first_name: string | null
  last_name: string | null
  date_joined: Date
  email: string
  password: string
}

/**
 * Model users_ingredients
 * 
 */
export type users_ingredients = {
  user_id: number
  ingredient_id: number
}

/**
 * Model users_specs
 * 
 */
export type users_specs = {
  user_id: number
  spec_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Groups
 * const groups = await prisma.groups.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Groups
   * const groups = await prisma.groups.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.groups`: Exposes CRUD operations for the **Groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.GroupsDelegate<GlobalReject>;

  /**
   * `prisma.groups_Ingredients`: Exposes CRUD operations for the **Groups_Ingredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_Ingredients
    * const groups_Ingredients = await prisma.groups_Ingredients.findMany()
    * ```
    */
  get groups_Ingredients(): Prisma.Groups_IngredientsDelegate<GlobalReject>;

  /**
   * `prisma.groups_mods`: Exposes CRUD operations for the **groups_mods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_mods
    * const groups_mods = await prisma.groups_mods.findMany()
    * ```
    */
  get groups_mods(): Prisma.groups_modsDelegate<GlobalReject>;

  /**
   * `prisma.groups_specs`: Exposes CRUD operations for the **groups_specs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_specs
    * const groups_specs = await prisma.groups_specs.findMany()
    * ```
    */
  get groups_specs(): Prisma.groups_specsDelegate<GlobalReject>;

  /**
   * `prisma.groups_users`: Exposes CRUD operations for the **groups_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups_users
    * const groups_users = await prisma.groups_users.findMany()
    * ```
    */
  get groups_users(): Prisma.groups_usersDelegate<GlobalReject>;

  /**
   * `prisma.ingredients`: Exposes CRUD operations for the **Ingredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredients.findMany()
    * ```
    */
  get ingredients(): Prisma.IngredientsDelegate<GlobalReject>;

  /**
   * `prisma.quantities`: Exposes CRUD operations for the **quantities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quantities
    * const quantities = await prisma.quantities.findMany()
    * ```
    */
  get quantities(): Prisma.quantitiesDelegate<GlobalReject>;

  /**
   * `prisma.recipes`: Exposes CRUD operations for the **recipes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipes.findMany()
    * ```
    */
  get recipes(): Prisma.recipesDelegate<GlobalReject>;

  /**
   * `prisma.specs`: Exposes CRUD operations for the **specs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specs
    * const specs = await prisma.specs.findMany()
    * ```
    */
  get specs(): Prisma.specsDelegate<GlobalReject>;

  /**
   * `prisma.user_data`: Exposes CRUD operations for the **user_data** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_data
    * const user_data = await prisma.user_data.findMany()
    * ```
    */
  get user_data(): Prisma.user_dataDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.users_ingredients`: Exposes CRUD operations for the **users_ingredients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_ingredients
    * const users_ingredients = await prisma.users_ingredients.findMany()
    * ```
    */
  get users_ingredients(): Prisma.users_ingredientsDelegate<GlobalReject>;

  /**
   * `prisma.users_specs`: Exposes CRUD operations for the **users_specs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_specs
    * const users_specs = await prisma.users_specs.findMany()
    * ```
    */
  get users_specs(): Prisma.users_specsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Groups: 'Groups',
    Groups_Ingredients: 'Groups_Ingredients',
    groups_mods: 'groups_mods',
    groups_specs: 'groups_specs',
    groups_users: 'groups_users',
    Ingredients: 'Ingredients',
    quantities: 'quantities',
    recipes: 'recipes',
    specs: 'specs',
    user_data: 'user_data',
    users: 'users',
    users_ingredients: 'users_ingredients',
    users_specs: 'users_specs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GroupsCountOutputType
   */


  export type GroupsCountOutputType = {
    groups_ingredients: number
    groups_mods: number
    groups_specs: number
    groups_users: number
  }

  export type GroupsCountOutputTypeSelect = {
    groups_ingredients?: boolean
    groups_mods?: boolean
    groups_specs?: boolean
    groups_users?: boolean
  }

  export type GroupsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GroupsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GroupsCountOutputType
    : S extends undefined
    ? never
    : S extends GroupsCountOutputTypeArgs
    ?'include' extends U
    ? GroupsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GroupsCountOutputType ? GroupsCountOutputType[P] : never
  } 
    : GroupsCountOutputType
  : GroupsCountOutputType




  // Custom InputTypes

  /**
   * GroupsCountOutputType without action
   */
  export type GroupsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupsCountOutputType
     * 
    **/
    select?: GroupsCountOutputTypeSelect | null
  }



  /**
   * Count Type IngredientsCountOutputType
   */


  export type IngredientsCountOutputType = {
    groups_ingredients: number
    quantities: number
    users_ingredients: number
  }

  export type IngredientsCountOutputTypeSelect = {
    groups_ingredients?: boolean
    quantities?: boolean
    users_ingredients?: boolean
  }

  export type IngredientsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | IngredientsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? IngredientsCountOutputType
    : S extends undefined
    ? never
    : S extends IngredientsCountOutputTypeArgs
    ?'include' extends U
    ? IngredientsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof IngredientsCountOutputType ? IngredientsCountOutputType[P] : never
  } 
    : IngredientsCountOutputType
  : IngredientsCountOutputType




  // Custom InputTypes

  /**
   * IngredientsCountOutputType without action
   */
  export type IngredientsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IngredientsCountOutputType
     * 
    **/
    select?: IngredientsCountOutputTypeSelect | null
  }



  /**
   * Count Type RecipesCountOutputType
   */


  export type RecipesCountOutputType = {
    specs: number
  }

  export type RecipesCountOutputTypeSelect = {
    specs?: boolean
  }

  export type RecipesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RecipesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RecipesCountOutputType
    : S extends undefined
    ? never
    : S extends RecipesCountOutputTypeArgs
    ?'include' extends U
    ? RecipesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RecipesCountOutputType ? RecipesCountOutputType[P] : never
  } 
    : RecipesCountOutputType
  : RecipesCountOutputType




  // Custom InputTypes

  /**
   * RecipesCountOutputType without action
   */
  export type RecipesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RecipesCountOutputType
     * 
    **/
    select?: RecipesCountOutputTypeSelect | null
  }



  /**
   * Count Type SpecsCountOutputType
   */


  export type SpecsCountOutputType = {
    groups_specs: number
    quantities: number
    users_specs: number
  }

  export type SpecsCountOutputTypeSelect = {
    groups_specs?: boolean
    quantities?: boolean
    users_specs?: boolean
  }

  export type SpecsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SpecsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SpecsCountOutputType
    : S extends undefined
    ? never
    : S extends SpecsCountOutputTypeArgs
    ?'include' extends U
    ? SpecsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SpecsCountOutputType ? SpecsCountOutputType[P] : never
  } 
    : SpecsCountOutputType
  : SpecsCountOutputType




  // Custom InputTypes

  /**
   * SpecsCountOutputType without action
   */
  export type SpecsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SpecsCountOutputType
     * 
    **/
    select?: SpecsCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    groups_mods: number
    groups_users: number
    user_data: number
    users_ingredients: number
    users_specs: number
  }

  export type UsersCountOutputTypeSelect = {
    groups_mods?: boolean
    groups_users?: boolean
    user_data?: boolean
    users_ingredients?: boolean
    users_specs?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupsSumAggregateOutputType = {
    id: number | null
  }

  export type GroupsMinAggregateOutputType = {
    id: number | null
    group_name: string | null
    date_created: Date | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: number | null
    group_name: string | null
    date_created: Date | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    group_name: number
    date_created: number
    _all: number
  }


  export type GroupsAvgAggregateInputType = {
    id?: true
  }

  export type GroupsSumAggregateInputType = {
    id?: true
  }

  export type GroupsMinAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    group_name?: true
    date_created?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which Groups to aggregate.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs = {
    where?: GroupsWhereInput
    orderBy?: Enumerable<GroupsOrderByWithAggregationInput>
    by: Array<GroupsScalarFieldEnum>
    having?: GroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _avg?: GroupsAvgAggregateInputType
    _sum?: GroupsSumAggregateInputType
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    id: number
    group_name: string
    date_created: Date
    _count: GroupsCountAggregateOutputType | null
    _avg: GroupsAvgAggregateOutputType | null
    _sum: GroupsSumAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsSelect = {
    id?: boolean
    group_name?: boolean
    date_created?: boolean
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_specs?: boolean | groups_specsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsInclude = {
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_specs?: boolean | groups_specsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    _count?: boolean | GroupsCountOutputTypeArgs
  }

  export type GroupsGetPayload<
    S extends boolean | null | undefined | GroupsArgs,
    U = keyof S
      > = S extends true
        ? Groups
    : S extends undefined
    ? never
    : S extends GroupsArgs | GroupsFindManyArgs
    ?'include' extends U
    ? Groups  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_specs' ? Array < groups_specsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_specs' ? Array < groups_specsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GroupsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Groups ? Groups[P] : never
  } 
    : Groups
  : Groups


  type GroupsCountArgs = Merge<
    Omit<GroupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }
  >

  export interface GroupsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups that matches the filter.
     * @param {GroupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups'> extends True ? CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>> : CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupsFindManyArgs>(
      args?: SelectSubset<T, GroupsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Groups>>, PrismaPromise<Array<GroupsGetPayload<T>>>>

    /**
     * Create a Groups.
     * @param {GroupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends GroupsCreateArgs>(
      args: SelectSubset<T, GroupsCreateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Create many Groups.
     *     @param {GroupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsCreateManyArgs>(
      args?: SelectSubset<T, GroupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {GroupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends GroupsDeleteArgs>(
      args: SelectSubset<T, GroupsDeleteArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Update one Groups.
     * @param {GroupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsUpdateArgs>(
      args: SelectSubset<T, GroupsUpdateArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Delete zero or more Groups.
     * @param {GroupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsUpdateManyArgs>(
      args: SelectSubset<T, GroupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {GroupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsUpsertArgs>(
      args: SelectSubset<T, GroupsUpsertArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find one Groups that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GroupsFindUniqueOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Find the first Groups that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GroupsClient<Groups>, Prisma__GroupsClient<GroupsGetPayload<T>>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupsCountArgs>(
      args?: Subset<T, GroupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups_ingredients<T extends Groups_IngredientsFindManyArgs = {}>(args?: Subset<T, Groups_IngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>;

    groups_mods<T extends groups_modsFindManyArgs = {}>(args?: Subset<T, groups_modsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>;

    groups_specs<T extends groups_specsFindManyArgs = {}>(args?: Subset<T, groups_specsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_specs>>, PrismaPromise<Array<groups_specsGetPayload<T>>>>;

    groups_users<T extends groups_usersFindManyArgs = {}>(args?: Subset<T, groups_usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups base type for findUnique actions
   */
  export type GroupsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups: findUnique
   */
  export interface GroupsFindUniqueArgs extends GroupsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups base type for findFirst actions
   */
  export type GroupsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     * 
    **/
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }

  /**
   * Groups: findFirst
   */
  export interface GroupsFindFirstArgs extends GroupsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups findMany
   */
  export type GroupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     * 
    **/
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     * 
    **/
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Groups create
   */
  export type GroupsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to create a Groups.
     * 
    **/
    data: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
  }


  /**
   * Groups createMany
   */
  export type GroupsCreateManyArgs = {
    /**
     * The data used to create many Groups.
     * 
    **/
    data: Enumerable<GroupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups update
   */
  export type GroupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The data needed to update a Groups.
     * 
    **/
    data: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
    /**
     * Choose, which Groups to update.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups updateMany
   */
  export type GroupsUpdateManyArgs = {
    /**
     * The data used to update Groups.
     * 
    **/
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups upsert
   */
  export type GroupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * The filter to search for the Groups to update in case it exists.
     * 
    **/
    where: GroupsWhereUniqueInput
    /**
     * In case the Groups found by the `where` argument doesn't exist, create a new Groups with this data.
     * 
    **/
    create: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
    /**
     * In case the Groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
  }


  /**
   * Groups delete
   */
  export type GroupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
    /**
     * Filter which Groups to delete.
     * 
    **/
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups deleteMany
   */
  export type GroupsDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     * 
    **/
    where?: GroupsWhereInput
  }


  /**
   * Groups: findUniqueOrThrow
   */
  export type GroupsFindUniqueOrThrowArgs = GroupsFindUniqueArgsBase
      

  /**
   * Groups: findFirstOrThrow
   */
  export type GroupsFindFirstOrThrowArgs = GroupsFindFirstArgsBase
      

  /**
   * Groups without action
   */
  export type GroupsArgs = {
    /**
     * Select specific fields to fetch from the Groups
     * 
    **/
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupsInclude | null
  }



  /**
   * Model Groups_Ingredients
   */


  export type AggregateGroups_Ingredients = {
    _count: Groups_IngredientsCountAggregateOutputType | null
    _avg: Groups_IngredientsAvgAggregateOutputType | null
    _sum: Groups_IngredientsSumAggregateOutputType | null
    _min: Groups_IngredientsMinAggregateOutputType | null
    _max: Groups_IngredientsMaxAggregateOutputType | null
  }

  export type Groups_IngredientsAvgAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsSumAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsMinAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsMaxAggregateOutputType = {
    group_id: number | null
    ingredient_id: number | null
  }

  export type Groups_IngredientsCountAggregateOutputType = {
    group_id: number
    ingredient_id: number
    _all: number
  }


  export type Groups_IngredientsAvgAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsSumAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsMinAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsMaxAggregateInputType = {
    group_id?: true
    ingredient_id?: true
  }

  export type Groups_IngredientsCountAggregateInputType = {
    group_id?: true
    ingredient_id?: true
    _all?: true
  }

  export type Groups_IngredientsAggregateArgs = {
    /**
     * Filter which Groups_Ingredients to aggregate.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups_Ingredients
    **/
    _count?: true | Groups_IngredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_IngredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_IngredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_IngredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_IngredientsMaxAggregateInputType
  }

  export type GetGroups_IngredientsAggregateType<T extends Groups_IngredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_Ingredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_Ingredients[P]>
      : GetScalarType<T[P], AggregateGroups_Ingredients[P]>
  }




  export type Groups_IngredientsGroupByArgs = {
    where?: Groups_IngredientsWhereInput
    orderBy?: Enumerable<Groups_IngredientsOrderByWithAggregationInput>
    by: Array<Groups_IngredientsScalarFieldEnum>
    having?: Groups_IngredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_IngredientsCountAggregateInputType | true
    _avg?: Groups_IngredientsAvgAggregateInputType
    _sum?: Groups_IngredientsSumAggregateInputType
    _min?: Groups_IngredientsMinAggregateInputType
    _max?: Groups_IngredientsMaxAggregateInputType
  }


  export type Groups_IngredientsGroupByOutputType = {
    group_id: number
    ingredient_id: number
    _count: Groups_IngredientsCountAggregateOutputType | null
    _avg: Groups_IngredientsAvgAggregateOutputType | null
    _sum: Groups_IngredientsSumAggregateOutputType | null
    _min: Groups_IngredientsMinAggregateOutputType | null
    _max: Groups_IngredientsMaxAggregateOutputType | null
  }

  type GetGroups_IngredientsGroupByPayload<T extends Groups_IngredientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_IngredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_IngredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_IngredientsGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_IngredientsGroupByOutputType[P]>
        }
      >
    >


  export type Groups_IngredientsSelect = {
    group_id?: boolean
    ingredient_id?: boolean
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientsArgs
  }

  export type Groups_IngredientsInclude = {
    groups?: boolean | GroupsArgs
    ingredients?: boolean | IngredientsArgs
  }

  export type Groups_IngredientsGetPayload<
    S extends boolean | null | undefined | Groups_IngredientsArgs,
    U = keyof S
      > = S extends true
        ? Groups_Ingredients
    : S extends undefined
    ? never
    : S extends Groups_IngredientsArgs | Groups_IngredientsFindManyArgs
    ?'include' extends U
    ? Groups_Ingredients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Groups_Ingredients ? Groups_Ingredients[P] : never
  } 
    : Groups_Ingredients
  : Groups_Ingredients


  type Groups_IngredientsCountArgs = Merge<
    Omit<Groups_IngredientsFindManyArgs, 'select' | 'include'> & {
      select?: Groups_IngredientsCountAggregateInputType | true
    }
  >

  export interface Groups_IngredientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_Ingredients that matches the filter.
     * @param {Groups_IngredientsFindUniqueArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Groups_IngredientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Groups_IngredientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups_Ingredients'> extends True ? CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients | null >, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T> | null >>

    /**
     * Find the first Groups_Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindFirstArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Groups_IngredientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Groups_IngredientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups_Ingredients'> extends True ? CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients | null >, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T> | null >>

    /**
     * Find zero or more Groups_Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findMany()
     * 
     * // Get first 10 Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const groups_IngredientsWithGroup_idOnly = await prisma.groups_Ingredients.findMany({ select: { group_id: true } })
     * 
    **/
    findMany<T extends Groups_IngredientsFindManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>

    /**
     * Create a Groups_Ingredients.
     * @param {Groups_IngredientsCreateArgs} args - Arguments to create a Groups_Ingredients.
     * @example
     * // Create one Groups_Ingredients
     * const Groups_Ingredients = await prisma.groups_Ingredients.create({
     *   data: {
     *     // ... data to create a Groups_Ingredients
     *   }
     * })
     * 
    **/
    create<T extends Groups_IngredientsCreateArgs>(
      args: SelectSubset<T, Groups_IngredientsCreateArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Create many Groups_Ingredients.
     *     @param {Groups_IngredientsCreateManyArgs} args - Arguments to create many Groups_Ingredients.
     *     @example
     *     // Create many Groups_Ingredients
     *     const groups_Ingredients = await prisma.groups_Ingredients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Groups_IngredientsCreateManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_Ingredients.
     * @param {Groups_IngredientsDeleteArgs} args - Arguments to delete one Groups_Ingredients.
     * @example
     * // Delete one Groups_Ingredients
     * const Groups_Ingredients = await prisma.groups_Ingredients.delete({
     *   where: {
     *     // ... filter to delete one Groups_Ingredients
     *   }
     * })
     * 
    **/
    delete<T extends Groups_IngredientsDeleteArgs>(
      args: SelectSubset<T, Groups_IngredientsDeleteArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Update one Groups_Ingredients.
     * @param {Groups_IngredientsUpdateArgs} args - Arguments to update one Groups_Ingredients.
     * @example
     * // Update one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Groups_IngredientsUpdateArgs>(
      args: SelectSubset<T, Groups_IngredientsUpdateArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Delete zero or more Groups_Ingredients.
     * @param {Groups_IngredientsDeleteManyArgs} args - Arguments to filter Groups_Ingredients to delete.
     * @example
     * // Delete a few Groups_Ingredients
     * const { count } = await prisma.groups_Ingredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Groups_IngredientsDeleteManyArgs>(
      args?: SelectSubset<T, Groups_IngredientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Groups_IngredientsUpdateManyArgs>(
      args: SelectSubset<T, Groups_IngredientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_Ingredients.
     * @param {Groups_IngredientsUpsertArgs} args - Arguments to update or create a Groups_Ingredients.
     * @example
     * // Update or create a Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.upsert({
     *   create: {
     *     // ... data to create a Groups_Ingredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_Ingredients we want to update
     *   }
     * })
    **/
    upsert<T extends Groups_IngredientsUpsertArgs>(
      args: SelectSubset<T, Groups_IngredientsUpsertArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Find one Groups_Ingredients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Groups_IngredientsFindUniqueOrThrowArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Groups_IngredientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Find the first Groups_Ingredients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsFindFirstOrThrowArgs} args - Arguments to find a Groups_Ingredients
     * @example
     * // Get one Groups_Ingredients
     * const groups_Ingredients = await prisma.groups_Ingredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Groups_IngredientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Groups_IngredientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__Groups_IngredientsClient<Groups_Ingredients>, Prisma__Groups_IngredientsClient<Groups_IngredientsGetPayload<T>>>

    /**
     * Count the number of Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsCountArgs} args - Arguments to filter Groups_Ingredients to count.
     * @example
     * // Count the number of Groups_Ingredients
     * const count = await prisma.groups_Ingredients.count({
     *   where: {
     *     // ... the filter for the Groups_Ingredients we want to count
     *   }
     * })
    **/
    count<T extends Groups_IngredientsCountArgs>(
      args?: Subset<T, Groups_IngredientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_IngredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_IngredientsAggregateArgs>(args: Subset<T, Groups_IngredientsAggregateArgs>): PrismaPromise<GetGroups_IngredientsAggregateType<T>>

    /**
     * Group by Groups_Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_IngredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_IngredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_IngredientsGroupByArgs['orderBy'] }
        : { orderBy?: Groups_IngredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_IngredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_IngredientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups_Ingredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Groups_IngredientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    ingredients<T extends IngredientsArgs = {}>(args?: Subset<T, IngredientsArgs>): CheckSelect<T, Prisma__IngredientsClient<Ingredients | null >, Prisma__IngredientsClient<IngredientsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups_Ingredients base type for findUnique actions
   */
  export type Groups_IngredientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }

  /**
   * Groups_Ingredients: findUnique
   */
  export interface Groups_IngredientsFindUniqueArgs extends Groups_IngredientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups_Ingredients base type for findFirst actions
   */
  export type Groups_IngredientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups_Ingredients.
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups_Ingredients.
     * 
    **/
    distinct?: Enumerable<Groups_IngredientsScalarFieldEnum>
  }

  /**
   * Groups_Ingredients: findFirst
   */
  export interface Groups_IngredientsFindFirstArgs extends Groups_IngredientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups_Ingredients findMany
   */
  export type Groups_IngredientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter, which Groups_Ingredients to fetch.
     * 
    **/
    where?: Groups_IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups_Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<Groups_IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups_Ingredients.
     * 
    **/
    cursor?: Groups_IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups_Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups_Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_IngredientsScalarFieldEnum>
  }


  /**
   * Groups_Ingredients create
   */
  export type Groups_IngredientsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The data needed to create a Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsCreateInput, Groups_IngredientsUncheckedCreateInput>
  }


  /**
   * Groups_Ingredients createMany
   */
  export type Groups_IngredientsCreateManyArgs = {
    /**
     * The data used to create many Groups_Ingredients.
     * 
    **/
    data: Enumerable<Groups_IngredientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups_Ingredients update
   */
  export type Groups_IngredientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The data needed to update a Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsUpdateInput, Groups_IngredientsUncheckedUpdateInput>
    /**
     * Choose, which Groups_Ingredients to update.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }


  /**
   * Groups_Ingredients updateMany
   */
  export type Groups_IngredientsUpdateManyArgs = {
    /**
     * The data used to update Groups_Ingredients.
     * 
    **/
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyInput>
    /**
     * Filter which Groups_Ingredients to update
     * 
    **/
    where?: Groups_IngredientsWhereInput
  }


  /**
   * Groups_Ingredients upsert
   */
  export type Groups_IngredientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * The filter to search for the Groups_Ingredients to update in case it exists.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
    /**
     * In case the Groups_Ingredients found by the `where` argument doesn't exist, create a new Groups_Ingredients with this data.
     * 
    **/
    create: XOR<Groups_IngredientsCreateInput, Groups_IngredientsUncheckedCreateInput>
    /**
     * In case the Groups_Ingredients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Groups_IngredientsUpdateInput, Groups_IngredientsUncheckedUpdateInput>
  }


  /**
   * Groups_Ingredients delete
   */
  export type Groups_IngredientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
    /**
     * Filter which Groups_Ingredients to delete.
     * 
    **/
    where: Groups_IngredientsWhereUniqueInput
  }


  /**
   * Groups_Ingredients deleteMany
   */
  export type Groups_IngredientsDeleteManyArgs = {
    /**
     * Filter which Groups_Ingredients to delete
     * 
    **/
    where?: Groups_IngredientsWhereInput
  }


  /**
   * Groups_Ingredients: findUniqueOrThrow
   */
  export type Groups_IngredientsFindUniqueOrThrowArgs = Groups_IngredientsFindUniqueArgsBase
      

  /**
   * Groups_Ingredients: findFirstOrThrow
   */
  export type Groups_IngredientsFindFirstOrThrowArgs = Groups_IngredientsFindFirstArgsBase
      

  /**
   * Groups_Ingredients without action
   */
  export type Groups_IngredientsArgs = {
    /**
     * Select specific fields to fetch from the Groups_Ingredients
     * 
    **/
    select?: Groups_IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Groups_IngredientsInclude | null
  }



  /**
   * Model groups_mods
   */


  export type AggregateGroups_mods = {
    _count: Groups_modsCountAggregateOutputType | null
    _avg: Groups_modsAvgAggregateOutputType | null
    _sum: Groups_modsSumAggregateOutputType | null
    _min: Groups_modsMinAggregateOutputType | null
    _max: Groups_modsMaxAggregateOutputType | null
  }

  export type Groups_modsAvgAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsSumAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsMinAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsMaxAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_modsCountAggregateOutputType = {
    user_id: number
    group_id: number
    _all: number
  }


  export type Groups_modsAvgAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsSumAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsMinAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsMaxAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_modsCountAggregateInputType = {
    user_id?: true
    group_id?: true
    _all?: true
  }

  export type Groups_modsAggregateArgs = {
    /**
     * Filter which groups_mods to aggregate.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups_mods
    **/
    _count?: true | Groups_modsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_modsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_modsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_modsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_modsMaxAggregateInputType
  }

  export type GetGroups_modsAggregateType<T extends Groups_modsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_mods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_mods[P]>
      : GetScalarType<T[P], AggregateGroups_mods[P]>
  }




  export type Groups_modsGroupByArgs = {
    where?: groups_modsWhereInput
    orderBy?: Enumerable<groups_modsOrderByWithAggregationInput>
    by: Array<Groups_modsScalarFieldEnum>
    having?: groups_modsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_modsCountAggregateInputType | true
    _avg?: Groups_modsAvgAggregateInputType
    _sum?: Groups_modsSumAggregateInputType
    _min?: Groups_modsMinAggregateInputType
    _max?: Groups_modsMaxAggregateInputType
  }


  export type Groups_modsGroupByOutputType = {
    user_id: number
    group_id: number
    _count: Groups_modsCountAggregateOutputType | null
    _avg: Groups_modsAvgAggregateOutputType | null
    _sum: Groups_modsSumAggregateOutputType | null
    _min: Groups_modsMinAggregateOutputType | null
    _max: Groups_modsMaxAggregateOutputType | null
  }

  type GetGroups_modsGroupByPayload<T extends Groups_modsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_modsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_modsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_modsGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_modsGroupByOutputType[P]>
        }
      >
    >


  export type groups_modsSelect = {
    user_id?: boolean
    group_id?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | usersArgs
  }

  export type groups_modsInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | usersArgs
  }

  export type groups_modsGetPayload<
    S extends boolean | null | undefined | groups_modsArgs,
    U = keyof S
      > = S extends true
        ? groups_mods
    : S extends undefined
    ? never
    : S extends groups_modsArgs | groups_modsFindManyArgs
    ?'include' extends U
    ? groups_mods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof groups_mods ? groups_mods[P] : never
  } 
    : groups_mods
  : groups_mods


  type groups_modsCountArgs = Merge<
    Omit<groups_modsFindManyArgs, 'select' | 'include'> & {
      select?: Groups_modsCountAggregateInputType | true
    }
  >

  export interface groups_modsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_mods that matches the filter.
     * @param {groups_modsFindUniqueArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groups_modsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groups_modsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups_mods'> extends True ? CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>> : CheckSelect<T, Prisma__groups_modsClient<groups_mods | null >, Prisma__groups_modsClient<groups_modsGetPayload<T> | null >>

    /**
     * Find the first Groups_mods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindFirstArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groups_modsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groups_modsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups_mods'> extends True ? CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>> : CheckSelect<T, Prisma__groups_modsClient<groups_mods | null >, Prisma__groups_modsClient<groups_modsGetPayload<T> | null >>

    /**
     * Find zero or more Groups_mods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_mods
     * const groups_mods = await prisma.groups_mods.findMany()
     * 
     * // Get first 10 Groups_mods
     * const groups_mods = await prisma.groups_mods.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const groups_modsWithUser_idOnly = await prisma.groups_mods.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends groups_modsFindManyArgs>(
      args?: SelectSubset<T, groups_modsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>

    /**
     * Create a Groups_mods.
     * @param {groups_modsCreateArgs} args - Arguments to create a Groups_mods.
     * @example
     * // Create one Groups_mods
     * const Groups_mods = await prisma.groups_mods.create({
     *   data: {
     *     // ... data to create a Groups_mods
     *   }
     * })
     * 
    **/
    create<T extends groups_modsCreateArgs>(
      args: SelectSubset<T, groups_modsCreateArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Create many Groups_mods.
     *     @param {groups_modsCreateManyArgs} args - Arguments to create many Groups_mods.
     *     @example
     *     // Create many Groups_mods
     *     const groups_mods = await prisma.groups_mods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groups_modsCreateManyArgs>(
      args?: SelectSubset<T, groups_modsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_mods.
     * @param {groups_modsDeleteArgs} args - Arguments to delete one Groups_mods.
     * @example
     * // Delete one Groups_mods
     * const Groups_mods = await prisma.groups_mods.delete({
     *   where: {
     *     // ... filter to delete one Groups_mods
     *   }
     * })
     * 
    **/
    delete<T extends groups_modsDeleteArgs>(
      args: SelectSubset<T, groups_modsDeleteArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Update one Groups_mods.
     * @param {groups_modsUpdateArgs} args - Arguments to update one Groups_mods.
     * @example
     * // Update one Groups_mods
     * const groups_mods = await prisma.groups_mods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groups_modsUpdateArgs>(
      args: SelectSubset<T, groups_modsUpdateArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Delete zero or more Groups_mods.
     * @param {groups_modsDeleteManyArgs} args - Arguments to filter Groups_mods to delete.
     * @example
     * // Delete a few Groups_mods
     * const { count } = await prisma.groups_mods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groups_modsDeleteManyArgs>(
      args?: SelectSubset<T, groups_modsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_mods
     * const groups_mods = await prisma.groups_mods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groups_modsUpdateManyArgs>(
      args: SelectSubset<T, groups_modsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_mods.
     * @param {groups_modsUpsertArgs} args - Arguments to update or create a Groups_mods.
     * @example
     * // Update or create a Groups_mods
     * const groups_mods = await prisma.groups_mods.upsert({
     *   create: {
     *     // ... data to create a Groups_mods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_mods we want to update
     *   }
     * })
    **/
    upsert<T extends groups_modsUpsertArgs>(
      args: SelectSubset<T, groups_modsUpsertArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Find one Groups_mods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {groups_modsFindUniqueOrThrowArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groups_modsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, groups_modsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Find the first Groups_mods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsFindFirstOrThrowArgs} args - Arguments to find a Groups_mods
     * @example
     * // Get one Groups_mods
     * const groups_mods = await prisma.groups_mods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groups_modsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, groups_modsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_modsClient<groups_mods>, Prisma__groups_modsClient<groups_modsGetPayload<T>>>

    /**
     * Count the number of Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_modsCountArgs} args - Arguments to filter Groups_mods to count.
     * @example
     * // Count the number of Groups_mods
     * const count = await prisma.groups_mods.count({
     *   where: {
     *     // ... the filter for the Groups_mods we want to count
     *   }
     * })
    **/
    count<T extends groups_modsCountArgs>(
      args?: Subset<T, groups_modsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_modsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_modsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_modsAggregateArgs>(args: Subset<T, Groups_modsAggregateArgs>): PrismaPromise<GetGroups_modsAggregateType<T>>

    /**
     * Group by Groups_mods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_modsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_modsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_modsGroupByArgs['orderBy'] }
        : { orderBy?: Groups_modsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_modsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_modsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for groups_mods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groups_modsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * groups_mods base type for findUnique actions
   */
  export type groups_modsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }

  /**
   * groups_mods: findUnique
   */
  export interface groups_modsFindUniqueArgs extends groups_modsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_mods base type for findFirst actions
   */
  export type groups_modsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups_mods.
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups_mods.
     * 
    **/
    distinct?: Enumerable<Groups_modsScalarFieldEnum>
  }

  /**
   * groups_mods: findFirst
   */
  export interface groups_modsFindFirstArgs extends groups_modsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_mods findMany
   */
  export type groups_modsFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter, which groups_mods to fetch.
     * 
    **/
    where?: groups_modsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_mods to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_modsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups_mods.
     * 
    **/
    cursor?: groups_modsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_mods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_mods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_modsScalarFieldEnum>
  }


  /**
   * groups_mods create
   */
  export type groups_modsCreateArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The data needed to create a groups_mods.
     * 
    **/
    data: XOR<groups_modsCreateInput, groups_modsUncheckedCreateInput>
  }


  /**
   * groups_mods createMany
   */
  export type groups_modsCreateManyArgs = {
    /**
     * The data used to create many groups_mods.
     * 
    **/
    data: Enumerable<groups_modsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups_mods update
   */
  export type groups_modsUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The data needed to update a groups_mods.
     * 
    **/
    data: XOR<groups_modsUpdateInput, groups_modsUncheckedUpdateInput>
    /**
     * Choose, which groups_mods to update.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }


  /**
   * groups_mods updateMany
   */
  export type groups_modsUpdateManyArgs = {
    /**
     * The data used to update groups_mods.
     * 
    **/
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyInput>
    /**
     * Filter which groups_mods to update
     * 
    **/
    where?: groups_modsWhereInput
  }


  /**
   * groups_mods upsert
   */
  export type groups_modsUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * The filter to search for the groups_mods to update in case it exists.
     * 
    **/
    where: groups_modsWhereUniqueInput
    /**
     * In case the groups_mods found by the `where` argument doesn't exist, create a new groups_mods with this data.
     * 
    **/
    create: XOR<groups_modsCreateInput, groups_modsUncheckedCreateInput>
    /**
     * In case the groups_mods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groups_modsUpdateInput, groups_modsUncheckedUpdateInput>
  }


  /**
   * groups_mods delete
   */
  export type groups_modsDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
    /**
     * Filter which groups_mods to delete.
     * 
    **/
    where: groups_modsWhereUniqueInput
  }


  /**
   * groups_mods deleteMany
   */
  export type groups_modsDeleteManyArgs = {
    /**
     * Filter which groups_mods to delete
     * 
    **/
    where?: groups_modsWhereInput
  }


  /**
   * groups_mods: findUniqueOrThrow
   */
  export type groups_modsFindUniqueOrThrowArgs = groups_modsFindUniqueArgsBase
      

  /**
   * groups_mods: findFirstOrThrow
   */
  export type groups_modsFindFirstOrThrowArgs = groups_modsFindFirstArgsBase
      

  /**
   * groups_mods without action
   */
  export type groups_modsArgs = {
    /**
     * Select specific fields to fetch from the groups_mods
     * 
    **/
    select?: groups_modsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_modsInclude | null
  }



  /**
   * Model groups_specs
   */


  export type AggregateGroups_specs = {
    _count: Groups_specsCountAggregateOutputType | null
    _avg: Groups_specsAvgAggregateOutputType | null
    _sum: Groups_specsSumAggregateOutputType | null
    _min: Groups_specsMinAggregateOutputType | null
    _max: Groups_specsMaxAggregateOutputType | null
  }

  export type Groups_specsAvgAggregateOutputType = {
    group_id: number | null
    spec_id: number | null
  }

  export type Groups_specsSumAggregateOutputType = {
    group_id: number | null
    spec_id: number | null
  }

  export type Groups_specsMinAggregateOutputType = {
    group_id: number | null
    spec_id: number | null
  }

  export type Groups_specsMaxAggregateOutputType = {
    group_id: number | null
    spec_id: number | null
  }

  export type Groups_specsCountAggregateOutputType = {
    group_id: number
    spec_id: number
    _all: number
  }


  export type Groups_specsAvgAggregateInputType = {
    group_id?: true
    spec_id?: true
  }

  export type Groups_specsSumAggregateInputType = {
    group_id?: true
    spec_id?: true
  }

  export type Groups_specsMinAggregateInputType = {
    group_id?: true
    spec_id?: true
  }

  export type Groups_specsMaxAggregateInputType = {
    group_id?: true
    spec_id?: true
  }

  export type Groups_specsCountAggregateInputType = {
    group_id?: true
    spec_id?: true
    _all?: true
  }

  export type Groups_specsAggregateArgs = {
    /**
     * Filter which groups_specs to aggregate.
     * 
    **/
    where?: groups_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groups_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups_specs
    **/
    _count?: true | Groups_specsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_specsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_specsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_specsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_specsMaxAggregateInputType
  }

  export type GetGroups_specsAggregateType<T extends Groups_specsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_specs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_specs[P]>
      : GetScalarType<T[P], AggregateGroups_specs[P]>
  }




  export type Groups_specsGroupByArgs = {
    where?: groups_specsWhereInput
    orderBy?: Enumerable<groups_specsOrderByWithAggregationInput>
    by: Array<Groups_specsScalarFieldEnum>
    having?: groups_specsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_specsCountAggregateInputType | true
    _avg?: Groups_specsAvgAggregateInputType
    _sum?: Groups_specsSumAggregateInputType
    _min?: Groups_specsMinAggregateInputType
    _max?: Groups_specsMaxAggregateInputType
  }


  export type Groups_specsGroupByOutputType = {
    group_id: number
    spec_id: number
    _count: Groups_specsCountAggregateOutputType | null
    _avg: Groups_specsAvgAggregateOutputType | null
    _sum: Groups_specsSumAggregateOutputType | null
    _min: Groups_specsMinAggregateOutputType | null
    _max: Groups_specsMaxAggregateOutputType | null
  }

  type GetGroups_specsGroupByPayload<T extends Groups_specsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_specsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_specsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_specsGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_specsGroupByOutputType[P]>
        }
      >
    >


  export type groups_specsSelect = {
    group_id?: boolean
    spec_id?: boolean
    groups?: boolean | GroupsArgs
    specs?: boolean | specsArgs
  }

  export type groups_specsInclude = {
    groups?: boolean | GroupsArgs
    specs?: boolean | specsArgs
  }

  export type groups_specsGetPayload<
    S extends boolean | null | undefined | groups_specsArgs,
    U = keyof S
      > = S extends true
        ? groups_specs
    : S extends undefined
    ? never
    : S extends groups_specsArgs | groups_specsFindManyArgs
    ?'include' extends U
    ? groups_specs  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'specs' ? specsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'specs' ? specsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof groups_specs ? groups_specs[P] : never
  } 
    : groups_specs
  : groups_specs


  type groups_specsCountArgs = Merge<
    Omit<groups_specsFindManyArgs, 'select' | 'include'> & {
      select?: Groups_specsCountAggregateInputType | true
    }
  >

  export interface groups_specsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_specs that matches the filter.
     * @param {groups_specsFindUniqueArgs} args - Arguments to find a Groups_specs
     * @example
     * // Get one Groups_specs
     * const groups_specs = await prisma.groups_specs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groups_specsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groups_specsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups_specs'> extends True ? CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>> : CheckSelect<T, Prisma__groups_specsClient<groups_specs | null >, Prisma__groups_specsClient<groups_specsGetPayload<T> | null >>

    /**
     * Find the first Groups_specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_specsFindFirstArgs} args - Arguments to find a Groups_specs
     * @example
     * // Get one Groups_specs
     * const groups_specs = await prisma.groups_specs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groups_specsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groups_specsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups_specs'> extends True ? CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>> : CheckSelect<T, Prisma__groups_specsClient<groups_specs | null >, Prisma__groups_specsClient<groups_specsGetPayload<T> | null >>

    /**
     * Find zero or more Groups_specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_specsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_specs
     * const groups_specs = await prisma.groups_specs.findMany()
     * 
     * // Get first 10 Groups_specs
     * const groups_specs = await prisma.groups_specs.findMany({ take: 10 })
     * 
     * // Only select the `group_id`
     * const groups_specsWithGroup_idOnly = await prisma.groups_specs.findMany({ select: { group_id: true } })
     * 
    **/
    findMany<T extends groups_specsFindManyArgs>(
      args?: SelectSubset<T, groups_specsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups_specs>>, PrismaPromise<Array<groups_specsGetPayload<T>>>>

    /**
     * Create a Groups_specs.
     * @param {groups_specsCreateArgs} args - Arguments to create a Groups_specs.
     * @example
     * // Create one Groups_specs
     * const Groups_specs = await prisma.groups_specs.create({
     *   data: {
     *     // ... data to create a Groups_specs
     *   }
     * })
     * 
    **/
    create<T extends groups_specsCreateArgs>(
      args: SelectSubset<T, groups_specsCreateArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Create many Groups_specs.
     *     @param {groups_specsCreateManyArgs} args - Arguments to create many Groups_specs.
     *     @example
     *     // Create many Groups_specs
     *     const groups_specs = await prisma.groups_specs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groups_specsCreateManyArgs>(
      args?: SelectSubset<T, groups_specsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_specs.
     * @param {groups_specsDeleteArgs} args - Arguments to delete one Groups_specs.
     * @example
     * // Delete one Groups_specs
     * const Groups_specs = await prisma.groups_specs.delete({
     *   where: {
     *     // ... filter to delete one Groups_specs
     *   }
     * })
     * 
    **/
    delete<T extends groups_specsDeleteArgs>(
      args: SelectSubset<T, groups_specsDeleteArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Update one Groups_specs.
     * @param {groups_specsUpdateArgs} args - Arguments to update one Groups_specs.
     * @example
     * // Update one Groups_specs
     * const groups_specs = await prisma.groups_specs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groups_specsUpdateArgs>(
      args: SelectSubset<T, groups_specsUpdateArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Delete zero or more Groups_specs.
     * @param {groups_specsDeleteManyArgs} args - Arguments to filter Groups_specs to delete.
     * @example
     * // Delete a few Groups_specs
     * const { count } = await prisma.groups_specs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groups_specsDeleteManyArgs>(
      args?: SelectSubset<T, groups_specsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_specsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_specs
     * const groups_specs = await prisma.groups_specs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groups_specsUpdateManyArgs>(
      args: SelectSubset<T, groups_specsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_specs.
     * @param {groups_specsUpsertArgs} args - Arguments to update or create a Groups_specs.
     * @example
     * // Update or create a Groups_specs
     * const groups_specs = await prisma.groups_specs.upsert({
     *   create: {
     *     // ... data to create a Groups_specs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_specs we want to update
     *   }
     * })
    **/
    upsert<T extends groups_specsUpsertArgs>(
      args: SelectSubset<T, groups_specsUpsertArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Find one Groups_specs that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {groups_specsFindUniqueOrThrowArgs} args - Arguments to find a Groups_specs
     * @example
     * // Get one Groups_specs
     * const groups_specs = await prisma.groups_specs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groups_specsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, groups_specsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Find the first Groups_specs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_specsFindFirstOrThrowArgs} args - Arguments to find a Groups_specs
     * @example
     * // Get one Groups_specs
     * const groups_specs = await prisma.groups_specs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groups_specsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, groups_specsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_specsClient<groups_specs>, Prisma__groups_specsClient<groups_specsGetPayload<T>>>

    /**
     * Count the number of Groups_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_specsCountArgs} args - Arguments to filter Groups_specs to count.
     * @example
     * // Count the number of Groups_specs
     * const count = await prisma.groups_specs.count({
     *   where: {
     *     // ... the filter for the Groups_specs we want to count
     *   }
     * })
    **/
    count<T extends groups_specsCountArgs>(
      args?: Subset<T, groups_specsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_specsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_specsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_specsAggregateArgs>(args: Subset<T, Groups_specsAggregateArgs>): PrismaPromise<GetGroups_specsAggregateType<T>>

    /**
     * Group by Groups_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_specsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_specsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_specsGroupByArgs['orderBy'] }
        : { orderBy?: Groups_specsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_specsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_specsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for groups_specs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groups_specsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    specs<T extends specsArgs = {}>(args?: Subset<T, specsArgs>): CheckSelect<T, Prisma__specsClient<specs | null >, Prisma__specsClient<specsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * groups_specs base type for findUnique actions
   */
  export type groups_specsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * Filter, which groups_specs to fetch.
     * 
    **/
    where: groups_specsWhereUniqueInput
  }

  /**
   * groups_specs: findUnique
   */
  export interface groups_specsFindUniqueArgs extends groups_specsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_specs base type for findFirst actions
   */
  export type groups_specsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * Filter, which groups_specs to fetch.
     * 
    **/
    where?: groups_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups_specs.
     * 
    **/
    cursor?: groups_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups_specs.
     * 
    **/
    distinct?: Enumerable<Groups_specsScalarFieldEnum>
  }

  /**
   * groups_specs: findFirst
   */
  export interface groups_specsFindFirstArgs extends groups_specsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_specs findMany
   */
  export type groups_specsFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * Filter, which groups_specs to fetch.
     * 
    **/
    where?: groups_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups_specs.
     * 
    **/
    cursor?: groups_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_specs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_specsScalarFieldEnum>
  }


  /**
   * groups_specs create
   */
  export type groups_specsCreateArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * The data needed to create a groups_specs.
     * 
    **/
    data: XOR<groups_specsCreateInput, groups_specsUncheckedCreateInput>
  }


  /**
   * groups_specs createMany
   */
  export type groups_specsCreateManyArgs = {
    /**
     * The data used to create many groups_specs.
     * 
    **/
    data: Enumerable<groups_specsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups_specs update
   */
  export type groups_specsUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * The data needed to update a groups_specs.
     * 
    **/
    data: XOR<groups_specsUpdateInput, groups_specsUncheckedUpdateInput>
    /**
     * Choose, which groups_specs to update.
     * 
    **/
    where: groups_specsWhereUniqueInput
  }


  /**
   * groups_specs updateMany
   */
  export type groups_specsUpdateManyArgs = {
    /**
     * The data used to update groups_specs.
     * 
    **/
    data: XOR<groups_specsUpdateManyMutationInput, groups_specsUncheckedUpdateManyInput>
    /**
     * Filter which groups_specs to update
     * 
    **/
    where?: groups_specsWhereInput
  }


  /**
   * groups_specs upsert
   */
  export type groups_specsUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * The filter to search for the groups_specs to update in case it exists.
     * 
    **/
    where: groups_specsWhereUniqueInput
    /**
     * In case the groups_specs found by the `where` argument doesn't exist, create a new groups_specs with this data.
     * 
    **/
    create: XOR<groups_specsCreateInput, groups_specsUncheckedCreateInput>
    /**
     * In case the groups_specs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groups_specsUpdateInput, groups_specsUncheckedUpdateInput>
  }


  /**
   * groups_specs delete
   */
  export type groups_specsDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
    /**
     * Filter which groups_specs to delete.
     * 
    **/
    where: groups_specsWhereUniqueInput
  }


  /**
   * groups_specs deleteMany
   */
  export type groups_specsDeleteManyArgs = {
    /**
     * Filter which groups_specs to delete
     * 
    **/
    where?: groups_specsWhereInput
  }


  /**
   * groups_specs: findUniqueOrThrow
   */
  export type groups_specsFindUniqueOrThrowArgs = groups_specsFindUniqueArgsBase
      

  /**
   * groups_specs: findFirstOrThrow
   */
  export type groups_specsFindFirstOrThrowArgs = groups_specsFindFirstArgsBase
      

  /**
   * groups_specs without action
   */
  export type groups_specsArgs = {
    /**
     * Select specific fields to fetch from the groups_specs
     * 
    **/
    select?: groups_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_specsInclude | null
  }



  /**
   * Model groups_users
   */


  export type AggregateGroups_users = {
    _count: Groups_usersCountAggregateOutputType | null
    _avg: Groups_usersAvgAggregateOutputType | null
    _sum: Groups_usersSumAggregateOutputType | null
    _min: Groups_usersMinAggregateOutputType | null
    _max: Groups_usersMaxAggregateOutputType | null
  }

  export type Groups_usersAvgAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersSumAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersMinAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersMaxAggregateOutputType = {
    user_id: number | null
    group_id: number | null
  }

  export type Groups_usersCountAggregateOutputType = {
    user_id: number
    group_id: number
    _all: number
  }


  export type Groups_usersAvgAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersSumAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersMinAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersMaxAggregateInputType = {
    user_id?: true
    group_id?: true
  }

  export type Groups_usersCountAggregateInputType = {
    user_id?: true
    group_id?: true
    _all?: true
  }

  export type Groups_usersAggregateArgs = {
    /**
     * Filter which groups_users to aggregate.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups_users
    **/
    _count?: true | Groups_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Groups_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Groups_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Groups_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Groups_usersMaxAggregateInputType
  }

  export type GetGroups_usersAggregateType<T extends Groups_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups_users[P]>
      : GetScalarType<T[P], AggregateGroups_users[P]>
  }




  export type Groups_usersGroupByArgs = {
    where?: groups_usersWhereInput
    orderBy?: Enumerable<groups_usersOrderByWithAggregationInput>
    by: Array<Groups_usersScalarFieldEnum>
    having?: groups_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Groups_usersCountAggregateInputType | true
    _avg?: Groups_usersAvgAggregateInputType
    _sum?: Groups_usersSumAggregateInputType
    _min?: Groups_usersMinAggregateInputType
    _max?: Groups_usersMaxAggregateInputType
  }


  export type Groups_usersGroupByOutputType = {
    user_id: number
    group_id: number
    _count: Groups_usersCountAggregateOutputType | null
    _avg: Groups_usersAvgAggregateOutputType | null
    _sum: Groups_usersSumAggregateOutputType | null
    _min: Groups_usersMinAggregateOutputType | null
    _max: Groups_usersMaxAggregateOutputType | null
  }

  type GetGroups_usersGroupByPayload<T extends Groups_usersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Groups_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Groups_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Groups_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Groups_usersGroupByOutputType[P]>
        }
      >
    >


  export type groups_usersSelect = {
    user_id?: boolean
    group_id?: boolean
    groups?: boolean | GroupsArgs
    users?: boolean | usersArgs
  }

  export type groups_usersInclude = {
    groups?: boolean | GroupsArgs
    users?: boolean | usersArgs
  }

  export type groups_usersGetPayload<
    S extends boolean | null | undefined | groups_usersArgs,
    U = keyof S
      > = S extends true
        ? groups_users
    : S extends undefined
    ? never
    : S extends groups_usersArgs | groups_usersFindManyArgs
    ?'include' extends U
    ? groups_users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups' ? GroupsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof groups_users ? groups_users[P] : never
  } 
    : groups_users
  : groups_users


  type groups_usersCountArgs = Merge<
    Omit<groups_usersFindManyArgs, 'select' | 'include'> & {
      select?: Groups_usersCountAggregateInputType | true
    }
  >

  export interface groups_usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Groups_users that matches the filter.
     * @param {groups_usersFindUniqueArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groups_usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, groups_usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'groups_users'> extends True ? CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>> : CheckSelect<T, Prisma__groups_usersClient<groups_users | null >, Prisma__groups_usersClient<groups_usersGetPayload<T> | null >>

    /**
     * Find the first Groups_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindFirstArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groups_usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, groups_usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'groups_users'> extends True ? CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>> : CheckSelect<T, Prisma__groups_usersClient<groups_users | null >, Prisma__groups_usersClient<groups_usersGetPayload<T> | null >>

    /**
     * Find zero or more Groups_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups_users
     * const groups_users = await prisma.groups_users.findMany()
     * 
     * // Get first 10 Groups_users
     * const groups_users = await prisma.groups_users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const groups_usersWithUser_idOnly = await prisma.groups_users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends groups_usersFindManyArgs>(
      args?: SelectSubset<T, groups_usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>

    /**
     * Create a Groups_users.
     * @param {groups_usersCreateArgs} args - Arguments to create a Groups_users.
     * @example
     * // Create one Groups_users
     * const Groups_users = await prisma.groups_users.create({
     *   data: {
     *     // ... data to create a Groups_users
     *   }
     * })
     * 
    **/
    create<T extends groups_usersCreateArgs>(
      args: SelectSubset<T, groups_usersCreateArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Create many Groups_users.
     *     @param {groups_usersCreateManyArgs} args - Arguments to create many Groups_users.
     *     @example
     *     // Create many Groups_users
     *     const groups_users = await prisma.groups_users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groups_usersCreateManyArgs>(
      args?: SelectSubset<T, groups_usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Groups_users.
     * @param {groups_usersDeleteArgs} args - Arguments to delete one Groups_users.
     * @example
     * // Delete one Groups_users
     * const Groups_users = await prisma.groups_users.delete({
     *   where: {
     *     // ... filter to delete one Groups_users
     *   }
     * })
     * 
    **/
    delete<T extends groups_usersDeleteArgs>(
      args: SelectSubset<T, groups_usersDeleteArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Update one Groups_users.
     * @param {groups_usersUpdateArgs} args - Arguments to update one Groups_users.
     * @example
     * // Update one Groups_users
     * const groups_users = await prisma.groups_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groups_usersUpdateArgs>(
      args: SelectSubset<T, groups_usersUpdateArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Delete zero or more Groups_users.
     * @param {groups_usersDeleteManyArgs} args - Arguments to filter Groups_users to delete.
     * @example
     * // Delete a few Groups_users
     * const { count } = await prisma.groups_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groups_usersDeleteManyArgs>(
      args?: SelectSubset<T, groups_usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups_users
     * const groups_users = await prisma.groups_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groups_usersUpdateManyArgs>(
      args: SelectSubset<T, groups_usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups_users.
     * @param {groups_usersUpsertArgs} args - Arguments to update or create a Groups_users.
     * @example
     * // Update or create a Groups_users
     * const groups_users = await prisma.groups_users.upsert({
     *   create: {
     *     // ... data to create a Groups_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups_users we want to update
     *   }
     * })
    **/
    upsert<T extends groups_usersUpsertArgs>(
      args: SelectSubset<T, groups_usersUpsertArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Find one Groups_users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {groups_usersFindUniqueOrThrowArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groups_usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, groups_usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Find the first Groups_users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersFindFirstOrThrowArgs} args - Arguments to find a Groups_users
     * @example
     * // Get one Groups_users
     * const groups_users = await prisma.groups_users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groups_usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, groups_usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__groups_usersClient<groups_users>, Prisma__groups_usersClient<groups_usersGetPayload<T>>>

    /**
     * Count the number of Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groups_usersCountArgs} args - Arguments to filter Groups_users to count.
     * @example
     * // Count the number of Groups_users
     * const count = await prisma.groups_users.count({
     *   where: {
     *     // ... the filter for the Groups_users we want to count
     *   }
     * })
    **/
    count<T extends groups_usersCountArgs>(
      args?: Subset<T, groups_usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Groups_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Groups_usersAggregateArgs>(args: Subset<T, Groups_usersAggregateArgs>): PrismaPromise<GetGroups_usersAggregateType<T>>

    /**
     * Group by Groups_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Groups_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Groups_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Groups_usersGroupByArgs['orderBy'] }
        : { orderBy?: Groups_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Groups_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroups_usersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for groups_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__groups_usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups<T extends GroupsArgs = {}>(args?: Subset<T, GroupsArgs>): CheckSelect<T, Prisma__GroupsClient<Groups | null >, Prisma__GroupsClient<GroupsGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * groups_users base type for findUnique actions
   */
  export type groups_usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }

  /**
   * groups_users: findUnique
   */
  export interface groups_usersFindUniqueArgs extends groups_usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_users base type for findFirst actions
   */
  export type groups_usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups_users.
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups_users.
     * 
    **/
    distinct?: Enumerable<Groups_usersScalarFieldEnum>
  }

  /**
   * groups_users: findFirst
   */
  export interface groups_usersFindFirstArgs extends groups_usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * groups_users findMany
   */
  export type groups_usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter, which groups_users to fetch.
     * 
    **/
    where?: groups_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups_users to fetch.
     * 
    **/
    orderBy?: Enumerable<groups_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups_users.
     * 
    **/
    cursor?: groups_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Groups_usersScalarFieldEnum>
  }


  /**
   * groups_users create
   */
  export type groups_usersCreateArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The data needed to create a groups_users.
     * 
    **/
    data: XOR<groups_usersCreateInput, groups_usersUncheckedCreateInput>
  }


  /**
   * groups_users createMany
   */
  export type groups_usersCreateManyArgs = {
    /**
     * The data used to create many groups_users.
     * 
    **/
    data: Enumerable<groups_usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * groups_users update
   */
  export type groups_usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The data needed to update a groups_users.
     * 
    **/
    data: XOR<groups_usersUpdateInput, groups_usersUncheckedUpdateInput>
    /**
     * Choose, which groups_users to update.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }


  /**
   * groups_users updateMany
   */
  export type groups_usersUpdateManyArgs = {
    /**
     * The data used to update groups_users.
     * 
    **/
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyInput>
    /**
     * Filter which groups_users to update
     * 
    **/
    where?: groups_usersWhereInput
  }


  /**
   * groups_users upsert
   */
  export type groups_usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * The filter to search for the groups_users to update in case it exists.
     * 
    **/
    where: groups_usersWhereUniqueInput
    /**
     * In case the groups_users found by the `where` argument doesn't exist, create a new groups_users with this data.
     * 
    **/
    create: XOR<groups_usersCreateInput, groups_usersUncheckedCreateInput>
    /**
     * In case the groups_users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<groups_usersUpdateInput, groups_usersUncheckedUpdateInput>
  }


  /**
   * groups_users delete
   */
  export type groups_usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
    /**
     * Filter which groups_users to delete.
     * 
    **/
    where: groups_usersWhereUniqueInput
  }


  /**
   * groups_users deleteMany
   */
  export type groups_usersDeleteManyArgs = {
    /**
     * Filter which groups_users to delete
     * 
    **/
    where?: groups_usersWhereInput
  }


  /**
   * groups_users: findUniqueOrThrow
   */
  export type groups_usersFindUniqueOrThrowArgs = groups_usersFindUniqueArgsBase
      

  /**
   * groups_users: findFirstOrThrow
   */
  export type groups_usersFindFirstOrThrowArgs = groups_usersFindFirstArgsBase
      

  /**
   * groups_users without action
   */
  export type groups_usersArgs = {
    /**
     * Select specific fields to fetch from the groups_users
     * 
    **/
    select?: groups_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: groups_usersInclude | null
  }



  /**
   * Model Ingredients
   */


  export type AggregateIngredients = {
    _count: IngredientsCountAggregateOutputType | null
    _avg: IngredientsAvgAggregateOutputType | null
    _sum: IngredientsSumAggregateOutputType | null
    _min: IngredientsMinAggregateOutputType | null
    _max: IngredientsMaxAggregateOutputType | null
  }

  export type IngredientsAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
  }

  export type IngredientsSumAggregateOutputType = {
    id: number | null
    amount: number | null
    price: Decimal | null
  }

  export type IngredientsMinAggregateOutputType = {
    id: number | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
  }

  export type IngredientsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
  }

  export type IngredientsCountAggregateOutputType = {
    id: number
    name: number
    amount: number
    unit: number
    price: number
    source: number
    _all: number
  }


  export type IngredientsAvgAggregateInputType = {
    id?: true
    amount?: true
    price?: true
  }

  export type IngredientsSumAggregateInputType = {
    id?: true
    amount?: true
    price?: true
  }

  export type IngredientsMinAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
  }

  export type IngredientsMaxAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
  }

  export type IngredientsCountAggregateInputType = {
    id?: true
    name?: true
    amount?: true
    unit?: true
    price?: true
    source?: true
    _all?: true
  }

  export type IngredientsAggregateArgs = {
    /**
     * Filter which Ingredients to aggregate.
     * 
    **/
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientsMaxAggregateInputType
  }

  export type GetIngredientsAggregateType<T extends IngredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredients[P]>
      : GetScalarType<T[P], AggregateIngredients[P]>
  }




  export type IngredientsGroupByArgs = {
    where?: IngredientsWhereInput
    orderBy?: Enumerable<IngredientsOrderByWithAggregationInput>
    by: Array<IngredientsScalarFieldEnum>
    having?: IngredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientsCountAggregateInputType | true
    _avg?: IngredientsAvgAggregateInputType
    _sum?: IngredientsSumAggregateInputType
    _min?: IngredientsMinAggregateInputType
    _max?: IngredientsMaxAggregateInputType
  }


  export type IngredientsGroupByOutputType = {
    id: number
    name: string
    amount: number | null
    unit: string | null
    price: Decimal | null
    source: string | null
    _count: IngredientsCountAggregateOutputType | null
    _avg: IngredientsAvgAggregateOutputType | null
    _sum: IngredientsSumAggregateOutputType | null
    _min: IngredientsMinAggregateOutputType | null
    _max: IngredientsMaxAggregateOutputType | null
  }

  type GetIngredientsGroupByPayload<T extends IngredientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IngredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientsGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientsGroupByOutputType[P]>
        }
      >
    >


  export type IngredientsSelect = {
    id?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    price?: boolean
    source?: boolean
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    quantities?: boolean | quantitiesFindManyArgs
    users_ingredients?: boolean | users_ingredientsFindManyArgs
    _count?: boolean | IngredientsCountOutputTypeArgs
  }

  export type IngredientsInclude = {
    groups_ingredients?: boolean | Groups_IngredientsFindManyArgs
    quantities?: boolean | quantitiesFindManyArgs
    users_ingredients?: boolean | users_ingredientsFindManyArgs
    _count?: boolean | IngredientsCountOutputTypeArgs
  }

  export type IngredientsGetPayload<
    S extends boolean | null | undefined | IngredientsArgs,
    U = keyof S
      > = S extends true
        ? Ingredients
    : S extends undefined
    ? never
    : S extends IngredientsArgs | IngredientsFindManyArgs
    ?'include' extends U
    ? Ingredients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'quantities' ? Array < quantitiesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'users_ingredients' ? Array < users_ingredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups_ingredients' ? Array < Groups_IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'quantities' ? Array < quantitiesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'users_ingredients' ? Array < users_ingredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? IngredientsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Ingredients ? Ingredients[P] : never
  } 
    : Ingredients
  : Ingredients


  type IngredientsCountArgs = Merge<
    Omit<IngredientsFindManyArgs, 'select' | 'include'> & {
      select?: IngredientsCountAggregateInputType | true
    }
  >

  export interface IngredientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Ingredients that matches the filter.
     * @param {IngredientsFindUniqueArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IngredientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IngredientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ingredients'> extends True ? CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__IngredientsClient<Ingredients | null >, Prisma__IngredientsClient<IngredientsGetPayload<T> | null >>

    /**
     * Find the first Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindFirstArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IngredientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IngredientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ingredients'> extends True ? CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>> : CheckSelect<T, Prisma__IngredientsClient<Ingredients | null >, Prisma__IngredientsClient<IngredientsGetPayload<T> | null >>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredients.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientsWithIdOnly = await prisma.ingredients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IngredientsFindManyArgs>(
      args?: SelectSubset<T, IngredientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Ingredients>>, PrismaPromise<Array<IngredientsGetPayload<T>>>>

    /**
     * Create a Ingredients.
     * @param {IngredientsCreateArgs} args - Arguments to create a Ingredients.
     * @example
     * // Create one Ingredients
     * const Ingredients = await prisma.ingredients.create({
     *   data: {
     *     // ... data to create a Ingredients
     *   }
     * })
     * 
    **/
    create<T extends IngredientsCreateArgs>(
      args: SelectSubset<T, IngredientsCreateArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Create many Ingredients.
     *     @param {IngredientsCreateManyArgs} args - Arguments to create many Ingredients.
     *     @example
     *     // Create many Ingredients
     *     const ingredients = await prisma.ingredients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IngredientsCreateManyArgs>(
      args?: SelectSubset<T, IngredientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredients.
     * @param {IngredientsDeleteArgs} args - Arguments to delete one Ingredients.
     * @example
     * // Delete one Ingredients
     * const Ingredients = await prisma.ingredients.delete({
     *   where: {
     *     // ... filter to delete one Ingredients
     *   }
     * })
     * 
    **/
    delete<T extends IngredientsDeleteArgs>(
      args: SelectSubset<T, IngredientsDeleteArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Update one Ingredients.
     * @param {IngredientsUpdateArgs} args - Arguments to update one Ingredients.
     * @example
     * // Update one Ingredients
     * const ingredients = await prisma.ingredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IngredientsUpdateArgs>(
      args: SelectSubset<T, IngredientsUpdateArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientsDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IngredientsDeleteManyArgs>(
      args?: SelectSubset<T, IngredientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredients = await prisma.ingredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IngredientsUpdateManyArgs>(
      args: SelectSubset<T, IngredientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredients.
     * @param {IngredientsUpsertArgs} args - Arguments to update or create a Ingredients.
     * @example
     * // Update or create a Ingredients
     * const ingredients = await prisma.ingredients.upsert({
     *   create: {
     *     // ... data to create a Ingredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredients we want to update
     *   }
     * })
    **/
    upsert<T extends IngredientsUpsertArgs>(
      args: SelectSubset<T, IngredientsUpsertArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Find one Ingredients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {IngredientsFindUniqueOrThrowArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IngredientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IngredientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Find the first Ingredients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsFindFirstOrThrowArgs} args - Arguments to find a Ingredients
     * @example
     * // Get one Ingredients
     * const ingredients = await prisma.ingredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IngredientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IngredientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__IngredientsClient<Ingredients>, Prisma__IngredientsClient<IngredientsGetPayload<T>>>

    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredients.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientsCountArgs>(
      args?: Subset<T, IngredientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientsAggregateArgs>(args: Subset<T, IngredientsAggregateArgs>): PrismaPromise<GetIngredientsAggregateType<T>>

    /**
     * Group by Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientsGroupByArgs['orderBy'] }
        : { orderBy?: IngredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IngredientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups_ingredients<T extends Groups_IngredientsFindManyArgs = {}>(args?: Subset<T, Groups_IngredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Groups_Ingredients>>, PrismaPromise<Array<Groups_IngredientsGetPayload<T>>>>;

    quantities<T extends quantitiesFindManyArgs = {}>(args?: Subset<T, quantitiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<quantities>>, PrismaPromise<Array<quantitiesGetPayload<T>>>>;

    users_ingredients<T extends users_ingredientsFindManyArgs = {}>(args?: Subset<T, users_ingredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users_ingredients>>, PrismaPromise<Array<users_ingredientsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ingredients base type for findUnique actions
   */
  export type IngredientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * Filter, which Ingredients to fetch.
     * 
    **/
    where: IngredientsWhereUniqueInput
  }

  /**
   * Ingredients: findUnique
   */
  export interface IngredientsFindUniqueArgs extends IngredientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredients base type for findFirst actions
   */
  export type IngredientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * Filter, which Ingredients to fetch.
     * 
    **/
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     * 
    **/
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     * 
    **/
    distinct?: Enumerable<IngredientsScalarFieldEnum>
  }

  /**
   * Ingredients: findFirst
   */
  export interface IngredientsFindFirstArgs extends IngredientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ingredients findMany
   */
  export type IngredientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * Filter, which Ingredients to fetch.
     * 
    **/
    where?: IngredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<IngredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     * 
    **/
    cursor?: IngredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IngredientsScalarFieldEnum>
  }


  /**
   * Ingredients create
   */
  export type IngredientsCreateArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * The data needed to create a Ingredients.
     * 
    **/
    data: XOR<IngredientsCreateInput, IngredientsUncheckedCreateInput>
  }


  /**
   * Ingredients createMany
   */
  export type IngredientsCreateManyArgs = {
    /**
     * The data used to create many Ingredients.
     * 
    **/
    data: Enumerable<IngredientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ingredients update
   */
  export type IngredientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * The data needed to update a Ingredients.
     * 
    **/
    data: XOR<IngredientsUpdateInput, IngredientsUncheckedUpdateInput>
    /**
     * Choose, which Ingredients to update.
     * 
    **/
    where: IngredientsWhereUniqueInput
  }


  /**
   * Ingredients updateMany
   */
  export type IngredientsUpdateManyArgs = {
    /**
     * The data used to update Ingredients.
     * 
    **/
    data: XOR<IngredientsUpdateManyMutationInput, IngredientsUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     * 
    **/
    where?: IngredientsWhereInput
  }


  /**
   * Ingredients upsert
   */
  export type IngredientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * The filter to search for the Ingredients to update in case it exists.
     * 
    **/
    where: IngredientsWhereUniqueInput
    /**
     * In case the Ingredients found by the `where` argument doesn't exist, create a new Ingredients with this data.
     * 
    **/
    create: XOR<IngredientsCreateInput, IngredientsUncheckedCreateInput>
    /**
     * In case the Ingredients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IngredientsUpdateInput, IngredientsUncheckedUpdateInput>
  }


  /**
   * Ingredients delete
   */
  export type IngredientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
    /**
     * Filter which Ingredients to delete.
     * 
    **/
    where: IngredientsWhereUniqueInput
  }


  /**
   * Ingredients deleteMany
   */
  export type IngredientsDeleteManyArgs = {
    /**
     * Filter which Ingredients to delete
     * 
    **/
    where?: IngredientsWhereInput
  }


  /**
   * Ingredients: findUniqueOrThrow
   */
  export type IngredientsFindUniqueOrThrowArgs = IngredientsFindUniqueArgsBase
      

  /**
   * Ingredients: findFirstOrThrow
   */
  export type IngredientsFindFirstOrThrowArgs = IngredientsFindFirstArgsBase
      

  /**
   * Ingredients without action
   */
  export type IngredientsArgs = {
    /**
     * Select specific fields to fetch from the Ingredients
     * 
    **/
    select?: IngredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IngredientsInclude | null
  }



  /**
   * Model quantities
   */


  export type AggregateQuantities = {
    _count: QuantitiesCountAggregateOutputType | null
    _avg: QuantitiesAvgAggregateOutputType | null
    _sum: QuantitiesSumAggregateOutputType | null
    _min: QuantitiesMinAggregateOutputType | null
    _max: QuantitiesMaxAggregateOutputType | null
  }

  export type QuantitiesAvgAggregateOutputType = {
    id: number | null
    spec_id: number | null
    ingredient_id: number | null
    amount: number | null
  }

  export type QuantitiesSumAggregateOutputType = {
    id: number | null
    spec_id: number | null
    ingredient_id: number | null
    amount: number | null
  }

  export type QuantitiesMinAggregateOutputType = {
    id: number | null
    spec_id: number | null
    ingredient_id: number | null
    amount: number | null
    unit: string | null
  }

  export type QuantitiesMaxAggregateOutputType = {
    id: number | null
    spec_id: number | null
    ingredient_id: number | null
    amount: number | null
    unit: string | null
  }

  export type QuantitiesCountAggregateOutputType = {
    id: number
    spec_id: number
    ingredient_id: number
    amount: number
    unit: number
    _all: number
  }


  export type QuantitiesAvgAggregateInputType = {
    id?: true
    spec_id?: true
    ingredient_id?: true
    amount?: true
  }

  export type QuantitiesSumAggregateInputType = {
    id?: true
    spec_id?: true
    ingredient_id?: true
    amount?: true
  }

  export type QuantitiesMinAggregateInputType = {
    id?: true
    spec_id?: true
    ingredient_id?: true
    amount?: true
    unit?: true
  }

  export type QuantitiesMaxAggregateInputType = {
    id?: true
    spec_id?: true
    ingredient_id?: true
    amount?: true
    unit?: true
  }

  export type QuantitiesCountAggregateInputType = {
    id?: true
    spec_id?: true
    ingredient_id?: true
    amount?: true
    unit?: true
    _all?: true
  }

  export type QuantitiesAggregateArgs = {
    /**
     * Filter which quantities to aggregate.
     * 
    **/
    where?: quantitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quantities to fetch.
     * 
    **/
    orderBy?: Enumerable<quantitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: quantitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quantities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quantities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned quantities
    **/
    _count?: true | QuantitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuantitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuantitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuantitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuantitiesMaxAggregateInputType
  }

  export type GetQuantitiesAggregateType<T extends QuantitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateQuantities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuantities[P]>
      : GetScalarType<T[P], AggregateQuantities[P]>
  }




  export type QuantitiesGroupByArgs = {
    where?: quantitiesWhereInput
    orderBy?: Enumerable<quantitiesOrderByWithAggregationInput>
    by: Array<QuantitiesScalarFieldEnum>
    having?: quantitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuantitiesCountAggregateInputType | true
    _avg?: QuantitiesAvgAggregateInputType
    _sum?: QuantitiesSumAggregateInputType
    _min?: QuantitiesMinAggregateInputType
    _max?: QuantitiesMaxAggregateInputType
  }


  export type QuantitiesGroupByOutputType = {
    id: number
    spec_id: number | null
    ingredient_id: number | null
    amount: number | null
    unit: string | null
    _count: QuantitiesCountAggregateOutputType | null
    _avg: QuantitiesAvgAggregateOutputType | null
    _sum: QuantitiesSumAggregateOutputType | null
    _min: QuantitiesMinAggregateOutputType | null
    _max: QuantitiesMaxAggregateOutputType | null
  }

  type GetQuantitiesGroupByPayload<T extends QuantitiesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<QuantitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuantitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuantitiesGroupByOutputType[P]>
            : GetScalarType<T[P], QuantitiesGroupByOutputType[P]>
        }
      >
    >


  export type quantitiesSelect = {
    id?: boolean
    spec_id?: boolean
    ingredient_id?: boolean
    amount?: boolean
    unit?: boolean
    ingredients?: boolean | IngredientsArgs
    specs?: boolean | specsArgs
  }

  export type quantitiesInclude = {
    ingredients?: boolean | IngredientsArgs
    specs?: boolean | specsArgs
  }

  export type quantitiesGetPayload<
    S extends boolean | null | undefined | quantitiesArgs,
    U = keyof S
      > = S extends true
        ? quantities
    : S extends undefined
    ? never
    : S extends quantitiesArgs | quantitiesFindManyArgs
    ?'include' extends U
    ? quantities  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'specs' ? specsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'specs' ? specsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof quantities ? quantities[P] : never
  } 
    : quantities
  : quantities


  type quantitiesCountArgs = Merge<
    Omit<quantitiesFindManyArgs, 'select' | 'include'> & {
      select?: QuantitiesCountAggregateInputType | true
    }
  >

  export interface quantitiesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Quantities that matches the filter.
     * @param {quantitiesFindUniqueArgs} args - Arguments to find a Quantities
     * @example
     * // Get one Quantities
     * const quantities = await prisma.quantities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends quantitiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, quantitiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'quantities'> extends True ? CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>> : CheckSelect<T, Prisma__quantitiesClient<quantities | null >, Prisma__quantitiesClient<quantitiesGetPayload<T> | null >>

    /**
     * Find the first Quantities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quantitiesFindFirstArgs} args - Arguments to find a Quantities
     * @example
     * // Get one Quantities
     * const quantities = await prisma.quantities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends quantitiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, quantitiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'quantities'> extends True ? CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>> : CheckSelect<T, Prisma__quantitiesClient<quantities | null >, Prisma__quantitiesClient<quantitiesGetPayload<T> | null >>

    /**
     * Find zero or more Quantities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quantitiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quantities
     * const quantities = await prisma.quantities.findMany()
     * 
     * // Get first 10 Quantities
     * const quantities = await prisma.quantities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quantitiesWithIdOnly = await prisma.quantities.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends quantitiesFindManyArgs>(
      args?: SelectSubset<T, quantitiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<quantities>>, PrismaPromise<Array<quantitiesGetPayload<T>>>>

    /**
     * Create a Quantities.
     * @param {quantitiesCreateArgs} args - Arguments to create a Quantities.
     * @example
     * // Create one Quantities
     * const Quantities = await prisma.quantities.create({
     *   data: {
     *     // ... data to create a Quantities
     *   }
     * })
     * 
    **/
    create<T extends quantitiesCreateArgs>(
      args: SelectSubset<T, quantitiesCreateArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Create many Quantities.
     *     @param {quantitiesCreateManyArgs} args - Arguments to create many Quantities.
     *     @example
     *     // Create many Quantities
     *     const quantities = await prisma.quantities.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends quantitiesCreateManyArgs>(
      args?: SelectSubset<T, quantitiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Quantities.
     * @param {quantitiesDeleteArgs} args - Arguments to delete one Quantities.
     * @example
     * // Delete one Quantities
     * const Quantities = await prisma.quantities.delete({
     *   where: {
     *     // ... filter to delete one Quantities
     *   }
     * })
     * 
    **/
    delete<T extends quantitiesDeleteArgs>(
      args: SelectSubset<T, quantitiesDeleteArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Update one Quantities.
     * @param {quantitiesUpdateArgs} args - Arguments to update one Quantities.
     * @example
     * // Update one Quantities
     * const quantities = await prisma.quantities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends quantitiesUpdateArgs>(
      args: SelectSubset<T, quantitiesUpdateArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Delete zero or more Quantities.
     * @param {quantitiesDeleteManyArgs} args - Arguments to filter Quantities to delete.
     * @example
     * // Delete a few Quantities
     * const { count } = await prisma.quantities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends quantitiesDeleteManyArgs>(
      args?: SelectSubset<T, quantitiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quantitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quantities
     * const quantities = await prisma.quantities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends quantitiesUpdateManyArgs>(
      args: SelectSubset<T, quantitiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Quantities.
     * @param {quantitiesUpsertArgs} args - Arguments to update or create a Quantities.
     * @example
     * // Update or create a Quantities
     * const quantities = await prisma.quantities.upsert({
     *   create: {
     *     // ... data to create a Quantities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quantities we want to update
     *   }
     * })
    **/
    upsert<T extends quantitiesUpsertArgs>(
      args: SelectSubset<T, quantitiesUpsertArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Find one Quantities that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {quantitiesFindUniqueOrThrowArgs} args - Arguments to find a Quantities
     * @example
     * // Get one Quantities
     * const quantities = await prisma.quantities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends quantitiesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, quantitiesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Find the first Quantities that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quantitiesFindFirstOrThrowArgs} args - Arguments to find a Quantities
     * @example
     * // Get one Quantities
     * const quantities = await prisma.quantities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends quantitiesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, quantitiesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__quantitiesClient<quantities>, Prisma__quantitiesClient<quantitiesGetPayload<T>>>

    /**
     * Count the number of Quantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {quantitiesCountArgs} args - Arguments to filter Quantities to count.
     * @example
     * // Count the number of Quantities
     * const count = await prisma.quantities.count({
     *   where: {
     *     // ... the filter for the Quantities we want to count
     *   }
     * })
    **/
    count<T extends quantitiesCountArgs>(
      args?: Subset<T, quantitiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuantitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuantitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuantitiesAggregateArgs>(args: Subset<T, QuantitiesAggregateArgs>): PrismaPromise<GetQuantitiesAggregateType<T>>

    /**
     * Group by Quantities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuantitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuantitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuantitiesGroupByArgs['orderBy'] }
        : { orderBy?: QuantitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuantitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuantitiesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for quantities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__quantitiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredients<T extends IngredientsArgs = {}>(args?: Subset<T, IngredientsArgs>): CheckSelect<T, Prisma__IngredientsClient<Ingredients | null >, Prisma__IngredientsClient<IngredientsGetPayload<T> | null >>;

    specs<T extends specsArgs = {}>(args?: Subset<T, specsArgs>): CheckSelect<T, Prisma__specsClient<specs | null >, Prisma__specsClient<specsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * quantities base type for findUnique actions
   */
  export type quantitiesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * Filter, which quantities to fetch.
     * 
    **/
    where: quantitiesWhereUniqueInput
  }

  /**
   * quantities: findUnique
   */
  export interface quantitiesFindUniqueArgs extends quantitiesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quantities base type for findFirst actions
   */
  export type quantitiesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * Filter, which quantities to fetch.
     * 
    **/
    where?: quantitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quantities to fetch.
     * 
    **/
    orderBy?: Enumerable<quantitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for quantities.
     * 
    **/
    cursor?: quantitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quantities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quantities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of quantities.
     * 
    **/
    distinct?: Enumerable<QuantitiesScalarFieldEnum>
  }

  /**
   * quantities: findFirst
   */
  export interface quantitiesFindFirstArgs extends quantitiesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * quantities findMany
   */
  export type quantitiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * Filter, which quantities to fetch.
     * 
    **/
    where?: quantitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of quantities to fetch.
     * 
    **/
    orderBy?: Enumerable<quantitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing quantities.
     * 
    **/
    cursor?: quantitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` quantities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` quantities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<QuantitiesScalarFieldEnum>
  }


  /**
   * quantities create
   */
  export type quantitiesCreateArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * The data needed to create a quantities.
     * 
    **/
    data: XOR<quantitiesCreateInput, quantitiesUncheckedCreateInput>
  }


  /**
   * quantities createMany
   */
  export type quantitiesCreateManyArgs = {
    /**
     * The data used to create many quantities.
     * 
    **/
    data: Enumerable<quantitiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * quantities update
   */
  export type quantitiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * The data needed to update a quantities.
     * 
    **/
    data: XOR<quantitiesUpdateInput, quantitiesUncheckedUpdateInput>
    /**
     * Choose, which quantities to update.
     * 
    **/
    where: quantitiesWhereUniqueInput
  }


  /**
   * quantities updateMany
   */
  export type quantitiesUpdateManyArgs = {
    /**
     * The data used to update quantities.
     * 
    **/
    data: XOR<quantitiesUpdateManyMutationInput, quantitiesUncheckedUpdateManyInput>
    /**
     * Filter which quantities to update
     * 
    **/
    where?: quantitiesWhereInput
  }


  /**
   * quantities upsert
   */
  export type quantitiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * The filter to search for the quantities to update in case it exists.
     * 
    **/
    where: quantitiesWhereUniqueInput
    /**
     * In case the quantities found by the `where` argument doesn't exist, create a new quantities with this data.
     * 
    **/
    create: XOR<quantitiesCreateInput, quantitiesUncheckedCreateInput>
    /**
     * In case the quantities was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<quantitiesUpdateInput, quantitiesUncheckedUpdateInput>
  }


  /**
   * quantities delete
   */
  export type quantitiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
    /**
     * Filter which quantities to delete.
     * 
    **/
    where: quantitiesWhereUniqueInput
  }


  /**
   * quantities deleteMany
   */
  export type quantitiesDeleteManyArgs = {
    /**
     * Filter which quantities to delete
     * 
    **/
    where?: quantitiesWhereInput
  }


  /**
   * quantities: findUniqueOrThrow
   */
  export type quantitiesFindUniqueOrThrowArgs = quantitiesFindUniqueArgsBase
      

  /**
   * quantities: findFirstOrThrow
   */
  export type quantitiesFindFirstOrThrowArgs = quantitiesFindFirstArgsBase
      

  /**
   * quantities without action
   */
  export type quantitiesArgs = {
    /**
     * Select specific fields to fetch from the quantities
     * 
    **/
    select?: quantitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: quantitiesInclude | null
  }



  /**
   * Model recipes
   */


  export type AggregateRecipes = {
    _count: RecipesCountAggregateOutputType | null
    _avg: RecipesAvgAggregateOutputType | null
    _sum: RecipesSumAggregateOutputType | null
    _min: RecipesMinAggregateOutputType | null
    _max: RecipesMaxAggregateOutputType | null
  }

  export type RecipesAvgAggregateOutputType = {
    id: number | null
  }

  export type RecipesSumAggregateOutputType = {
    id: number | null
  }

  export type RecipesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_by: string | null
    history: string | null
  }

  export type RecipesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_by: string | null
    history: string | null
  }

  export type RecipesCountAggregateOutputType = {
    id: number
    name: number
    created_by: number
    history: number
    _all: number
  }


  export type RecipesAvgAggregateInputType = {
    id?: true
  }

  export type RecipesSumAggregateInputType = {
    id?: true
  }

  export type RecipesMinAggregateInputType = {
    id?: true
    name?: true
    created_by?: true
    history?: true
  }

  export type RecipesMaxAggregateInputType = {
    id?: true
    name?: true
    created_by?: true
    history?: true
  }

  export type RecipesCountAggregateInputType = {
    id?: true
    name?: true
    created_by?: true
    history?: true
    _all?: true
  }

  export type RecipesAggregateArgs = {
    /**
     * Filter which recipes to aggregate.
     * 
    **/
    where?: recipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<recipesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: recipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recipes
    **/
    _count?: true | RecipesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipesMaxAggregateInputType
  }

  export type GetRecipesAggregateType<T extends RecipesAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipes[P]>
      : GetScalarType<T[P], AggregateRecipes[P]>
  }




  export type RecipesGroupByArgs = {
    where?: recipesWhereInput
    orderBy?: Enumerable<recipesOrderByWithAggregationInput>
    by: Array<RecipesScalarFieldEnum>
    having?: recipesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipesCountAggregateInputType | true
    _avg?: RecipesAvgAggregateInputType
    _sum?: RecipesSumAggregateInputType
    _min?: RecipesMinAggregateInputType
    _max?: RecipesMaxAggregateInputType
  }


  export type RecipesGroupByOutputType = {
    id: number
    name: string
    created_by: string
    history: string | null
    _count: RecipesCountAggregateOutputType | null
    _avg: RecipesAvgAggregateOutputType | null
    _sum: RecipesSumAggregateOutputType | null
    _min: RecipesMinAggregateOutputType | null
    _max: RecipesMaxAggregateOutputType | null
  }

  type GetRecipesGroupByPayload<T extends RecipesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RecipesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipesGroupByOutputType[P]>
            : GetScalarType<T[P], RecipesGroupByOutputType[P]>
        }
      >
    >


  export type recipesSelect = {
    id?: boolean
    name?: boolean
    created_by?: boolean
    history?: boolean
    specs?: boolean | specsFindManyArgs
    _count?: boolean | RecipesCountOutputTypeArgs
  }

  export type recipesInclude = {
    specs?: boolean | specsFindManyArgs
    _count?: boolean | RecipesCountOutputTypeArgs
  }

  export type recipesGetPayload<
    S extends boolean | null | undefined | recipesArgs,
    U = keyof S
      > = S extends true
        ? recipes
    : S extends undefined
    ? never
    : S extends recipesArgs | recipesFindManyArgs
    ?'include' extends U
    ? recipes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specs' ? Array < specsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RecipesCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specs' ? Array < specsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RecipesCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof recipes ? recipes[P] : never
  } 
    : recipes
  : recipes


  type recipesCountArgs = Merge<
    Omit<recipesFindManyArgs, 'select' | 'include'> & {
      select?: RecipesCountAggregateInputType | true
    }
  >

  export interface recipesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Recipes that matches the filter.
     * @param {recipesFindUniqueArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recipesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, recipesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'recipes'> extends True ? CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>> : CheckSelect<T, Prisma__recipesClient<recipes | null >, Prisma__recipesClient<recipesGetPayload<T> | null >>

    /**
     * Find the first Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipesFindFirstArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recipesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, recipesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'recipes'> extends True ? CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>> : CheckSelect<T, Prisma__recipesClient<recipes | null >, Prisma__recipesClient<recipesGetPayload<T> | null >>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipes.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipesWithIdOnly = await prisma.recipes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends recipesFindManyArgs>(
      args?: SelectSubset<T, recipesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<recipes>>, PrismaPromise<Array<recipesGetPayload<T>>>>

    /**
     * Create a Recipes.
     * @param {recipesCreateArgs} args - Arguments to create a Recipes.
     * @example
     * // Create one Recipes
     * const Recipes = await prisma.recipes.create({
     *   data: {
     *     // ... data to create a Recipes
     *   }
     * })
     * 
    **/
    create<T extends recipesCreateArgs>(
      args: SelectSubset<T, recipesCreateArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Create many Recipes.
     *     @param {recipesCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipes = await prisma.recipes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recipesCreateManyArgs>(
      args?: SelectSubset<T, recipesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Recipes.
     * @param {recipesDeleteArgs} args - Arguments to delete one Recipes.
     * @example
     * // Delete one Recipes
     * const Recipes = await prisma.recipes.delete({
     *   where: {
     *     // ... filter to delete one Recipes
     *   }
     * })
     * 
    **/
    delete<T extends recipesDeleteArgs>(
      args: SelectSubset<T, recipesDeleteArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Update one Recipes.
     * @param {recipesUpdateArgs} args - Arguments to update one Recipes.
     * @example
     * // Update one Recipes
     * const recipes = await prisma.recipes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recipesUpdateArgs>(
      args: SelectSubset<T, recipesUpdateArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Delete zero or more Recipes.
     * @param {recipesDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recipesDeleteManyArgs>(
      args?: SelectSubset<T, recipesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipes = await prisma.recipes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recipesUpdateManyArgs>(
      args: SelectSubset<T, recipesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipes.
     * @param {recipesUpsertArgs} args - Arguments to update or create a Recipes.
     * @example
     * // Update or create a Recipes
     * const recipes = await prisma.recipes.upsert({
     *   create: {
     *     // ... data to create a Recipes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipes we want to update
     *   }
     * })
    **/
    upsert<T extends recipesUpsertArgs>(
      args: SelectSubset<T, recipesUpsertArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Find one Recipes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {recipesFindUniqueOrThrowArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends recipesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, recipesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Find the first Recipes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipesFindFirstOrThrowArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends recipesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, recipesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__recipesClient<recipes>, Prisma__recipesClient<recipesGetPayload<T>>>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recipesCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipes.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends recipesCountArgs>(
      args?: Subset<T, recipesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipesAggregateArgs>(args: Subset<T, RecipesAggregateArgs>): PrismaPromise<GetRecipesAggregateType<T>>

    /**
     * Group by Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipesGroupByArgs['orderBy'] }
        : { orderBy?: RecipesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for recipes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__recipesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specs<T extends specsFindManyArgs = {}>(args?: Subset<T, specsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<specs>>, PrismaPromise<Array<specsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * recipes base type for findUnique actions
   */
  export type recipesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * Filter, which recipes to fetch.
     * 
    **/
    where: recipesWhereUniqueInput
  }

  /**
   * recipes: findUnique
   */
  export interface recipesFindUniqueArgs extends recipesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * recipes base type for findFirst actions
   */
  export type recipesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * Filter, which recipes to fetch.
     * 
    **/
    where?: recipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<recipesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recipes.
     * 
    **/
    cursor?: recipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recipes.
     * 
    **/
    distinct?: Enumerable<RecipesScalarFieldEnum>
  }

  /**
   * recipes: findFirst
   */
  export interface recipesFindFirstArgs extends recipesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * recipes findMany
   */
  export type recipesFindManyArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * Filter, which recipes to fetch.
     * 
    **/
    where?: recipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recipes to fetch.
     * 
    **/
    orderBy?: Enumerable<recipesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recipes.
     * 
    **/
    cursor?: recipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recipes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recipes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecipesScalarFieldEnum>
  }


  /**
   * recipes create
   */
  export type recipesCreateArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * The data needed to create a recipes.
     * 
    **/
    data: XOR<recipesCreateInput, recipesUncheckedCreateInput>
  }


  /**
   * recipes createMany
   */
  export type recipesCreateManyArgs = {
    /**
     * The data used to create many recipes.
     * 
    **/
    data: Enumerable<recipesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * recipes update
   */
  export type recipesUpdateArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * The data needed to update a recipes.
     * 
    **/
    data: XOR<recipesUpdateInput, recipesUncheckedUpdateInput>
    /**
     * Choose, which recipes to update.
     * 
    **/
    where: recipesWhereUniqueInput
  }


  /**
   * recipes updateMany
   */
  export type recipesUpdateManyArgs = {
    /**
     * The data used to update recipes.
     * 
    **/
    data: XOR<recipesUpdateManyMutationInput, recipesUncheckedUpdateManyInput>
    /**
     * Filter which recipes to update
     * 
    **/
    where?: recipesWhereInput
  }


  /**
   * recipes upsert
   */
  export type recipesUpsertArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * The filter to search for the recipes to update in case it exists.
     * 
    **/
    where: recipesWhereUniqueInput
    /**
     * In case the recipes found by the `where` argument doesn't exist, create a new recipes with this data.
     * 
    **/
    create: XOR<recipesCreateInput, recipesUncheckedCreateInput>
    /**
     * In case the recipes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<recipesUpdateInput, recipesUncheckedUpdateInput>
  }


  /**
   * recipes delete
   */
  export type recipesDeleteArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
    /**
     * Filter which recipes to delete.
     * 
    **/
    where: recipesWhereUniqueInput
  }


  /**
   * recipes deleteMany
   */
  export type recipesDeleteManyArgs = {
    /**
     * Filter which recipes to delete
     * 
    **/
    where?: recipesWhereInput
  }


  /**
   * recipes: findUniqueOrThrow
   */
  export type recipesFindUniqueOrThrowArgs = recipesFindUniqueArgsBase
      

  /**
   * recipes: findFirstOrThrow
   */
  export type recipesFindFirstOrThrowArgs = recipesFindFirstArgsBase
      

  /**
   * recipes without action
   */
  export type recipesArgs = {
    /**
     * Select specific fields to fetch from the recipes
     * 
    **/
    select?: recipesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: recipesInclude | null
  }



  /**
   * Model specs
   */


  export type AggregateSpecs = {
    _count: SpecsCountAggregateOutputType | null
    _avg: SpecsAvgAggregateOutputType | null
    _sum: SpecsSumAggregateOutputType | null
    _min: SpecsMinAggregateOutputType | null
    _max: SpecsMaxAggregateOutputType | null
  }

  export type SpecsAvgAggregateOutputType = {
    id: number | null
    recipe_id: number | null
  }

  export type SpecsSumAggregateOutputType = {
    id: number | null
    recipe_id: number | null
  }

  export type SpecsMinAggregateOutputType = {
    id: number | null
    recipe_id: number | null
    created_by: string | null
    instructions: string | null
    glassware: string | null
    ice: string | null
  }

  export type SpecsMaxAggregateOutputType = {
    id: number | null
    recipe_id: number | null
    created_by: string | null
    instructions: string | null
    glassware: string | null
    ice: string | null
  }

  export type SpecsCountAggregateOutputType = {
    id: number
    recipe_id: number
    created_by: number
    instructions: number
    glassware: number
    ice: number
    _all: number
  }


  export type SpecsAvgAggregateInputType = {
    id?: true
    recipe_id?: true
  }

  export type SpecsSumAggregateInputType = {
    id?: true
    recipe_id?: true
  }

  export type SpecsMinAggregateInputType = {
    id?: true
    recipe_id?: true
    created_by?: true
    instructions?: true
    glassware?: true
    ice?: true
  }

  export type SpecsMaxAggregateInputType = {
    id?: true
    recipe_id?: true
    created_by?: true
    instructions?: true
    glassware?: true
    ice?: true
  }

  export type SpecsCountAggregateInputType = {
    id?: true
    recipe_id?: true
    created_by?: true
    instructions?: true
    glassware?: true
    ice?: true
    _all?: true
  }

  export type SpecsAggregateArgs = {
    /**
     * Filter which specs to aggregate.
     * 
    **/
    where?: specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specs to fetch.
     * 
    **/
    orderBy?: Enumerable<specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned specs
    **/
    _count?: true | SpecsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecsMaxAggregateInputType
  }

  export type GetSpecsAggregateType<T extends SpecsAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecs[P]>
      : GetScalarType<T[P], AggregateSpecs[P]>
  }




  export type SpecsGroupByArgs = {
    where?: specsWhereInput
    orderBy?: Enumerable<specsOrderByWithAggregationInput>
    by: Array<SpecsScalarFieldEnum>
    having?: specsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecsCountAggregateInputType | true
    _avg?: SpecsAvgAggregateInputType
    _sum?: SpecsSumAggregateInputType
    _min?: SpecsMinAggregateInputType
    _max?: SpecsMaxAggregateInputType
  }


  export type SpecsGroupByOutputType = {
    id: number
    recipe_id: number | null
    created_by: string
    instructions: string | null
    glassware: string | null
    ice: string | null
    _count: SpecsCountAggregateOutputType | null
    _avg: SpecsAvgAggregateOutputType | null
    _sum: SpecsSumAggregateOutputType | null
    _min: SpecsMinAggregateOutputType | null
    _max: SpecsMaxAggregateOutputType | null
  }

  type GetSpecsGroupByPayload<T extends SpecsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecsGroupByOutputType[P]>
            : GetScalarType<T[P], SpecsGroupByOutputType[P]>
        }
      >
    >


  export type specsSelect = {
    id?: boolean
    recipe_id?: boolean
    created_by?: boolean
    instructions?: boolean
    glassware?: boolean
    ice?: boolean
    recipes?: boolean | recipesArgs
    groups_specs?: boolean | groups_specsFindManyArgs
    quantities?: boolean | quantitiesFindManyArgs
    users_specs?: boolean | users_specsFindManyArgs
    _count?: boolean | SpecsCountOutputTypeArgs
  }

  export type specsInclude = {
    recipes?: boolean | recipesArgs
    groups_specs?: boolean | groups_specsFindManyArgs
    quantities?: boolean | quantitiesFindManyArgs
    users_specs?: boolean | users_specsFindManyArgs
    _count?: boolean | SpecsCountOutputTypeArgs
  }

  export type specsGetPayload<
    S extends boolean | null | undefined | specsArgs,
    U = keyof S
      > = S extends true
        ? specs
    : S extends undefined
    ? never
    : S extends specsArgs | specsFindManyArgs
    ?'include' extends U
    ? specs  & {
    [P in TrueKeys<S['include']>]:
        P extends 'recipes' ? recipesGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'groups_specs' ? Array < groups_specsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'quantities' ? Array < quantitiesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'users_specs' ? Array < users_specsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? SpecsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'recipes' ? recipesGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'groups_specs' ? Array < groups_specsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'quantities' ? Array < quantitiesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'users_specs' ? Array < users_specsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? SpecsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof specs ? specs[P] : never
  } 
    : specs
  : specs


  type specsCountArgs = Merge<
    Omit<specsFindManyArgs, 'select' | 'include'> & {
      select?: SpecsCountAggregateInputType | true
    }
  >

  export interface specsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Specs that matches the filter.
     * @param {specsFindUniqueArgs} args - Arguments to find a Specs
     * @example
     * // Get one Specs
     * const specs = await prisma.specs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends specsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, specsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'specs'> extends True ? CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>> : CheckSelect<T, Prisma__specsClient<specs | null >, Prisma__specsClient<specsGetPayload<T> | null >>

    /**
     * Find the first Specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specsFindFirstArgs} args - Arguments to find a Specs
     * @example
     * // Get one Specs
     * const specs = await prisma.specs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends specsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, specsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'specs'> extends True ? CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>> : CheckSelect<T, Prisma__specsClient<specs | null >, Prisma__specsClient<specsGetPayload<T> | null >>

    /**
     * Find zero or more Specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specs
     * const specs = await prisma.specs.findMany()
     * 
     * // Get first 10 Specs
     * const specs = await prisma.specs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specsWithIdOnly = await prisma.specs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends specsFindManyArgs>(
      args?: SelectSubset<T, specsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<specs>>, PrismaPromise<Array<specsGetPayload<T>>>>

    /**
     * Create a Specs.
     * @param {specsCreateArgs} args - Arguments to create a Specs.
     * @example
     * // Create one Specs
     * const Specs = await prisma.specs.create({
     *   data: {
     *     // ... data to create a Specs
     *   }
     * })
     * 
    **/
    create<T extends specsCreateArgs>(
      args: SelectSubset<T, specsCreateArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Create many Specs.
     *     @param {specsCreateManyArgs} args - Arguments to create many Specs.
     *     @example
     *     // Create many Specs
     *     const specs = await prisma.specs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends specsCreateManyArgs>(
      args?: SelectSubset<T, specsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Specs.
     * @param {specsDeleteArgs} args - Arguments to delete one Specs.
     * @example
     * // Delete one Specs
     * const Specs = await prisma.specs.delete({
     *   where: {
     *     // ... filter to delete one Specs
     *   }
     * })
     * 
    **/
    delete<T extends specsDeleteArgs>(
      args: SelectSubset<T, specsDeleteArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Update one Specs.
     * @param {specsUpdateArgs} args - Arguments to update one Specs.
     * @example
     * // Update one Specs
     * const specs = await prisma.specs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends specsUpdateArgs>(
      args: SelectSubset<T, specsUpdateArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Delete zero or more Specs.
     * @param {specsDeleteManyArgs} args - Arguments to filter Specs to delete.
     * @example
     * // Delete a few Specs
     * const { count } = await prisma.specs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends specsDeleteManyArgs>(
      args?: SelectSubset<T, specsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specs
     * const specs = await prisma.specs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends specsUpdateManyArgs>(
      args: SelectSubset<T, specsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Specs.
     * @param {specsUpsertArgs} args - Arguments to update or create a Specs.
     * @example
     * // Update or create a Specs
     * const specs = await prisma.specs.upsert({
     *   create: {
     *     // ... data to create a Specs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specs we want to update
     *   }
     * })
    **/
    upsert<T extends specsUpsertArgs>(
      args: SelectSubset<T, specsUpsertArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Find one Specs that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {specsFindUniqueOrThrowArgs} args - Arguments to find a Specs
     * @example
     * // Get one Specs
     * const specs = await prisma.specs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends specsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, specsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Find the first Specs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specsFindFirstOrThrowArgs} args - Arguments to find a Specs
     * @example
     * // Get one Specs
     * const specs = await prisma.specs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends specsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, specsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__specsClient<specs>, Prisma__specsClient<specsGetPayload<T>>>

    /**
     * Count the number of Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {specsCountArgs} args - Arguments to filter Specs to count.
     * @example
     * // Count the number of Specs
     * const count = await prisma.specs.count({
     *   where: {
     *     // ... the filter for the Specs we want to count
     *   }
     * })
    **/
    count<T extends specsCountArgs>(
      args?: Subset<T, specsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecsAggregateArgs>(args: Subset<T, SpecsAggregateArgs>): PrismaPromise<GetSpecsAggregateType<T>>

    /**
     * Group by Specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecsGroupByArgs['orderBy'] }
        : { orderBy?: SpecsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for specs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__specsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    recipes<T extends recipesArgs = {}>(args?: Subset<T, recipesArgs>): CheckSelect<T, Prisma__recipesClient<recipes | null >, Prisma__recipesClient<recipesGetPayload<T> | null >>;

    groups_specs<T extends groups_specsFindManyArgs = {}>(args?: Subset<T, groups_specsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_specs>>, PrismaPromise<Array<groups_specsGetPayload<T>>>>;

    quantities<T extends quantitiesFindManyArgs = {}>(args?: Subset<T, quantitiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<quantities>>, PrismaPromise<Array<quantitiesGetPayload<T>>>>;

    users_specs<T extends users_specsFindManyArgs = {}>(args?: Subset<T, users_specsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users_specs>>, PrismaPromise<Array<users_specsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * specs base type for findUnique actions
   */
  export type specsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * Filter, which specs to fetch.
     * 
    **/
    where: specsWhereUniqueInput
  }

  /**
   * specs: findUnique
   */
  export interface specsFindUniqueArgs extends specsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * specs base type for findFirst actions
   */
  export type specsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * Filter, which specs to fetch.
     * 
    **/
    where?: specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specs to fetch.
     * 
    **/
    orderBy?: Enumerable<specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for specs.
     * 
    **/
    cursor?: specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of specs.
     * 
    **/
    distinct?: Enumerable<SpecsScalarFieldEnum>
  }

  /**
   * specs: findFirst
   */
  export interface specsFindFirstArgs extends specsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * specs findMany
   */
  export type specsFindManyArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * Filter, which specs to fetch.
     * 
    **/
    where?: specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of specs to fetch.
     * 
    **/
    orderBy?: Enumerable<specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing specs.
     * 
    **/
    cursor?: specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` specs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecsScalarFieldEnum>
  }


  /**
   * specs create
   */
  export type specsCreateArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * The data needed to create a specs.
     * 
    **/
    data: XOR<specsCreateInput, specsUncheckedCreateInput>
  }


  /**
   * specs createMany
   */
  export type specsCreateManyArgs = {
    /**
     * The data used to create many specs.
     * 
    **/
    data: Enumerable<specsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * specs update
   */
  export type specsUpdateArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * The data needed to update a specs.
     * 
    **/
    data: XOR<specsUpdateInput, specsUncheckedUpdateInput>
    /**
     * Choose, which specs to update.
     * 
    **/
    where: specsWhereUniqueInput
  }


  /**
   * specs updateMany
   */
  export type specsUpdateManyArgs = {
    /**
     * The data used to update specs.
     * 
    **/
    data: XOR<specsUpdateManyMutationInput, specsUncheckedUpdateManyInput>
    /**
     * Filter which specs to update
     * 
    **/
    where?: specsWhereInput
  }


  /**
   * specs upsert
   */
  export type specsUpsertArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * The filter to search for the specs to update in case it exists.
     * 
    **/
    where: specsWhereUniqueInput
    /**
     * In case the specs found by the `where` argument doesn't exist, create a new specs with this data.
     * 
    **/
    create: XOR<specsCreateInput, specsUncheckedCreateInput>
    /**
     * In case the specs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<specsUpdateInput, specsUncheckedUpdateInput>
  }


  /**
   * specs delete
   */
  export type specsDeleteArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
    /**
     * Filter which specs to delete.
     * 
    **/
    where: specsWhereUniqueInput
  }


  /**
   * specs deleteMany
   */
  export type specsDeleteManyArgs = {
    /**
     * Filter which specs to delete
     * 
    **/
    where?: specsWhereInput
  }


  /**
   * specs: findUniqueOrThrow
   */
  export type specsFindUniqueOrThrowArgs = specsFindUniqueArgsBase
      

  /**
   * specs: findFirstOrThrow
   */
  export type specsFindFirstOrThrowArgs = specsFindFirstArgsBase
      

  /**
   * specs without action
   */
  export type specsArgs = {
    /**
     * Select specific fields to fetch from the specs
     * 
    **/
    select?: specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: specsInclude | null
  }



  /**
   * Model user_data
   */


  export type AggregateUser_data = {
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  export type User_dataAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_dataSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type User_dataMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
  }

  export type User_dataMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
  }

  export type User_dataCountAggregateOutputType = {
    id: number
    user_id: number
    user_bio: number
    work_place: number
    profile_picture: number
    _all: number
  }


  export type User_dataAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_dataSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type User_dataMinAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
  }

  export type User_dataMaxAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
  }

  export type User_dataCountAggregateInputType = {
    id?: true
    user_id?: true
    user_bio?: true
    work_place?: true
    profile_picture?: true
    _all?: true
  }

  export type User_dataAggregateArgs = {
    /**
     * Filter which user_data to aggregate.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_data
    **/
    _count?: true | User_dataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_dataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_dataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_dataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_dataMaxAggregateInputType
  }

  export type GetUser_dataAggregateType<T extends User_dataAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_data]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_data[P]>
      : GetScalarType<T[P], AggregateUser_data[P]>
  }




  export type User_dataGroupByArgs = {
    where?: user_dataWhereInput
    orderBy?: Enumerable<user_dataOrderByWithAggregationInput>
    by: Array<User_dataScalarFieldEnum>
    having?: user_dataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_dataCountAggregateInputType | true
    _avg?: User_dataAvgAggregateInputType
    _sum?: User_dataSumAggregateInputType
    _min?: User_dataMinAggregateInputType
    _max?: User_dataMaxAggregateInputType
  }


  export type User_dataGroupByOutputType = {
    id: number
    user_id: number | null
    user_bio: string | null
    work_place: string | null
    profile_picture: string | null
    _count: User_dataCountAggregateOutputType | null
    _avg: User_dataAvgAggregateOutputType | null
    _sum: User_dataSumAggregateOutputType | null
    _min: User_dataMinAggregateOutputType | null
    _max: User_dataMaxAggregateOutputType | null
  }

  type GetUser_dataGroupByPayload<T extends User_dataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_dataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_dataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_dataGroupByOutputType[P]>
            : GetScalarType<T[P], User_dataGroupByOutputType[P]>
        }
      >
    >


  export type user_dataSelect = {
    id?: boolean
    user_id?: boolean
    user_bio?: boolean
    work_place?: boolean
    profile_picture?: boolean
    users?: boolean | usersArgs
  }

  export type user_dataInclude = {
    users?: boolean | usersArgs
  }

  export type user_dataGetPayload<
    S extends boolean | null | undefined | user_dataArgs,
    U = keyof S
      > = S extends true
        ? user_data
    : S extends undefined
    ? never
    : S extends user_dataArgs | user_dataFindManyArgs
    ?'include' extends U
    ? user_data  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof user_data ? user_data[P] : never
  } 
    : user_data
  : user_data


  type user_dataCountArgs = Merge<
    Omit<user_dataFindManyArgs, 'select' | 'include'> & {
      select?: User_dataCountAggregateInputType | true
    }
  >

  export interface user_dataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User_data that matches the filter.
     * @param {user_dataFindUniqueArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_dataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_dataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_data'> extends True ? CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>> : CheckSelect<T, Prisma__user_dataClient<user_data | null >, Prisma__user_dataClient<user_dataGetPayload<T> | null >>

    /**
     * Find the first User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_dataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_dataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_data'> extends True ? CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>> : CheckSelect<T, Prisma__user_dataClient<user_data | null >, Prisma__user_dataClient<user_dataGetPayload<T> | null >>

    /**
     * Find zero or more User_data that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_data
     * const user_data = await prisma.user_data.findMany()
     * 
     * // Get first 10 User_data
     * const user_data = await prisma.user_data.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_dataWithIdOnly = await prisma.user_data.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_dataFindManyArgs>(
      args?: SelectSubset<T, user_dataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_data>>, PrismaPromise<Array<user_dataGetPayload<T>>>>

    /**
     * Create a User_data.
     * @param {user_dataCreateArgs} args - Arguments to create a User_data.
     * @example
     * // Create one User_data
     * const User_data = await prisma.user_data.create({
     *   data: {
     *     // ... data to create a User_data
     *   }
     * })
     * 
    **/
    create<T extends user_dataCreateArgs>(
      args: SelectSubset<T, user_dataCreateArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Create many User_data.
     *     @param {user_dataCreateManyArgs} args - Arguments to create many User_data.
     *     @example
     *     // Create many User_data
     *     const user_data = await prisma.user_data.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_dataCreateManyArgs>(
      args?: SelectSubset<T, user_dataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_data.
     * @param {user_dataDeleteArgs} args - Arguments to delete one User_data.
     * @example
     * // Delete one User_data
     * const User_data = await prisma.user_data.delete({
     *   where: {
     *     // ... filter to delete one User_data
     *   }
     * })
     * 
    **/
    delete<T extends user_dataDeleteArgs>(
      args: SelectSubset<T, user_dataDeleteArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Update one User_data.
     * @param {user_dataUpdateArgs} args - Arguments to update one User_data.
     * @example
     * // Update one User_data
     * const user_data = await prisma.user_data.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_dataUpdateArgs>(
      args: SelectSubset<T, user_dataUpdateArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Delete zero or more User_data.
     * @param {user_dataDeleteManyArgs} args - Arguments to filter User_data to delete.
     * @example
     * // Delete a few User_data
     * const { count } = await prisma.user_data.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_dataDeleteManyArgs>(
      args?: SelectSubset<T, user_dataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_data
     * const user_data = await prisma.user_data.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_dataUpdateManyArgs>(
      args: SelectSubset<T, user_dataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_data.
     * @param {user_dataUpsertArgs} args - Arguments to update or create a User_data.
     * @example
     * // Update or create a User_data
     * const user_data = await prisma.user_data.upsert({
     *   create: {
     *     // ... data to create a User_data
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_data we want to update
     *   }
     * })
    **/
    upsert<T extends user_dataUpsertArgs>(
      args: SelectSubset<T, user_dataUpsertArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Find one User_data that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_dataFindUniqueOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_dataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Find the first User_data that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataFindFirstOrThrowArgs} args - Arguments to find a User_data
     * @example
     * // Get one User_data
     * const user_data = await prisma.user_data.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_dataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_dataFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_dataClient<user_data>, Prisma__user_dataClient<user_dataGetPayload<T>>>

    /**
     * Count the number of User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_dataCountArgs} args - Arguments to filter User_data to count.
     * @example
     * // Count the number of User_data
     * const count = await prisma.user_data.count({
     *   where: {
     *     // ... the filter for the User_data we want to count
     *   }
     * })
    **/
    count<T extends user_dataCountArgs>(
      args?: Subset<T, user_dataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_dataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_dataAggregateArgs>(args: Subset<T, User_dataAggregateArgs>): PrismaPromise<GetUser_dataAggregateType<T>>

    /**
     * Group by User_data.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_dataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_dataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_dataGroupByArgs['orderBy'] }
        : { orderBy?: User_dataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_dataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_dataGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_data.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_dataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_data base type for findUnique actions
   */
  export type user_dataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where: user_dataWhereUniqueInput
  }

  /**
   * user_data: findUnique
   */
  export interface user_dataFindUniqueArgs extends user_dataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data base type for findFirst actions
   */
  export type user_dataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_data.
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_data.
     * 
    **/
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }

  /**
   * user_data: findFirst
   */
  export interface user_dataFindFirstArgs extends user_dataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_data findMany
   */
  export type user_dataFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter, which user_data to fetch.
     * 
    **/
    where?: user_dataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_data to fetch.
     * 
    **/
    orderBy?: Enumerable<user_dataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_data.
     * 
    **/
    cursor?: user_dataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_data from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_data.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_dataScalarFieldEnum>
  }


  /**
   * user_data create
   */
  export type user_dataCreateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The data needed to create a user_data.
     * 
    **/
    data: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
  }


  /**
   * user_data createMany
   */
  export type user_dataCreateManyArgs = {
    /**
     * The data used to create many user_data.
     * 
    **/
    data: Enumerable<user_dataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_data update
   */
  export type user_dataUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The data needed to update a user_data.
     * 
    **/
    data: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
    /**
     * Choose, which user_data to update.
     * 
    **/
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data updateMany
   */
  export type user_dataUpdateManyArgs = {
    /**
     * The data used to update user_data.
     * 
    **/
    data: XOR<user_dataUpdateManyMutationInput, user_dataUncheckedUpdateManyInput>
    /**
     * Filter which user_data to update
     * 
    **/
    where?: user_dataWhereInput
  }


  /**
   * user_data upsert
   */
  export type user_dataUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * The filter to search for the user_data to update in case it exists.
     * 
    **/
    where: user_dataWhereUniqueInput
    /**
     * In case the user_data found by the `where` argument doesn't exist, create a new user_data with this data.
     * 
    **/
    create: XOR<user_dataCreateInput, user_dataUncheckedCreateInput>
    /**
     * In case the user_data was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_dataUpdateInput, user_dataUncheckedUpdateInput>
  }


  /**
   * user_data delete
   */
  export type user_dataDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
    /**
     * Filter which user_data to delete.
     * 
    **/
    where: user_dataWhereUniqueInput
  }


  /**
   * user_data deleteMany
   */
  export type user_dataDeleteManyArgs = {
    /**
     * Filter which user_data to delete
     * 
    **/
    where?: user_dataWhereInput
  }


  /**
   * user_data: findUniqueOrThrow
   */
  export type user_dataFindUniqueOrThrowArgs = user_dataFindUniqueArgsBase
      

  /**
   * user_data: findFirstOrThrow
   */
  export type user_dataFindFirstOrThrowArgs = user_dataFindFirstArgsBase
      

  /**
   * user_data without action
   */
  export type user_dataArgs = {
    /**
     * Select specific fields to fetch from the user_data
     * 
    **/
    select?: user_dataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_dataInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    user_name: string | null
    first_name: string | null
    last_name: string | null
    date_joined: Date | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    user_name: number
    first_name: number
    last_name: number
    date_joined: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    user_name?: true
    first_name?: true
    last_name?: true
    date_joined?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    user_name: string
    first_name: string | null
    last_name: string | null
    date_joined: Date
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    user_name?: boolean
    first_name?: boolean
    last_name?: boolean
    date_joined?: boolean
    email?: boolean
    password?: boolean
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    user_data?: boolean | user_dataFindManyArgs
    users_ingredients?: boolean | users_ingredientsFindManyArgs
    users_specs?: boolean | users_specsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    groups_mods?: boolean | groups_modsFindManyArgs
    groups_users?: boolean | groups_usersFindManyArgs
    user_data?: boolean | user_dataFindManyArgs
    users_ingredients?: boolean | users_ingredientsFindManyArgs
    users_specs?: boolean | users_specsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_data' ? Array < user_dataGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'users_ingredients' ? Array < users_ingredientsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'users_specs' ? Array < users_specsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'groups_mods' ? Array < groups_modsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'groups_users' ? Array < groups_usersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_data' ? Array < user_dataGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'users_ingredients' ? Array < users_ingredientsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'users_specs' ? Array < users_specsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    groups_mods<T extends groups_modsFindManyArgs = {}>(args?: Subset<T, groups_modsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_mods>>, PrismaPromise<Array<groups_modsGetPayload<T>>>>;

    groups_users<T extends groups_usersFindManyArgs = {}>(args?: Subset<T, groups_usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<groups_users>>, PrismaPromise<Array<groups_usersGetPayload<T>>>>;

    user_data<T extends user_dataFindManyArgs = {}>(args?: Subset<T, user_dataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_data>>, PrismaPromise<Array<user_dataGetPayload<T>>>>;

    users_ingredients<T extends users_ingredientsFindManyArgs = {}>(args?: Subset<T, users_ingredientsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users_ingredients>>, PrismaPromise<Array<users_ingredientsGetPayload<T>>>>;

    users_specs<T extends users_specsFindManyArgs = {}>(args?: Subset<T, users_specsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users_specs>>, PrismaPromise<Array<users_specsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model users_ingredients
   */


  export type AggregateUsers_ingredients = {
    _count: Users_ingredientsCountAggregateOutputType | null
    _avg: Users_ingredientsAvgAggregateOutputType | null
    _sum: Users_ingredientsSumAggregateOutputType | null
    _min: Users_ingredientsMinAggregateOutputType | null
    _max: Users_ingredientsMaxAggregateOutputType | null
  }

  export type Users_ingredientsAvgAggregateOutputType = {
    user_id: number | null
    ingredient_id: number | null
  }

  export type Users_ingredientsSumAggregateOutputType = {
    user_id: number | null
    ingredient_id: number | null
  }

  export type Users_ingredientsMinAggregateOutputType = {
    user_id: number | null
    ingredient_id: number | null
  }

  export type Users_ingredientsMaxAggregateOutputType = {
    user_id: number | null
    ingredient_id: number | null
  }

  export type Users_ingredientsCountAggregateOutputType = {
    user_id: number
    ingredient_id: number
    _all: number
  }


  export type Users_ingredientsAvgAggregateInputType = {
    user_id?: true
    ingredient_id?: true
  }

  export type Users_ingredientsSumAggregateInputType = {
    user_id?: true
    ingredient_id?: true
  }

  export type Users_ingredientsMinAggregateInputType = {
    user_id?: true
    ingredient_id?: true
  }

  export type Users_ingredientsMaxAggregateInputType = {
    user_id?: true
    ingredient_id?: true
  }

  export type Users_ingredientsCountAggregateInputType = {
    user_id?: true
    ingredient_id?: true
    _all?: true
  }

  export type Users_ingredientsAggregateArgs = {
    /**
     * Filter which users_ingredients to aggregate.
     * 
    **/
    where?: users_ingredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<users_ingredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: users_ingredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_ingredients
    **/
    _count?: true | Users_ingredientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_ingredientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_ingredientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_ingredientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_ingredientsMaxAggregateInputType
  }

  export type GetUsers_ingredientsAggregateType<T extends Users_ingredientsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_ingredients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_ingredients[P]>
      : GetScalarType<T[P], AggregateUsers_ingredients[P]>
  }




  export type Users_ingredientsGroupByArgs = {
    where?: users_ingredientsWhereInput
    orderBy?: Enumerable<users_ingredientsOrderByWithAggregationInput>
    by: Array<Users_ingredientsScalarFieldEnum>
    having?: users_ingredientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_ingredientsCountAggregateInputType | true
    _avg?: Users_ingredientsAvgAggregateInputType
    _sum?: Users_ingredientsSumAggregateInputType
    _min?: Users_ingredientsMinAggregateInputType
    _max?: Users_ingredientsMaxAggregateInputType
  }


  export type Users_ingredientsGroupByOutputType = {
    user_id: number
    ingredient_id: number
    _count: Users_ingredientsCountAggregateOutputType | null
    _avg: Users_ingredientsAvgAggregateOutputType | null
    _sum: Users_ingredientsSumAggregateOutputType | null
    _min: Users_ingredientsMinAggregateOutputType | null
    _max: Users_ingredientsMaxAggregateOutputType | null
  }

  type GetUsers_ingredientsGroupByPayload<T extends Users_ingredientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Users_ingredientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_ingredientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_ingredientsGroupByOutputType[P]>
            : GetScalarType<T[P], Users_ingredientsGroupByOutputType[P]>
        }
      >
    >


  export type users_ingredientsSelect = {
    user_id?: boolean
    ingredient_id?: boolean
    ingredients?: boolean | IngredientsArgs
    users?: boolean | usersArgs
  }

  export type users_ingredientsInclude = {
    ingredients?: boolean | IngredientsArgs
    users?: boolean | usersArgs
  }

  export type users_ingredientsGetPayload<
    S extends boolean | null | undefined | users_ingredientsArgs,
    U = keyof S
      > = S extends true
        ? users_ingredients
    : S extends undefined
    ? never
    : S extends users_ingredientsArgs | users_ingredientsFindManyArgs
    ?'include' extends U
    ? users_ingredients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ingredients' ? IngredientsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users_ingredients ? users_ingredients[P] : never
  } 
    : users_ingredients
  : users_ingredients


  type users_ingredientsCountArgs = Merge<
    Omit<users_ingredientsFindManyArgs, 'select' | 'include'> & {
      select?: Users_ingredientsCountAggregateInputType | true
    }
  >

  export interface users_ingredientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users_ingredients that matches the filter.
     * @param {users_ingredientsFindUniqueArgs} args - Arguments to find a Users_ingredients
     * @example
     * // Get one Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_ingredientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, users_ingredientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users_ingredients'> extends True ? CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>> : CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients | null >, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T> | null >>

    /**
     * Find the first Users_ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_ingredientsFindFirstArgs} args - Arguments to find a Users_ingredients
     * @example
     * // Get one Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_ingredientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, users_ingredientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users_ingredients'> extends True ? CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>> : CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients | null >, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T> | null >>

    /**
     * Find zero or more Users_ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_ingredientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findMany()
     * 
     * // Get first 10 Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const users_ingredientsWithUser_idOnly = await prisma.users_ingredients.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends users_ingredientsFindManyArgs>(
      args?: SelectSubset<T, users_ingredientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users_ingredients>>, PrismaPromise<Array<users_ingredientsGetPayload<T>>>>

    /**
     * Create a Users_ingredients.
     * @param {users_ingredientsCreateArgs} args - Arguments to create a Users_ingredients.
     * @example
     * // Create one Users_ingredients
     * const Users_ingredients = await prisma.users_ingredients.create({
     *   data: {
     *     // ... data to create a Users_ingredients
     *   }
     * })
     * 
    **/
    create<T extends users_ingredientsCreateArgs>(
      args: SelectSubset<T, users_ingredientsCreateArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Create many Users_ingredients.
     *     @param {users_ingredientsCreateManyArgs} args - Arguments to create many Users_ingredients.
     *     @example
     *     // Create many Users_ingredients
     *     const users_ingredients = await prisma.users_ingredients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends users_ingredientsCreateManyArgs>(
      args?: SelectSubset<T, users_ingredientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users_ingredients.
     * @param {users_ingredientsDeleteArgs} args - Arguments to delete one Users_ingredients.
     * @example
     * // Delete one Users_ingredients
     * const Users_ingredients = await prisma.users_ingredients.delete({
     *   where: {
     *     // ... filter to delete one Users_ingredients
     *   }
     * })
     * 
    **/
    delete<T extends users_ingredientsDeleteArgs>(
      args: SelectSubset<T, users_ingredientsDeleteArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Update one Users_ingredients.
     * @param {users_ingredientsUpdateArgs} args - Arguments to update one Users_ingredients.
     * @example
     * // Update one Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_ingredientsUpdateArgs>(
      args: SelectSubset<T, users_ingredientsUpdateArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Delete zero or more Users_ingredients.
     * @param {users_ingredientsDeleteManyArgs} args - Arguments to filter Users_ingredients to delete.
     * @example
     * // Delete a few Users_ingredients
     * const { count } = await prisma.users_ingredients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_ingredientsDeleteManyArgs>(
      args?: SelectSubset<T, users_ingredientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_ingredientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_ingredientsUpdateManyArgs>(
      args: SelectSubset<T, users_ingredientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_ingredients.
     * @param {users_ingredientsUpsertArgs} args - Arguments to update or create a Users_ingredients.
     * @example
     * // Update or create a Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.upsert({
     *   create: {
     *     // ... data to create a Users_ingredients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_ingredients we want to update
     *   }
     * })
    **/
    upsert<T extends users_ingredientsUpsertArgs>(
      args: SelectSubset<T, users_ingredientsUpsertArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Find one Users_ingredients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {users_ingredientsFindUniqueOrThrowArgs} args - Arguments to find a Users_ingredients
     * @example
     * // Get one Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends users_ingredientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, users_ingredientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Find the first Users_ingredients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_ingredientsFindFirstOrThrowArgs} args - Arguments to find a Users_ingredients
     * @example
     * // Get one Users_ingredients
     * const users_ingredients = await prisma.users_ingredients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends users_ingredientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, users_ingredientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__users_ingredientsClient<users_ingredients>, Prisma__users_ingredientsClient<users_ingredientsGetPayload<T>>>

    /**
     * Count the number of Users_ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_ingredientsCountArgs} args - Arguments to filter Users_ingredients to count.
     * @example
     * // Count the number of Users_ingredients
     * const count = await prisma.users_ingredients.count({
     *   where: {
     *     // ... the filter for the Users_ingredients we want to count
     *   }
     * })
    **/
    count<T extends users_ingredientsCountArgs>(
      args?: Subset<T, users_ingredientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_ingredientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_ingredientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_ingredientsAggregateArgs>(args: Subset<T, Users_ingredientsAggregateArgs>): PrismaPromise<GetUsers_ingredientsAggregateType<T>>

    /**
     * Group by Users_ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_ingredientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Users_ingredientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Users_ingredientsGroupByArgs['orderBy'] }
        : { orderBy?: Users_ingredientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Users_ingredientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_ingredientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users_ingredients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__users_ingredientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ingredients<T extends IngredientsArgs = {}>(args?: Subset<T, IngredientsArgs>): CheckSelect<T, Prisma__IngredientsClient<Ingredients | null >, Prisma__IngredientsClient<IngredientsGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users_ingredients base type for findUnique actions
   */
  export type users_ingredientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * Filter, which users_ingredients to fetch.
     * 
    **/
    where: users_ingredientsWhereUniqueInput
  }

  /**
   * users_ingredients: findUnique
   */
  export interface users_ingredientsFindUniqueArgs extends users_ingredientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users_ingredients base type for findFirst actions
   */
  export type users_ingredientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * Filter, which users_ingredients to fetch.
     * 
    **/
    where?: users_ingredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<users_ingredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_ingredients.
     * 
    **/
    cursor?: users_ingredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_ingredients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_ingredients.
     * 
    **/
    distinct?: Enumerable<Users_ingredientsScalarFieldEnum>
  }

  /**
   * users_ingredients: findFirst
   */
  export interface users_ingredientsFindFirstArgs extends users_ingredientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users_ingredients findMany
   */
  export type users_ingredientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * Filter, which users_ingredients to fetch.
     * 
    **/
    where?: users_ingredientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_ingredients to fetch.
     * 
    **/
    orderBy?: Enumerable<users_ingredientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_ingredients.
     * 
    **/
    cursor?: users_ingredientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_ingredients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_ingredients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Users_ingredientsScalarFieldEnum>
  }


  /**
   * users_ingredients create
   */
  export type users_ingredientsCreateArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * The data needed to create a users_ingredients.
     * 
    **/
    data: XOR<users_ingredientsCreateInput, users_ingredientsUncheckedCreateInput>
  }


  /**
   * users_ingredients createMany
   */
  export type users_ingredientsCreateManyArgs = {
    /**
     * The data used to create many users_ingredients.
     * 
    **/
    data: Enumerable<users_ingredientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users_ingredients update
   */
  export type users_ingredientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * The data needed to update a users_ingredients.
     * 
    **/
    data: XOR<users_ingredientsUpdateInput, users_ingredientsUncheckedUpdateInput>
    /**
     * Choose, which users_ingredients to update.
     * 
    **/
    where: users_ingredientsWhereUniqueInput
  }


  /**
   * users_ingredients updateMany
   */
  export type users_ingredientsUpdateManyArgs = {
    /**
     * The data used to update users_ingredients.
     * 
    **/
    data: XOR<users_ingredientsUpdateManyMutationInput, users_ingredientsUncheckedUpdateManyInput>
    /**
     * Filter which users_ingredients to update
     * 
    **/
    where?: users_ingredientsWhereInput
  }


  /**
   * users_ingredients upsert
   */
  export type users_ingredientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * The filter to search for the users_ingredients to update in case it exists.
     * 
    **/
    where: users_ingredientsWhereUniqueInput
    /**
     * In case the users_ingredients found by the `where` argument doesn't exist, create a new users_ingredients with this data.
     * 
    **/
    create: XOR<users_ingredientsCreateInput, users_ingredientsUncheckedCreateInput>
    /**
     * In case the users_ingredients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<users_ingredientsUpdateInput, users_ingredientsUncheckedUpdateInput>
  }


  /**
   * users_ingredients delete
   */
  export type users_ingredientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
    /**
     * Filter which users_ingredients to delete.
     * 
    **/
    where: users_ingredientsWhereUniqueInput
  }


  /**
   * users_ingredients deleteMany
   */
  export type users_ingredientsDeleteManyArgs = {
    /**
     * Filter which users_ingredients to delete
     * 
    **/
    where?: users_ingredientsWhereInput
  }


  /**
   * users_ingredients: findUniqueOrThrow
   */
  export type users_ingredientsFindUniqueOrThrowArgs = users_ingredientsFindUniqueArgsBase
      

  /**
   * users_ingredients: findFirstOrThrow
   */
  export type users_ingredientsFindFirstOrThrowArgs = users_ingredientsFindFirstArgsBase
      

  /**
   * users_ingredients without action
   */
  export type users_ingredientsArgs = {
    /**
     * Select specific fields to fetch from the users_ingredients
     * 
    **/
    select?: users_ingredientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_ingredientsInclude | null
  }



  /**
   * Model users_specs
   */


  export type AggregateUsers_specs = {
    _count: Users_specsCountAggregateOutputType | null
    _avg: Users_specsAvgAggregateOutputType | null
    _sum: Users_specsSumAggregateOutputType | null
    _min: Users_specsMinAggregateOutputType | null
    _max: Users_specsMaxAggregateOutputType | null
  }

  export type Users_specsAvgAggregateOutputType = {
    user_id: number | null
    spec_id: number | null
  }

  export type Users_specsSumAggregateOutputType = {
    user_id: number | null
    spec_id: number | null
  }

  export type Users_specsMinAggregateOutputType = {
    user_id: number | null
    spec_id: number | null
  }

  export type Users_specsMaxAggregateOutputType = {
    user_id: number | null
    spec_id: number | null
  }

  export type Users_specsCountAggregateOutputType = {
    user_id: number
    spec_id: number
    _all: number
  }


  export type Users_specsAvgAggregateInputType = {
    user_id?: true
    spec_id?: true
  }

  export type Users_specsSumAggregateInputType = {
    user_id?: true
    spec_id?: true
  }

  export type Users_specsMinAggregateInputType = {
    user_id?: true
    spec_id?: true
  }

  export type Users_specsMaxAggregateInputType = {
    user_id?: true
    spec_id?: true
  }

  export type Users_specsCountAggregateInputType = {
    user_id?: true
    spec_id?: true
    _all?: true
  }

  export type Users_specsAggregateArgs = {
    /**
     * Filter which users_specs to aggregate.
     * 
    **/
    where?: users_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<users_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: users_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_specs
    **/
    _count?: true | Users_specsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_specsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_specsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_specsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_specsMaxAggregateInputType
  }

  export type GetUsers_specsAggregateType<T extends Users_specsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_specs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_specs[P]>
      : GetScalarType<T[P], AggregateUsers_specs[P]>
  }




  export type Users_specsGroupByArgs = {
    where?: users_specsWhereInput
    orderBy?: Enumerable<users_specsOrderByWithAggregationInput>
    by: Array<Users_specsScalarFieldEnum>
    having?: users_specsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_specsCountAggregateInputType | true
    _avg?: Users_specsAvgAggregateInputType
    _sum?: Users_specsSumAggregateInputType
    _min?: Users_specsMinAggregateInputType
    _max?: Users_specsMaxAggregateInputType
  }


  export type Users_specsGroupByOutputType = {
    user_id: number
    spec_id: number
    _count: Users_specsCountAggregateOutputType | null
    _avg: Users_specsAvgAggregateOutputType | null
    _sum: Users_specsSumAggregateOutputType | null
    _min: Users_specsMinAggregateOutputType | null
    _max: Users_specsMaxAggregateOutputType | null
  }

  type GetUsers_specsGroupByPayload<T extends Users_specsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Users_specsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_specsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_specsGroupByOutputType[P]>
            : GetScalarType<T[P], Users_specsGroupByOutputType[P]>
        }
      >
    >


  export type users_specsSelect = {
    user_id?: boolean
    spec_id?: boolean
    specs?: boolean | specsArgs
    users?: boolean | usersArgs
  }

  export type users_specsInclude = {
    specs?: boolean | specsArgs
    users?: boolean | usersArgs
  }

  export type users_specsGetPayload<
    S extends boolean | null | undefined | users_specsArgs,
    U = keyof S
      > = S extends true
        ? users_specs
    : S extends undefined
    ? never
    : S extends users_specsArgs | users_specsFindManyArgs
    ?'include' extends U
    ? users_specs  & {
    [P in TrueKeys<S['include']>]:
        P extends 'specs' ? specsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'specs' ? specsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users_specs ? users_specs[P] : never
  } 
    : users_specs
  : users_specs


  type users_specsCountArgs = Merge<
    Omit<users_specsFindManyArgs, 'select' | 'include'> & {
      select?: Users_specsCountAggregateInputType | true
    }
  >

  export interface users_specsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users_specs that matches the filter.
     * @param {users_specsFindUniqueArgs} args - Arguments to find a Users_specs
     * @example
     * // Get one Users_specs
     * const users_specs = await prisma.users_specs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_specsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, users_specsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users_specs'> extends True ? CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>> : CheckSelect<T, Prisma__users_specsClient<users_specs | null >, Prisma__users_specsClient<users_specsGetPayload<T> | null >>

    /**
     * Find the first Users_specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_specsFindFirstArgs} args - Arguments to find a Users_specs
     * @example
     * // Get one Users_specs
     * const users_specs = await prisma.users_specs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_specsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, users_specsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users_specs'> extends True ? CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>> : CheckSelect<T, Prisma__users_specsClient<users_specs | null >, Prisma__users_specsClient<users_specsGetPayload<T> | null >>

    /**
     * Find zero or more Users_specs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_specsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_specs
     * const users_specs = await prisma.users_specs.findMany()
     * 
     * // Get first 10 Users_specs
     * const users_specs = await prisma.users_specs.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const users_specsWithUser_idOnly = await prisma.users_specs.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends users_specsFindManyArgs>(
      args?: SelectSubset<T, users_specsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users_specs>>, PrismaPromise<Array<users_specsGetPayload<T>>>>

    /**
     * Create a Users_specs.
     * @param {users_specsCreateArgs} args - Arguments to create a Users_specs.
     * @example
     * // Create one Users_specs
     * const Users_specs = await prisma.users_specs.create({
     *   data: {
     *     // ... data to create a Users_specs
     *   }
     * })
     * 
    **/
    create<T extends users_specsCreateArgs>(
      args: SelectSubset<T, users_specsCreateArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Create many Users_specs.
     *     @param {users_specsCreateManyArgs} args - Arguments to create many Users_specs.
     *     @example
     *     // Create many Users_specs
     *     const users_specs = await prisma.users_specs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends users_specsCreateManyArgs>(
      args?: SelectSubset<T, users_specsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users_specs.
     * @param {users_specsDeleteArgs} args - Arguments to delete one Users_specs.
     * @example
     * // Delete one Users_specs
     * const Users_specs = await prisma.users_specs.delete({
     *   where: {
     *     // ... filter to delete one Users_specs
     *   }
     * })
     * 
    **/
    delete<T extends users_specsDeleteArgs>(
      args: SelectSubset<T, users_specsDeleteArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Update one Users_specs.
     * @param {users_specsUpdateArgs} args - Arguments to update one Users_specs.
     * @example
     * // Update one Users_specs
     * const users_specs = await prisma.users_specs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_specsUpdateArgs>(
      args: SelectSubset<T, users_specsUpdateArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Delete zero or more Users_specs.
     * @param {users_specsDeleteManyArgs} args - Arguments to filter Users_specs to delete.
     * @example
     * // Delete a few Users_specs
     * const { count } = await prisma.users_specs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_specsDeleteManyArgs>(
      args?: SelectSubset<T, users_specsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_specsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_specs
     * const users_specs = await prisma.users_specs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_specsUpdateManyArgs>(
      args: SelectSubset<T, users_specsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_specs.
     * @param {users_specsUpsertArgs} args - Arguments to update or create a Users_specs.
     * @example
     * // Update or create a Users_specs
     * const users_specs = await prisma.users_specs.upsert({
     *   create: {
     *     // ... data to create a Users_specs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_specs we want to update
     *   }
     * })
    **/
    upsert<T extends users_specsUpsertArgs>(
      args: SelectSubset<T, users_specsUpsertArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Find one Users_specs that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {users_specsFindUniqueOrThrowArgs} args - Arguments to find a Users_specs
     * @example
     * // Get one Users_specs
     * const users_specs = await prisma.users_specs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends users_specsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, users_specsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Find the first Users_specs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_specsFindFirstOrThrowArgs} args - Arguments to find a Users_specs
     * @example
     * // Get one Users_specs
     * const users_specs = await prisma.users_specs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends users_specsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, users_specsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__users_specsClient<users_specs>, Prisma__users_specsClient<users_specsGetPayload<T>>>

    /**
     * Count the number of Users_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_specsCountArgs} args - Arguments to filter Users_specs to count.
     * @example
     * // Count the number of Users_specs
     * const count = await prisma.users_specs.count({
     *   where: {
     *     // ... the filter for the Users_specs we want to count
     *   }
     * })
    **/
    count<T extends users_specsCountArgs>(
      args?: Subset<T, users_specsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_specsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_specsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_specsAggregateArgs>(args: Subset<T, Users_specsAggregateArgs>): PrismaPromise<GetUsers_specsAggregateType<T>>

    /**
     * Group by Users_specs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_specsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Users_specsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Users_specsGroupByArgs['orderBy'] }
        : { orderBy?: Users_specsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Users_specsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_specsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users_specs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__users_specsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specs<T extends specsArgs = {}>(args?: Subset<T, specsArgs>): CheckSelect<T, Prisma__specsClient<specs | null >, Prisma__specsClient<specsGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users_specs base type for findUnique actions
   */
  export type users_specsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * Filter, which users_specs to fetch.
     * 
    **/
    where: users_specsWhereUniqueInput
  }

  /**
   * users_specs: findUnique
   */
  export interface users_specsFindUniqueArgs extends users_specsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users_specs base type for findFirst actions
   */
  export type users_specsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * Filter, which users_specs to fetch.
     * 
    **/
    where?: users_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<users_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_specs.
     * 
    **/
    cursor?: users_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_specs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_specs.
     * 
    **/
    distinct?: Enumerable<Users_specsScalarFieldEnum>
  }

  /**
   * users_specs: findFirst
   */
  export interface users_specsFindFirstArgs extends users_specsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users_specs findMany
   */
  export type users_specsFindManyArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * Filter, which users_specs to fetch.
     * 
    **/
    where?: users_specsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_specs to fetch.
     * 
    **/
    orderBy?: Enumerable<users_specsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_specs.
     * 
    **/
    cursor?: users_specsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_specs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_specs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Users_specsScalarFieldEnum>
  }


  /**
   * users_specs create
   */
  export type users_specsCreateArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * The data needed to create a users_specs.
     * 
    **/
    data: XOR<users_specsCreateInput, users_specsUncheckedCreateInput>
  }


  /**
   * users_specs createMany
   */
  export type users_specsCreateManyArgs = {
    /**
     * The data used to create many users_specs.
     * 
    **/
    data: Enumerable<users_specsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users_specs update
   */
  export type users_specsUpdateArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * The data needed to update a users_specs.
     * 
    **/
    data: XOR<users_specsUpdateInput, users_specsUncheckedUpdateInput>
    /**
     * Choose, which users_specs to update.
     * 
    **/
    where: users_specsWhereUniqueInput
  }


  /**
   * users_specs updateMany
   */
  export type users_specsUpdateManyArgs = {
    /**
     * The data used to update users_specs.
     * 
    **/
    data: XOR<users_specsUpdateManyMutationInput, users_specsUncheckedUpdateManyInput>
    /**
     * Filter which users_specs to update
     * 
    **/
    where?: users_specsWhereInput
  }


  /**
   * users_specs upsert
   */
  export type users_specsUpsertArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * The filter to search for the users_specs to update in case it exists.
     * 
    **/
    where: users_specsWhereUniqueInput
    /**
     * In case the users_specs found by the `where` argument doesn't exist, create a new users_specs with this data.
     * 
    **/
    create: XOR<users_specsCreateInput, users_specsUncheckedCreateInput>
    /**
     * In case the users_specs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<users_specsUpdateInput, users_specsUncheckedUpdateInput>
  }


  /**
   * users_specs delete
   */
  export type users_specsDeleteArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
    /**
     * Filter which users_specs to delete.
     * 
    **/
    where: users_specsWhereUniqueInput
  }


  /**
   * users_specs deleteMany
   */
  export type users_specsDeleteManyArgs = {
    /**
     * Filter which users_specs to delete
     * 
    **/
    where?: users_specsWhereInput
  }


  /**
   * users_specs: findUniqueOrThrow
   */
  export type users_specsFindUniqueOrThrowArgs = users_specsFindUniqueArgsBase
      

  /**
   * users_specs: findFirstOrThrow
   */
  export type users_specsFindFirstOrThrowArgs = users_specsFindFirstArgsBase
      

  /**
   * users_specs without action
   */
  export type users_specsArgs = {
    /**
     * Select specific fields to fetch from the users_specs
     * 
    **/
    select?: users_specsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_specsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GroupsScalarFieldEnum: {
    id: 'id',
    group_name: 'group_name',
    date_created: 'date_created'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const Groups_IngredientsScalarFieldEnum: {
    group_id: 'group_id',
    ingredient_id: 'ingredient_id'
  };

  export type Groups_IngredientsScalarFieldEnum = (typeof Groups_IngredientsScalarFieldEnum)[keyof typeof Groups_IngredientsScalarFieldEnum]


  export const Groups_modsScalarFieldEnum: {
    user_id: 'user_id',
    group_id: 'group_id'
  };

  export type Groups_modsScalarFieldEnum = (typeof Groups_modsScalarFieldEnum)[keyof typeof Groups_modsScalarFieldEnum]


  export const Groups_specsScalarFieldEnum: {
    group_id: 'group_id',
    spec_id: 'spec_id'
  };

  export type Groups_specsScalarFieldEnum = (typeof Groups_specsScalarFieldEnum)[keyof typeof Groups_specsScalarFieldEnum]


  export const Groups_usersScalarFieldEnum: {
    user_id: 'user_id',
    group_id: 'group_id'
  };

  export type Groups_usersScalarFieldEnum = (typeof Groups_usersScalarFieldEnum)[keyof typeof Groups_usersScalarFieldEnum]


  export const IngredientsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    amount: 'amount',
    unit: 'unit',
    price: 'price',
    source: 'source'
  };

  export type IngredientsScalarFieldEnum = (typeof IngredientsScalarFieldEnum)[keyof typeof IngredientsScalarFieldEnum]


  export const QuantitiesScalarFieldEnum: {
    id: 'id',
    spec_id: 'spec_id',
    ingredient_id: 'ingredient_id',
    amount: 'amount',
    unit: 'unit'
  };

  export type QuantitiesScalarFieldEnum = (typeof QuantitiesScalarFieldEnum)[keyof typeof QuantitiesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RecipesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_by: 'created_by',
    history: 'history'
  };

  export type RecipesScalarFieldEnum = (typeof RecipesScalarFieldEnum)[keyof typeof RecipesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SpecsScalarFieldEnum: {
    id: 'id',
    recipe_id: 'recipe_id',
    created_by: 'created_by',
    instructions: 'instructions',
    glassware: 'glassware',
    ice: 'ice'
  };

  export type SpecsScalarFieldEnum = (typeof SpecsScalarFieldEnum)[keyof typeof SpecsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_dataScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    user_bio: 'user_bio',
    work_place: 'work_place',
    profile_picture: 'profile_picture'
  };

  export type User_dataScalarFieldEnum = (typeof User_dataScalarFieldEnum)[keyof typeof User_dataScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    user_name: 'user_name',
    first_name: 'first_name',
    last_name: 'last_name',
    date_joined: 'date_joined',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Users_ingredientsScalarFieldEnum: {
    user_id: 'user_id',
    ingredient_id: 'ingredient_id'
  };

  export type Users_ingredientsScalarFieldEnum = (typeof Users_ingredientsScalarFieldEnum)[keyof typeof Users_ingredientsScalarFieldEnum]


  export const Users_specsScalarFieldEnum: {
    user_id: 'user_id',
    spec_id: 'spec_id'
  };

  export type Users_specsScalarFieldEnum = (typeof Users_specsScalarFieldEnum)[keyof typeof Users_specsScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type GroupsWhereInput = {
    AND?: Enumerable<GroupsWhereInput>
    OR?: Enumerable<GroupsWhereInput>
    NOT?: Enumerable<GroupsWhereInput>
    id?: IntFilter | number
    group_name?: StringFilter | string
    date_created?: DateTimeFilter | Date | string
    groups_ingredients?: Groups_IngredientsListRelationFilter
    groups_mods?: Groups_modsListRelationFilter
    groups_specs?: Groups_specsListRelationFilter
    groups_users?: Groups_usersListRelationFilter
  }

  export type GroupsOrderByWithRelationInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
    groups_ingredients?: Groups_IngredientsOrderByRelationAggregateInput
    groups_mods?: groups_modsOrderByRelationAggregateInput
    groups_specs?: groups_specsOrderByRelationAggregateInput
    groups_users?: groups_usersOrderByRelationAggregateInput
  }

  export type GroupsWhereUniqueInput = {
    id?: number
  }

  export type GroupsOrderByWithAggregationInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
    _count?: GroupsCountOrderByAggregateInput
    _avg?: GroupsAvgOrderByAggregateInput
    _max?: GroupsMaxOrderByAggregateInput
    _min?: GroupsMinOrderByAggregateInput
    _sum?: GroupsSumOrderByAggregateInput
  }

  export type GroupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    group_name?: StringWithAggregatesFilter | string
    date_created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Groups_IngredientsWhereInput = {
    AND?: Enumerable<Groups_IngredientsWhereInput>
    OR?: Enumerable<Groups_IngredientsWhereInput>
    NOT?: Enumerable<Groups_IngredientsWhereInput>
    group_id?: IntFilter | number
    ingredient_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    ingredients?: XOR<IngredientsRelationFilter, IngredientsWhereInput>
  }

  export type Groups_IngredientsOrderByWithRelationInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    ingredients?: IngredientsOrderByWithRelationInput
  }

  export type Groups_IngredientsWhereUniqueInput = {
    group_id_ingredient_id?: Groups_IngredientsGroup_idIngredient_idCompoundUniqueInput
  }

  export type Groups_IngredientsOrderByWithAggregationInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
    _count?: Groups_IngredientsCountOrderByAggregateInput
    _avg?: Groups_IngredientsAvgOrderByAggregateInput
    _max?: Groups_IngredientsMaxOrderByAggregateInput
    _min?: Groups_IngredientsMinOrderByAggregateInput
    _sum?: Groups_IngredientsSumOrderByAggregateInput
  }

  export type Groups_IngredientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Groups_IngredientsScalarWhereWithAggregatesInput>
    group_id?: IntWithAggregatesFilter | number
    ingredient_id?: IntWithAggregatesFilter | number
  }

  export type groups_modsWhereInput = {
    AND?: Enumerable<groups_modsWhereInput>
    OR?: Enumerable<groups_modsWhereInput>
    NOT?: Enumerable<groups_modsWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type groups_modsOrderByWithRelationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type groups_modsWhereUniqueInput = {
    user_id_group_id?: groups_modsUser_idGroup_idCompoundUniqueInput
  }

  export type groups_modsOrderByWithAggregationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    _count?: groups_modsCountOrderByAggregateInput
    _avg?: groups_modsAvgOrderByAggregateInput
    _max?: groups_modsMaxOrderByAggregateInput
    _min?: groups_modsMinOrderByAggregateInput
    _sum?: groups_modsSumOrderByAggregateInput
  }

  export type groups_modsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    OR?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groups_modsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    group_id?: IntWithAggregatesFilter | number
  }

  export type groups_specsWhereInput = {
    AND?: Enumerable<groups_specsWhereInput>
    OR?: Enumerable<groups_specsWhereInput>
    NOT?: Enumerable<groups_specsWhereInput>
    group_id?: IntFilter | number
    spec_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    specs?: XOR<SpecsRelationFilter, specsWhereInput>
  }

  export type groups_specsOrderByWithRelationInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    specs?: specsOrderByWithRelationInput
  }

  export type groups_specsWhereUniqueInput = {
    group_id_spec_id?: groups_specsGroup_idSpec_idCompoundUniqueInput
  }

  export type groups_specsOrderByWithAggregationInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
    _count?: groups_specsCountOrderByAggregateInput
    _avg?: groups_specsAvgOrderByAggregateInput
    _max?: groups_specsMaxOrderByAggregateInput
    _min?: groups_specsMinOrderByAggregateInput
    _sum?: groups_specsSumOrderByAggregateInput
  }

  export type groups_specsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groups_specsScalarWhereWithAggregatesInput>
    OR?: Enumerable<groups_specsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groups_specsScalarWhereWithAggregatesInput>
    group_id?: IntWithAggregatesFilter | number
    spec_id?: IntWithAggregatesFilter | number
  }

  export type groups_usersWhereInput = {
    AND?: Enumerable<groups_usersWhereInput>
    OR?: Enumerable<groups_usersWhereInput>
    NOT?: Enumerable<groups_usersWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
    groups?: XOR<GroupsRelationFilter, GroupsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type groups_usersOrderByWithRelationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    groups?: GroupsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type groups_usersWhereUniqueInput = {
    user_id_group_id?: groups_usersUser_idGroup_idCompoundUniqueInput
  }

  export type groups_usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    group_id?: SortOrder
    _count?: groups_usersCountOrderByAggregateInput
    _avg?: groups_usersAvgOrderByAggregateInput
    _max?: groups_usersMaxOrderByAggregateInput
    _min?: groups_usersMinOrderByAggregateInput
    _sum?: groups_usersSumOrderByAggregateInput
  }

  export type groups_usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<groups_usersScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    group_id?: IntWithAggregatesFilter | number
  }

  export type IngredientsWhereInput = {
    AND?: Enumerable<IngredientsWhereInput>
    OR?: Enumerable<IngredientsWhereInput>
    NOT?: Enumerable<IngredientsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    amount?: IntNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableFilter | string | null
    groups_ingredients?: Groups_IngredientsListRelationFilter
    quantities?: QuantitiesListRelationFilter
    users_ingredients?: Users_ingredientsListRelationFilter
  }

  export type IngredientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    groups_ingredients?: Groups_IngredientsOrderByRelationAggregateInput
    quantities?: quantitiesOrderByRelationAggregateInput
    users_ingredients?: users_ingredientsOrderByRelationAggregateInput
  }

  export type IngredientsWhereUniqueInput = {
    id?: number
  }

  export type IngredientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
    _count?: IngredientsCountOrderByAggregateInput
    _avg?: IngredientsAvgOrderByAggregateInput
    _max?: IngredientsMaxOrderByAggregateInput
    _min?: IngredientsMinOrderByAggregateInput
    _sum?: IngredientsSumOrderByAggregateInput
  }

  export type IngredientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IngredientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<IngredientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IngredientsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    amount?: IntNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
    price?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    source?: StringNullableWithAggregatesFilter | string | null
  }

  export type quantitiesWhereInput = {
    AND?: Enumerable<quantitiesWhereInput>
    OR?: Enumerable<quantitiesWhereInput>
    NOT?: Enumerable<quantitiesWhereInput>
    id?: IntFilter | number
    spec_id?: IntNullableFilter | number | null
    ingredient_id?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
    ingredients?: XOR<IngredientsRelationFilter, IngredientsWhereInput> | null
    specs?: XOR<SpecsRelationFilter, specsWhereInput> | null
  }

  export type quantitiesOrderByWithRelationInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    ingredients?: IngredientsOrderByWithRelationInput
    specs?: specsOrderByWithRelationInput
  }

  export type quantitiesWhereUniqueInput = {
    id?: number
  }

  export type quantitiesOrderByWithAggregationInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    _count?: quantitiesCountOrderByAggregateInput
    _avg?: quantitiesAvgOrderByAggregateInput
    _max?: quantitiesMaxOrderByAggregateInput
    _min?: quantitiesMinOrderByAggregateInput
    _sum?: quantitiesSumOrderByAggregateInput
  }

  export type quantitiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<quantitiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<quantitiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<quantitiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    spec_id?: IntNullableWithAggregatesFilter | number | null
    ingredient_id?: IntNullableWithAggregatesFilter | number | null
    amount?: FloatNullableWithAggregatesFilter | number | null
    unit?: StringNullableWithAggregatesFilter | string | null
  }

  export type recipesWhereInput = {
    AND?: Enumerable<recipesWhereInput>
    OR?: Enumerable<recipesWhereInput>
    NOT?: Enumerable<recipesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_by?: StringFilter | string
    history?: StringNullableFilter | string | null
    specs?: SpecsListRelationFilter
  }

  export type recipesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_by?: SortOrder
    history?: SortOrder
    specs?: specsOrderByRelationAggregateInput
  }

  export type recipesWhereUniqueInput = {
    id?: number
  }

  export type recipesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_by?: SortOrder
    history?: SortOrder
    _count?: recipesCountOrderByAggregateInput
    _avg?: recipesAvgOrderByAggregateInput
    _max?: recipesMaxOrderByAggregateInput
    _min?: recipesMinOrderByAggregateInput
    _sum?: recipesSumOrderByAggregateInput
  }

  export type recipesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<recipesScalarWhereWithAggregatesInput>
    OR?: Enumerable<recipesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<recipesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_by?: StringWithAggregatesFilter | string
    history?: StringNullableWithAggregatesFilter | string | null
  }

  export type specsWhereInput = {
    AND?: Enumerable<specsWhereInput>
    OR?: Enumerable<specsWhereInput>
    NOT?: Enumerable<specsWhereInput>
    id?: IntFilter | number
    recipe_id?: IntNullableFilter | number | null
    created_by?: StringFilter | string
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
    recipes?: XOR<RecipesRelationFilter, recipesWhereInput> | null
    groups_specs?: Groups_specsListRelationFilter
    quantities?: QuantitiesListRelationFilter
    users_specs?: Users_specsListRelationFilter
  }

  export type specsOrderByWithRelationInput = {
    id?: SortOrder
    recipe_id?: SortOrder
    created_by?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    recipes?: recipesOrderByWithRelationInput
    groups_specs?: groups_specsOrderByRelationAggregateInput
    quantities?: quantitiesOrderByRelationAggregateInput
    users_specs?: users_specsOrderByRelationAggregateInput
  }

  export type specsWhereUniqueInput = {
    id?: number
  }

  export type specsOrderByWithAggregationInput = {
    id?: SortOrder
    recipe_id?: SortOrder
    created_by?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
    _count?: specsCountOrderByAggregateInput
    _avg?: specsAvgOrderByAggregateInput
    _max?: specsMaxOrderByAggregateInput
    _min?: specsMinOrderByAggregateInput
    _sum?: specsSumOrderByAggregateInput
  }

  export type specsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<specsScalarWhereWithAggregatesInput>
    OR?: Enumerable<specsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<specsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    recipe_id?: IntNullableWithAggregatesFilter | number | null
    created_by?: StringWithAggregatesFilter | string
    instructions?: StringNullableWithAggregatesFilter | string | null
    glassware?: StringNullableWithAggregatesFilter | string | null
    ice?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_dataWhereInput = {
    AND?: Enumerable<user_dataWhereInput>
    OR?: Enumerable<user_dataWhereInput>
    NOT?: Enumerable<user_dataWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    user_bio?: StringNullableFilter | string | null
    work_place?: StringNullableFilter | string | null
    profile_picture?: StringNullableFilter | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type user_dataOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type user_dataWhereUniqueInput = {
    id?: number
  }

  export type user_dataOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
    _count?: user_dataCountOrderByAggregateInput
    _avg?: user_dataAvgOrderByAggregateInput
    _max?: user_dataMaxOrderByAggregateInput
    _min?: user_dataMinOrderByAggregateInput
    _sum?: user_dataSumOrderByAggregateInput
  }

  export type user_dataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_dataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
    user_bio?: StringNullableWithAggregatesFilter | string | null
    work_place?: StringNullableWithAggregatesFilter | string | null
    profile_picture?: StringNullableWithAggregatesFilter | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    user_name?: StringFilter | string
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    date_joined?: DateTimeFilter | Date | string
    email?: StringFilter | string
    password?: StringFilter | string
    groups_mods?: Groups_modsListRelationFilter
    groups_users?: Groups_usersListRelationFilter
    user_data?: User_dataListRelationFilter
    users_ingredients?: Users_ingredientsListRelationFilter
    users_specs?: Users_specsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    groups_mods?: groups_modsOrderByRelationAggregateInput
    groups_users?: groups_usersOrderByRelationAggregateInput
    user_data?: user_dataOrderByRelationAggregateInput
    users_ingredients?: users_ingredientsOrderByRelationAggregateInput
    users_specs?: users_specsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_name?: StringWithAggregatesFilter | string
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    date_joined?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type users_ingredientsWhereInput = {
    AND?: Enumerable<users_ingredientsWhereInput>
    OR?: Enumerable<users_ingredientsWhereInput>
    NOT?: Enumerable<users_ingredientsWhereInput>
    user_id?: IntFilter | number
    ingredient_id?: IntFilter | number
    ingredients?: XOR<IngredientsRelationFilter, IngredientsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type users_ingredientsOrderByWithRelationInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
    ingredients?: IngredientsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type users_ingredientsWhereUniqueInput = {
    user_id_ingredient_id?: users_ingredientsUser_idIngredient_idCompoundUniqueInput
  }

  export type users_ingredientsOrderByWithAggregationInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
    _count?: users_ingredientsCountOrderByAggregateInput
    _avg?: users_ingredientsAvgOrderByAggregateInput
    _max?: users_ingredientsMaxOrderByAggregateInput
    _min?: users_ingredientsMinOrderByAggregateInput
    _sum?: users_ingredientsSumOrderByAggregateInput
  }

  export type users_ingredientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<users_ingredientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<users_ingredientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<users_ingredientsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    ingredient_id?: IntWithAggregatesFilter | number
  }

  export type users_specsWhereInput = {
    AND?: Enumerable<users_specsWhereInput>
    OR?: Enumerable<users_specsWhereInput>
    NOT?: Enumerable<users_specsWhereInput>
    user_id?: IntFilter | number
    spec_id?: IntFilter | number
    specs?: XOR<SpecsRelationFilter, specsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type users_specsOrderByWithRelationInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
    specs?: specsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type users_specsWhereUniqueInput = {
    user_id_spec_id?: users_specsUser_idSpec_idCompoundUniqueInput
  }

  export type users_specsOrderByWithAggregationInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
    _count?: users_specsCountOrderByAggregateInput
    _avg?: users_specsAvgOrderByAggregateInput
    _max?: users_specsMaxOrderByAggregateInput
    _min?: users_specsMinOrderByAggregateInput
    _sum?: users_specsSumOrderByAggregateInput
  }

  export type users_specsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<users_specsScalarWhereWithAggregatesInput>
    OR?: Enumerable<users_specsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<users_specsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    spec_id?: IntWithAggregatesFilter | number
  }

  export type GroupsCreateInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUpdateInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsCreateManyInput = {
    id?: number
    group_name: string
    date_created: Date | string
  }

  export type GroupsUpdateManyMutationInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Groups_IngredientsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_ingredientsInput
    ingredients: IngredientsCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
    ingredients?: IngredientsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsCreateManyInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsUpdateManyMutationInput = {

  }

  export type Groups_IngredientsUncheckedUpdateManyInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_modsInput
    users: usersCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_modsNestedInput
    users?: usersUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsCreateManyInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsUpdateManyMutationInput = {

  }

  export type groups_modsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_specsCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_specsInput
    specs: specsCreateNestedOneWithoutGroups_specsInput
  }

  export type groups_specsUncheckedCreateInput = {
    group_id: number
    spec_id: number
  }

  export type groups_specsUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_specsNestedInput
    specs?: specsUpdateOneRequiredWithoutGroups_specsNestedInput
  }

  export type groups_specsUncheckedUpdateInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_specsCreateManyInput = {
    group_id: number
    spec_id: number
  }

  export type groups_specsUpdateManyMutationInput = {

  }

  export type groups_specsUncheckedUpdateManyInput = {
    group_id?: IntFieldUpdateOperationsInput | number
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersCreateInput = {
    groups: GroupsCreateNestedOneWithoutGroups_usersInput
    users: usersCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersUpdateInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_usersNestedInput
    users?: usersUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersCreateManyInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersUpdateManyMutationInput = {

  }

  export type groups_usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type IngredientsCreateInput = {
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    quantities?: quantitiesCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsUncheckedCreateInput = {
    id?: number
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    quantities?: quantitiesUncheckedCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    quantities?: quantitiesUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    quantities?: quantitiesUncheckedUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientsCreateManyInput = {
    id?: number
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
  }

  export type IngredientsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type quantitiesCreateInput = {
    amount?: number | null
    unit?: string | null
    ingredients?: IngredientsCreateNestedOneWithoutQuantitiesInput
    specs?: specsCreateNestedOneWithoutQuantitiesInput
  }

  export type quantitiesUncheckedCreateInput = {
    id?: number
    spec_id?: number | null
    ingredient_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type quantitiesUpdateInput = {
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: IngredientsUpdateOneWithoutQuantitiesNestedInput
    specs?: specsUpdateOneWithoutQuantitiesNestedInput
  }

  export type quantitiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec_id?: NullableIntFieldUpdateOperationsInput | number | null
    ingredient_id?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type quantitiesCreateManyInput = {
    id?: number
    spec_id?: number | null
    ingredient_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type quantitiesUpdateManyMutationInput = {
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type quantitiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec_id?: NullableIntFieldUpdateOperationsInput | number | null
    ingredient_id?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type recipesCreateInput = {
    name: string
    created_by: string
    history?: string | null
    specs?: specsCreateNestedManyWithoutRecipesInput
  }

  export type recipesUncheckedCreateInput = {
    id?: number
    name: string
    created_by: string
    history?: string | null
    specs?: specsUncheckedCreateNestedManyWithoutRecipesInput
  }

  export type recipesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: specsUpdateManyWithoutRecipesNestedInput
  }

  export type recipesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: specsUncheckedUpdateManyWithoutRecipesNestedInput
  }

  export type recipesCreateManyInput = {
    id?: number
    name: string
    created_by: string
    history?: string | null
  }

  export type recipesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type recipesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type specsCreateInput = {
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipes?: recipesCreateNestedOneWithoutSpecsInput
    groups_specs?: groups_specsCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsCreateNestedManyWithoutSpecsInput
  }

  export type specsUncheckedCreateInput = {
    id?: number
    recipe_id?: number | null
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesUncheckedCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutSpecsInput
  }

  export type specsUpdateInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: recipesUpdateOneWithoutSpecsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipe_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groups_specs?: groups_specsUncheckedUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUncheckedUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutSpecsNestedInput
  }

  export type specsCreateManyInput = {
    id?: number
    recipe_id?: number | null
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
  }

  export type specsUpdateManyMutationInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type specsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipe_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataCreateInput = {
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
    users?: usersCreateNestedOneWithoutUser_dataInput
  }

  export type user_dataUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUpdateInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutUser_dataNestedInput
  }

  export type user_dataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataCreateManyInput = {
    id?: number
    user_id?: number | null
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUpdateManyMutationInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutUsersInput
    users_specs?: users_specsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutUsersInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
  }

  export type usersUpdateManyMutationInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type users_ingredientsCreateInput = {
    ingredients: IngredientsCreateNestedOneWithoutUsers_ingredientsInput
    users: usersCreateNestedOneWithoutUsers_ingredientsInput
  }

  export type users_ingredientsUncheckedCreateInput = {
    user_id: number
    ingredient_id: number
  }

  export type users_ingredientsUpdateInput = {
    ingredients?: IngredientsUpdateOneRequiredWithoutUsers_ingredientsNestedInput
    users?: usersUpdateOneRequiredWithoutUsers_ingredientsNestedInput
  }

  export type users_ingredientsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_ingredientsCreateManyInput = {
    user_id: number
    ingredient_id: number
  }

  export type users_ingredientsUpdateManyMutationInput = {

  }

  export type users_ingredientsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_specsCreateInput = {
    specs: specsCreateNestedOneWithoutUsers_specsInput
    users: usersCreateNestedOneWithoutUsers_specsInput
  }

  export type users_specsUncheckedCreateInput = {
    user_id: number
    spec_id: number
  }

  export type users_specsUpdateInput = {
    specs?: specsUpdateOneRequiredWithoutUsers_specsNestedInput
    users?: usersUpdateOneRequiredWithoutUsers_specsNestedInput
  }

  export type users_specsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_specsCreateManyInput = {
    user_id: number
    spec_id: number
  }

  export type users_specsUpdateManyMutationInput = {

  }

  export type users_specsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Groups_IngredientsListRelationFilter = {
    every?: Groups_IngredientsWhereInput
    some?: Groups_IngredientsWhereInput
    none?: Groups_IngredientsWhereInput
  }

  export type Groups_modsListRelationFilter = {
    every?: groups_modsWhereInput
    some?: groups_modsWhereInput
    none?: groups_modsWhereInput
  }

  export type Groups_specsListRelationFilter = {
    every?: groups_specsWhereInput
    some?: groups_specsWhereInput
    none?: groups_specsWhereInput
  }

  export type Groups_usersListRelationFilter = {
    every?: groups_usersWhereInput
    some?: groups_usersWhereInput
    none?: groups_usersWhereInput
  }

  export type Groups_IngredientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groups_modsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groups_specsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groups_usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupsCountOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsMinOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
    date_created?: SortOrder
  }

  export type GroupsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupsRelationFilter = {
    is?: GroupsWhereInput
    isNot?: GroupsWhereInput
  }

  export type IngredientsRelationFilter = {
    is?: IngredientsWhereInput | null
    isNot?: IngredientsWhereInput | null
  }

  export type Groups_IngredientsGroup_idIngredient_idCompoundUniqueInput = {
    group_id: number
    ingredient_id: number
  }

  export type Groups_IngredientsCountOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsAvgOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsMaxOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsMinOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type Groups_IngredientsSumOrderByAggregateInput = {
    group_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type groups_modsUser_idGroup_idCompoundUniqueInput = {
    user_id: number
    group_id: number
  }

  export type groups_modsCountOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsMinOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_modsSumOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type SpecsRelationFilter = {
    is?: specsWhereInput
    isNot?: specsWhereInput
  }

  export type groups_specsGroup_idSpec_idCompoundUniqueInput = {
    group_id: number
    spec_id: number
  }

  export type groups_specsCountOrderByAggregateInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
  }

  export type groups_specsAvgOrderByAggregateInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
  }

  export type groups_specsMaxOrderByAggregateInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
  }

  export type groups_specsMinOrderByAggregateInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
  }

  export type groups_specsSumOrderByAggregateInput = {
    group_id?: SortOrder
    spec_id?: SortOrder
  }

  export type groups_usersUser_idGroup_idCompoundUniqueInput = {
    user_id: number
    group_id: number
  }

  export type groups_usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type groups_usersSumOrderByAggregateInput = {
    user_id?: SortOrder
    group_id?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type QuantitiesListRelationFilter = {
    every?: quantitiesWhereInput
    some?: quantitiesWhereInput
    none?: quantitiesWhereInput
  }

  export type Users_ingredientsListRelationFilter = {
    every?: users_ingredientsWhereInput
    some?: users_ingredientsWhereInput
    none?: users_ingredientsWhereInput
  }

  export type quantitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type users_ingredientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
  }

  export type IngredientsAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
  }

  export type IngredientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
  }

  export type IngredientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    price?: SortOrder
    source?: SortOrder
  }

  export type IngredientsSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type quantitiesCountOrderByAggregateInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
  }

  export type quantitiesAvgOrderByAggregateInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
  }

  export type quantitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
  }

  export type quantitiesMinOrderByAggregateInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
  }

  export type quantitiesSumOrderByAggregateInput = {
    id?: SortOrder
    spec_id?: SortOrder
    ingredient_id?: SortOrder
    amount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type SpecsListRelationFilter = {
    every?: specsWhereInput
    some?: specsWhereInput
    none?: specsWhereInput
  }

  export type specsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type recipesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by?: SortOrder
    history?: SortOrder
  }

  export type recipesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type recipesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by?: SortOrder
    history?: SortOrder
  }

  export type recipesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by?: SortOrder
    history?: SortOrder
  }

  export type recipesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RecipesRelationFilter = {
    is?: recipesWhereInput | null
    isNot?: recipesWhereInput | null
  }

  export type Users_specsListRelationFilter = {
    every?: users_specsWhereInput
    some?: users_specsWhereInput
    none?: users_specsWhereInput
  }

  export type users_specsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type specsCountOrderByAggregateInput = {
    id?: SortOrder
    recipe_id?: SortOrder
    created_by?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
  }

  export type specsAvgOrderByAggregateInput = {
    id?: SortOrder
    recipe_id?: SortOrder
  }

  export type specsMaxOrderByAggregateInput = {
    id?: SortOrder
    recipe_id?: SortOrder
    created_by?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
  }

  export type specsMinOrderByAggregateInput = {
    id?: SortOrder
    recipe_id?: SortOrder
    created_by?: SortOrder
    instructions?: SortOrder
    glassware?: SortOrder
    ice?: SortOrder
  }

  export type specsSumOrderByAggregateInput = {
    id?: SortOrder
    recipe_id?: SortOrder
  }

  export type user_dataCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type user_dataMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_bio?: SortOrder
    work_place?: SortOrder
    profile_picture?: SortOrder
  }

  export type user_dataSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type User_dataListRelationFilter = {
    every?: user_dataWhereInput
    some?: user_dataWhereInput
    none?: user_dataWhereInput
  }

  export type user_dataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    user_name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    date_joined?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type users_ingredientsUser_idIngredient_idCompoundUniqueInput = {
    user_id: number
    ingredient_id: number
  }

  export type users_ingredientsCountOrderByAggregateInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type users_ingredientsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type users_ingredientsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type users_ingredientsMinOrderByAggregateInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type users_ingredientsSumOrderByAggregateInput = {
    user_id?: SortOrder
    ingredient_id?: SortOrder
  }

  export type users_specsUser_idSpec_idCompoundUniqueInput = {
    user_id: number
    spec_id: number
  }

  export type users_specsCountOrderByAggregateInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
  }

  export type users_specsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
  }

  export type users_specsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
  }

  export type users_specsMinOrderByAggregateInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
  }

  export type users_specsSumOrderByAggregateInput = {
    user_id?: SortOrder
    spec_id?: SortOrder
  }

  export type Groups_IngredientsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type groups_modsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_specsCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutGroupsInput>, Enumerable<groups_specsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_specsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_specsWhereUniqueInput>
  }

  export type groups_usersCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type groups_modsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_specsUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutGroupsInput>, Enumerable<groups_specsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutGroupsInput>
    createMany?: groups_specsCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_specsWhereUniqueInput>
  }

  export type groups_usersUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Groups_IngredientsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type groups_modsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_specsUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutGroupsInput>, Enumerable<groups_specsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_specsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_specsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_specsWhereUniqueInput>
    disconnect?: Enumerable<groups_specsWhereUniqueInput>
    delete?: Enumerable<groups_specsWhereUniqueInput>
    connect?: Enumerable<groups_specsWhereUniqueInput>
    update?: Enumerable<groups_specsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_specsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_specsScalarWhereInput>
  }

  export type groups_usersUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutGroupsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: Groups_IngredientsCreateManyGroupsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type groups_modsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutGroupsInput>, Enumerable<groups_modsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_modsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_specsUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutGroupsInput>, Enumerable<groups_specsUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_specsUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_specsCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_specsWhereUniqueInput>
    disconnect?: Enumerable<groups_specsWhereUniqueInput>
    delete?: Enumerable<groups_specsWhereUniqueInput>
    connect?: Enumerable<groups_specsWhereUniqueInput>
    update?: Enumerable<groups_specsUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_specsUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_specsScalarWhereInput>
  }

  export type groups_usersUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutGroupsInput>, Enumerable<groups_usersUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutGroupsInput>
    createMany?: groups_usersCreateManyGroupsInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_ingredientsInput = {
    create?: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_ingredientsInput
    connect?: GroupsWhereUniqueInput
  }

  export type IngredientsCreateNestedOneWithoutGroups_ingredientsInput = {
    create?: XOR<IngredientsCreateWithoutGroups_ingredientsInput, IngredientsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutGroups_ingredientsInput
    connect?: IngredientsWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_ingredientsInput
    upsert?: GroupsUpsertWithoutGroups_ingredientsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_ingredientsInput, GroupsUncheckedUpdateWithoutGroups_ingredientsInput>
  }

  export type IngredientsUpdateOneRequiredWithoutGroups_ingredientsNestedInput = {
    create?: XOR<IngredientsCreateWithoutGroups_ingredientsInput, IngredientsUncheckedCreateWithoutGroups_ingredientsInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutGroups_ingredientsInput
    upsert?: IngredientsUpsertWithoutGroups_ingredientsInput
    connect?: IngredientsWhereUniqueInput
    update?: XOR<IngredientsUpdateWithoutGroups_ingredientsInput, IngredientsUncheckedUpdateWithoutGroups_ingredientsInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_modsInput = {
    create?: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_modsInput
    connect?: GroupsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutGroups_modsInput = {
    create?: XOR<usersCreateWithoutGroups_modsInput, usersUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGroups_modsInput
    connect?: usersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_modsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_modsInput
    upsert?: GroupsUpsertWithoutGroups_modsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_modsInput, GroupsUncheckedUpdateWithoutGroups_modsInput>
  }

  export type usersUpdateOneRequiredWithoutGroups_modsNestedInput = {
    create?: XOR<usersCreateWithoutGroups_modsInput, usersUncheckedCreateWithoutGroups_modsInput>
    connectOrCreate?: usersCreateOrConnectWithoutGroups_modsInput
    upsert?: usersUpsertWithoutGroups_modsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutGroups_modsInput, usersUncheckedUpdateWithoutGroups_modsInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_specsInput = {
    create?: XOR<GroupsCreateWithoutGroups_specsInput, GroupsUncheckedCreateWithoutGroups_specsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_specsInput
    connect?: GroupsWhereUniqueInput
  }

  export type specsCreateNestedOneWithoutGroups_specsInput = {
    create?: XOR<specsCreateWithoutGroups_specsInput, specsUncheckedCreateWithoutGroups_specsInput>
    connectOrCreate?: specsCreateOrConnectWithoutGroups_specsInput
    connect?: specsWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_specsNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_specsInput, GroupsUncheckedCreateWithoutGroups_specsInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_specsInput
    upsert?: GroupsUpsertWithoutGroups_specsInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_specsInput, GroupsUncheckedUpdateWithoutGroups_specsInput>
  }

  export type specsUpdateOneRequiredWithoutGroups_specsNestedInput = {
    create?: XOR<specsCreateWithoutGroups_specsInput, specsUncheckedCreateWithoutGroups_specsInput>
    connectOrCreate?: specsCreateOrConnectWithoutGroups_specsInput
    upsert?: specsUpsertWithoutGroups_specsInput
    connect?: specsWhereUniqueInput
    update?: XOR<specsUpdateWithoutGroups_specsInput, specsUncheckedUpdateWithoutGroups_specsInput>
  }

  export type GroupsCreateNestedOneWithoutGroups_usersInput = {
    create?: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_usersInput
    connect?: GroupsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutGroups_usersInput = {
    create?: XOR<usersCreateWithoutGroups_usersInput, usersUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: usersCreateOrConnectWithoutGroups_usersInput
    connect?: usersWhereUniqueInput
  }

  export type GroupsUpdateOneRequiredWithoutGroups_usersNestedInput = {
    create?: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: GroupsCreateOrConnectWithoutGroups_usersInput
    upsert?: GroupsUpsertWithoutGroups_usersInput
    connect?: GroupsWhereUniqueInput
    update?: XOR<GroupsUpdateWithoutGroups_usersInput, GroupsUncheckedUpdateWithoutGroups_usersInput>
  }

  export type usersUpdateOneRequiredWithoutGroups_usersNestedInput = {
    create?: XOR<usersCreateWithoutGroups_usersInput, usersUncheckedCreateWithoutGroups_usersInput>
    connectOrCreate?: usersCreateOrConnectWithoutGroups_usersInput
    upsert?: usersUpsertWithoutGroups_usersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutGroups_usersInput, usersUncheckedUpdateWithoutGroups_usersInput>
  }

  export type Groups_IngredientsCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type quantitiesCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutIngredientsInput>, Enumerable<quantitiesUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutIngredientsInput>
    createMany?: quantitiesCreateManyIngredientsInputEnvelope
    connect?: Enumerable<quantitiesWhereUniqueInput>
  }

  export type users_ingredientsCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutIngredientsInput>, Enumerable<users_ingredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: users_ingredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
  }

  export type Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
  }

  export type quantitiesUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutIngredientsInput>, Enumerable<quantitiesUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutIngredientsInput>
    createMany?: quantitiesCreateManyIngredientsInputEnvelope
    connect?: Enumerable<quantitiesWhereUniqueInput>
  }

  export type users_ingredientsUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutIngredientsInput>, Enumerable<users_ingredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutIngredientsInput>
    createMany?: users_ingredientsCreateManyIngredientsInputEnvelope
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type Groups_IngredientsUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type quantitiesUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutIngredientsInput>, Enumerable<quantitiesUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<quantitiesUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: quantitiesCreateManyIngredientsInputEnvelope
    set?: Enumerable<quantitiesWhereUniqueInput>
    disconnect?: Enumerable<quantitiesWhereUniqueInput>
    delete?: Enumerable<quantitiesWhereUniqueInput>
    connect?: Enumerable<quantitiesWhereUniqueInput>
    update?: Enumerable<quantitiesUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<quantitiesUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<quantitiesScalarWhereInput>
  }

  export type users_ingredientsUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutIngredientsInput>, Enumerable<users_ingredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<users_ingredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: users_ingredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<users_ingredientsWhereUniqueInput>
    disconnect?: Enumerable<users_ingredientsWhereUniqueInput>
    delete?: Enumerable<users_ingredientsWhereUniqueInput>
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
    update?: Enumerable<users_ingredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<users_ingredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<users_ingredientsScalarWhereInput>
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<Groups_IngredientsCreateWithoutIngredientsInput>, Enumerable<Groups_IngredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<Groups_IngredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: Groups_IngredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<Groups_IngredientsWhereUniqueInput>
    disconnect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    delete?: Enumerable<Groups_IngredientsWhereUniqueInput>
    connect?: Enumerable<Groups_IngredientsWhereUniqueInput>
    update?: Enumerable<Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<Groups_IngredientsScalarWhereInput>
  }

  export type quantitiesUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutIngredientsInput>, Enumerable<quantitiesUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<quantitiesUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: quantitiesCreateManyIngredientsInputEnvelope
    set?: Enumerable<quantitiesWhereUniqueInput>
    disconnect?: Enumerable<quantitiesWhereUniqueInput>
    delete?: Enumerable<quantitiesWhereUniqueInput>
    connect?: Enumerable<quantitiesWhereUniqueInput>
    update?: Enumerable<quantitiesUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<quantitiesUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<quantitiesScalarWhereInput>
  }

  export type users_ingredientsUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutIngredientsInput>, Enumerable<users_ingredientsUncheckedCreateWithoutIngredientsInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutIngredientsInput>
    upsert?: Enumerable<users_ingredientsUpsertWithWhereUniqueWithoutIngredientsInput>
    createMany?: users_ingredientsCreateManyIngredientsInputEnvelope
    set?: Enumerable<users_ingredientsWhereUniqueInput>
    disconnect?: Enumerable<users_ingredientsWhereUniqueInput>
    delete?: Enumerable<users_ingredientsWhereUniqueInput>
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
    update?: Enumerable<users_ingredientsUpdateWithWhereUniqueWithoutIngredientsInput>
    updateMany?: Enumerable<users_ingredientsUpdateManyWithWhereWithoutIngredientsInput>
    deleteMany?: Enumerable<users_ingredientsScalarWhereInput>
  }

  export type IngredientsCreateNestedOneWithoutQuantitiesInput = {
    create?: XOR<IngredientsCreateWithoutQuantitiesInput, IngredientsUncheckedCreateWithoutQuantitiesInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutQuantitiesInput
    connect?: IngredientsWhereUniqueInput
  }

  export type specsCreateNestedOneWithoutQuantitiesInput = {
    create?: XOR<specsCreateWithoutQuantitiesInput, specsUncheckedCreateWithoutQuantitiesInput>
    connectOrCreate?: specsCreateOrConnectWithoutQuantitiesInput
    connect?: specsWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IngredientsUpdateOneWithoutQuantitiesNestedInput = {
    create?: XOR<IngredientsCreateWithoutQuantitiesInput, IngredientsUncheckedCreateWithoutQuantitiesInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutQuantitiesInput
    upsert?: IngredientsUpsertWithoutQuantitiesInput
    disconnect?: boolean
    delete?: boolean
    connect?: IngredientsWhereUniqueInput
    update?: XOR<IngredientsUpdateWithoutQuantitiesInput, IngredientsUncheckedUpdateWithoutQuantitiesInput>
  }

  export type specsUpdateOneWithoutQuantitiesNestedInput = {
    create?: XOR<specsCreateWithoutQuantitiesInput, specsUncheckedCreateWithoutQuantitiesInput>
    connectOrCreate?: specsCreateOrConnectWithoutQuantitiesInput
    upsert?: specsUpsertWithoutQuantitiesInput
    disconnect?: boolean
    delete?: boolean
    connect?: specsWhereUniqueInput
    update?: XOR<specsUpdateWithoutQuantitiesInput, specsUncheckedUpdateWithoutQuantitiesInput>
  }

  export type specsCreateNestedManyWithoutRecipesInput = {
    create?: XOR<Enumerable<specsCreateWithoutRecipesInput>, Enumerable<specsUncheckedCreateWithoutRecipesInput>>
    connectOrCreate?: Enumerable<specsCreateOrConnectWithoutRecipesInput>
    createMany?: specsCreateManyRecipesInputEnvelope
    connect?: Enumerable<specsWhereUniqueInput>
  }

  export type specsUncheckedCreateNestedManyWithoutRecipesInput = {
    create?: XOR<Enumerable<specsCreateWithoutRecipesInput>, Enumerable<specsUncheckedCreateWithoutRecipesInput>>
    connectOrCreate?: Enumerable<specsCreateOrConnectWithoutRecipesInput>
    createMany?: specsCreateManyRecipesInputEnvelope
    connect?: Enumerable<specsWhereUniqueInput>
  }

  export type specsUpdateManyWithoutRecipesNestedInput = {
    create?: XOR<Enumerable<specsCreateWithoutRecipesInput>, Enumerable<specsUncheckedCreateWithoutRecipesInput>>
    connectOrCreate?: Enumerable<specsCreateOrConnectWithoutRecipesInput>
    upsert?: Enumerable<specsUpsertWithWhereUniqueWithoutRecipesInput>
    createMany?: specsCreateManyRecipesInputEnvelope
    set?: Enumerable<specsWhereUniqueInput>
    disconnect?: Enumerable<specsWhereUniqueInput>
    delete?: Enumerable<specsWhereUniqueInput>
    connect?: Enumerable<specsWhereUniqueInput>
    update?: Enumerable<specsUpdateWithWhereUniqueWithoutRecipesInput>
    updateMany?: Enumerable<specsUpdateManyWithWhereWithoutRecipesInput>
    deleteMany?: Enumerable<specsScalarWhereInput>
  }

  export type specsUncheckedUpdateManyWithoutRecipesNestedInput = {
    create?: XOR<Enumerable<specsCreateWithoutRecipesInput>, Enumerable<specsUncheckedCreateWithoutRecipesInput>>
    connectOrCreate?: Enumerable<specsCreateOrConnectWithoutRecipesInput>
    upsert?: Enumerable<specsUpsertWithWhereUniqueWithoutRecipesInput>
    createMany?: specsCreateManyRecipesInputEnvelope
    set?: Enumerable<specsWhereUniqueInput>
    disconnect?: Enumerable<specsWhereUniqueInput>
    delete?: Enumerable<specsWhereUniqueInput>
    connect?: Enumerable<specsWhereUniqueInput>
    update?: Enumerable<specsUpdateWithWhereUniqueWithoutRecipesInput>
    updateMany?: Enumerable<specsUpdateManyWithWhereWithoutRecipesInput>
    deleteMany?: Enumerable<specsScalarWhereInput>
  }

  export type recipesCreateNestedOneWithoutSpecsInput = {
    create?: XOR<recipesCreateWithoutSpecsInput, recipesUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: recipesCreateOrConnectWithoutSpecsInput
    connect?: recipesWhereUniqueInput
  }

  export type groups_specsCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutSpecsInput>, Enumerable<groups_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutSpecsInput>
    createMany?: groups_specsCreateManySpecsInputEnvelope
    connect?: Enumerable<groups_specsWhereUniqueInput>
  }

  export type quantitiesCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutSpecsInput>, Enumerable<quantitiesUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutSpecsInput>
    createMany?: quantitiesCreateManySpecsInputEnvelope
    connect?: Enumerable<quantitiesWhereUniqueInput>
  }

  export type users_specsCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutSpecsInput>, Enumerable<users_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutSpecsInput>
    createMany?: users_specsCreateManySpecsInputEnvelope
    connect?: Enumerable<users_specsWhereUniqueInput>
  }

  export type groups_specsUncheckedCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutSpecsInput>, Enumerable<groups_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutSpecsInput>
    createMany?: groups_specsCreateManySpecsInputEnvelope
    connect?: Enumerable<groups_specsWhereUniqueInput>
  }

  export type quantitiesUncheckedCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutSpecsInput>, Enumerable<quantitiesUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutSpecsInput>
    createMany?: quantitiesCreateManySpecsInputEnvelope
    connect?: Enumerable<quantitiesWhereUniqueInput>
  }

  export type users_specsUncheckedCreateNestedManyWithoutSpecsInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutSpecsInput>, Enumerable<users_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutSpecsInput>
    createMany?: users_specsCreateManySpecsInputEnvelope
    connect?: Enumerable<users_specsWhereUniqueInput>
  }

  export type recipesUpdateOneWithoutSpecsNestedInput = {
    create?: XOR<recipesCreateWithoutSpecsInput, recipesUncheckedCreateWithoutSpecsInput>
    connectOrCreate?: recipesCreateOrConnectWithoutSpecsInput
    upsert?: recipesUpsertWithoutSpecsInput
    disconnect?: boolean
    delete?: boolean
    connect?: recipesWhereUniqueInput
    update?: XOR<recipesUpdateWithoutSpecsInput, recipesUncheckedUpdateWithoutSpecsInput>
  }

  export type groups_specsUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutSpecsInput>, Enumerable<groups_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<groups_specsUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: groups_specsCreateManySpecsInputEnvelope
    set?: Enumerable<groups_specsWhereUniqueInput>
    disconnect?: Enumerable<groups_specsWhereUniqueInput>
    delete?: Enumerable<groups_specsWhereUniqueInput>
    connect?: Enumerable<groups_specsWhereUniqueInput>
    update?: Enumerable<groups_specsUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<groups_specsUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<groups_specsScalarWhereInput>
  }

  export type quantitiesUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutSpecsInput>, Enumerable<quantitiesUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<quantitiesUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: quantitiesCreateManySpecsInputEnvelope
    set?: Enumerable<quantitiesWhereUniqueInput>
    disconnect?: Enumerable<quantitiesWhereUniqueInput>
    delete?: Enumerable<quantitiesWhereUniqueInput>
    connect?: Enumerable<quantitiesWhereUniqueInput>
    update?: Enumerable<quantitiesUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<quantitiesUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<quantitiesScalarWhereInput>
  }

  export type users_specsUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutSpecsInput>, Enumerable<users_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<users_specsUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: users_specsCreateManySpecsInputEnvelope
    set?: Enumerable<users_specsWhereUniqueInput>
    disconnect?: Enumerable<users_specsWhereUniqueInput>
    delete?: Enumerable<users_specsWhereUniqueInput>
    connect?: Enumerable<users_specsWhereUniqueInput>
    update?: Enumerable<users_specsUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<users_specsUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<users_specsScalarWhereInput>
  }

  export type groups_specsUncheckedUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<groups_specsCreateWithoutSpecsInput>, Enumerable<groups_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<groups_specsCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<groups_specsUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: groups_specsCreateManySpecsInputEnvelope
    set?: Enumerable<groups_specsWhereUniqueInput>
    disconnect?: Enumerable<groups_specsWhereUniqueInput>
    delete?: Enumerable<groups_specsWhereUniqueInput>
    connect?: Enumerable<groups_specsWhereUniqueInput>
    update?: Enumerable<groups_specsUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<groups_specsUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<groups_specsScalarWhereInput>
  }

  export type quantitiesUncheckedUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<quantitiesCreateWithoutSpecsInput>, Enumerable<quantitiesUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<quantitiesCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<quantitiesUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: quantitiesCreateManySpecsInputEnvelope
    set?: Enumerable<quantitiesWhereUniqueInput>
    disconnect?: Enumerable<quantitiesWhereUniqueInput>
    delete?: Enumerable<quantitiesWhereUniqueInput>
    connect?: Enumerable<quantitiesWhereUniqueInput>
    update?: Enumerable<quantitiesUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<quantitiesUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<quantitiesScalarWhereInput>
  }

  export type users_specsUncheckedUpdateManyWithoutSpecsNestedInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutSpecsInput>, Enumerable<users_specsUncheckedCreateWithoutSpecsInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutSpecsInput>
    upsert?: Enumerable<users_specsUpsertWithWhereUniqueWithoutSpecsInput>
    createMany?: users_specsCreateManySpecsInputEnvelope
    set?: Enumerable<users_specsWhereUniqueInput>
    disconnect?: Enumerable<users_specsWhereUniqueInput>
    delete?: Enumerable<users_specsWhereUniqueInput>
    connect?: Enumerable<users_specsWhereUniqueInput>
    update?: Enumerable<users_specsUpdateWithWhereUniqueWithoutSpecsInput>
    updateMany?: Enumerable<users_specsUpdateManyWithWhereWithoutSpecsInput>
    deleteMany?: Enumerable<users_specsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutUser_dataInput = {
    create?: XOR<usersCreateWithoutUser_dataInput, usersUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_dataInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutUser_dataNestedInput = {
    create?: XOR<usersCreateWithoutUser_dataInput, usersUncheckedCreateWithoutUser_dataInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_dataInput
    upsert?: usersUpsertWithoutUser_dataInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUser_dataInput, usersUncheckedUpdateWithoutUser_dataInput>
  }

  export type groups_modsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_usersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type user_dataCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    connect?: Enumerable<user_dataWhereUniqueInput>
  }

  export type users_ingredientsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutUsersInput>, Enumerable<users_ingredientsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutUsersInput>
    createMany?: users_ingredientsCreateManyUsersInputEnvelope
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
  }

  export type users_specsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutUsersInput>, Enumerable<users_specsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutUsersInput>
    createMany?: users_specsCreateManyUsersInputEnvelope
    connect?: Enumerable<users_specsWhereUniqueInput>
  }

  export type groups_modsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_modsWhereUniqueInput>
  }

  export type groups_usersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    connect?: Enumerable<groups_usersWhereUniqueInput>
  }

  export type user_dataUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    connect?: Enumerable<user_dataWhereUniqueInput>
  }

  export type users_ingredientsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutUsersInput>, Enumerable<users_ingredientsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutUsersInput>
    createMany?: users_ingredientsCreateManyUsersInputEnvelope
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
  }

  export type users_specsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutUsersInput>, Enumerable<users_specsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutUsersInput>
    createMany?: users_specsCreateManyUsersInputEnvelope
    connect?: Enumerable<users_specsWhereUniqueInput>
  }

  export type groups_modsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_usersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type user_dataUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_dataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    set?: Enumerable<user_dataWhereUniqueInput>
    disconnect?: Enumerable<user_dataWhereUniqueInput>
    delete?: Enumerable<user_dataWhereUniqueInput>
    connect?: Enumerable<user_dataWhereUniqueInput>
    update?: Enumerable<user_dataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_dataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_dataScalarWhereInput>
  }

  export type users_ingredientsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutUsersInput>, Enumerable<users_ingredientsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<users_ingredientsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: users_ingredientsCreateManyUsersInputEnvelope
    set?: Enumerable<users_ingredientsWhereUniqueInput>
    disconnect?: Enumerable<users_ingredientsWhereUniqueInput>
    delete?: Enumerable<users_ingredientsWhereUniqueInput>
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
    update?: Enumerable<users_ingredientsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<users_ingredientsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<users_ingredientsScalarWhereInput>
  }

  export type users_specsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutUsersInput>, Enumerable<users_specsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<users_specsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: users_specsCreateManyUsersInputEnvelope
    set?: Enumerable<users_specsWhereUniqueInput>
    disconnect?: Enumerable<users_specsWhereUniqueInput>
    delete?: Enumerable<users_specsWhereUniqueInput>
    connect?: Enumerable<users_specsWhereUniqueInput>
    update?: Enumerable<users_specsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<users_specsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<users_specsScalarWhereInput>
  }

  export type groups_modsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_modsCreateWithoutUsersInput>, Enumerable<groups_modsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_modsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_modsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_modsCreateManyUsersInputEnvelope
    set?: Enumerable<groups_modsWhereUniqueInput>
    disconnect?: Enumerable<groups_modsWhereUniqueInput>
    delete?: Enumerable<groups_modsWhereUniqueInput>
    connect?: Enumerable<groups_modsWhereUniqueInput>
    update?: Enumerable<groups_modsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_modsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_modsScalarWhereInput>
  }

  export type groups_usersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<groups_usersCreateWithoutUsersInput>, Enumerable<groups_usersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<groups_usersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<groups_usersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: groups_usersCreateManyUsersInputEnvelope
    set?: Enumerable<groups_usersWhereUniqueInput>
    disconnect?: Enumerable<groups_usersWhereUniqueInput>
    delete?: Enumerable<groups_usersWhereUniqueInput>
    connect?: Enumerable<groups_usersWhereUniqueInput>
    update?: Enumerable<groups_usersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<groups_usersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<groups_usersScalarWhereInput>
  }

  export type user_dataUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<user_dataCreateWithoutUsersInput>, Enumerable<user_dataUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_dataCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_dataUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_dataCreateManyUsersInputEnvelope
    set?: Enumerable<user_dataWhereUniqueInput>
    disconnect?: Enumerable<user_dataWhereUniqueInput>
    delete?: Enumerable<user_dataWhereUniqueInput>
    connect?: Enumerable<user_dataWhereUniqueInput>
    update?: Enumerable<user_dataUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_dataUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_dataScalarWhereInput>
  }

  export type users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<users_ingredientsCreateWithoutUsersInput>, Enumerable<users_ingredientsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_ingredientsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<users_ingredientsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: users_ingredientsCreateManyUsersInputEnvelope
    set?: Enumerable<users_ingredientsWhereUniqueInput>
    disconnect?: Enumerable<users_ingredientsWhereUniqueInput>
    delete?: Enumerable<users_ingredientsWhereUniqueInput>
    connect?: Enumerable<users_ingredientsWhereUniqueInput>
    update?: Enumerable<users_ingredientsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<users_ingredientsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<users_ingredientsScalarWhereInput>
  }

  export type users_specsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<users_specsCreateWithoutUsersInput>, Enumerable<users_specsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<users_specsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<users_specsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: users_specsCreateManyUsersInputEnvelope
    set?: Enumerable<users_specsWhereUniqueInput>
    disconnect?: Enumerable<users_specsWhereUniqueInput>
    delete?: Enumerable<users_specsWhereUniqueInput>
    connect?: Enumerable<users_specsWhereUniqueInput>
    update?: Enumerable<users_specsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<users_specsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<users_specsScalarWhereInput>
  }

  export type IngredientsCreateNestedOneWithoutUsers_ingredientsInput = {
    create?: XOR<IngredientsCreateWithoutUsers_ingredientsInput, IngredientsUncheckedCreateWithoutUsers_ingredientsInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutUsers_ingredientsInput
    connect?: IngredientsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUsers_ingredientsInput = {
    create?: XOR<usersCreateWithoutUsers_ingredientsInput, usersUncheckedCreateWithoutUsers_ingredientsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_ingredientsInput
    connect?: usersWhereUniqueInput
  }

  export type IngredientsUpdateOneRequiredWithoutUsers_ingredientsNestedInput = {
    create?: XOR<IngredientsCreateWithoutUsers_ingredientsInput, IngredientsUncheckedCreateWithoutUsers_ingredientsInput>
    connectOrCreate?: IngredientsCreateOrConnectWithoutUsers_ingredientsInput
    upsert?: IngredientsUpsertWithoutUsers_ingredientsInput
    connect?: IngredientsWhereUniqueInput
    update?: XOR<IngredientsUpdateWithoutUsers_ingredientsInput, IngredientsUncheckedUpdateWithoutUsers_ingredientsInput>
  }

  export type usersUpdateOneRequiredWithoutUsers_ingredientsNestedInput = {
    create?: XOR<usersCreateWithoutUsers_ingredientsInput, usersUncheckedCreateWithoutUsers_ingredientsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_ingredientsInput
    upsert?: usersUpsertWithoutUsers_ingredientsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUsers_ingredientsInput, usersUncheckedUpdateWithoutUsers_ingredientsInput>
  }

  export type specsCreateNestedOneWithoutUsers_specsInput = {
    create?: XOR<specsCreateWithoutUsers_specsInput, specsUncheckedCreateWithoutUsers_specsInput>
    connectOrCreate?: specsCreateOrConnectWithoutUsers_specsInput
    connect?: specsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUsers_specsInput = {
    create?: XOR<usersCreateWithoutUsers_specsInput, usersUncheckedCreateWithoutUsers_specsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_specsInput
    connect?: usersWhereUniqueInput
  }

  export type specsUpdateOneRequiredWithoutUsers_specsNestedInput = {
    create?: XOR<specsCreateWithoutUsers_specsInput, specsUncheckedCreateWithoutUsers_specsInput>
    connectOrCreate?: specsCreateOrConnectWithoutUsers_specsInput
    upsert?: specsUpsertWithoutUsers_specsInput
    connect?: specsWhereUniqueInput
    update?: XOR<specsUpdateWithoutUsers_specsInput, specsUncheckedUpdateWithoutUsers_specsInput>
  }

  export type usersUpdateOneRequiredWithoutUsers_specsNestedInput = {
    create?: XOR<usersCreateWithoutUsers_specsInput, usersUncheckedCreateWithoutUsers_specsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_specsInput
    upsert?: usersUpsertWithoutUsers_specsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUsers_specsInput, usersUncheckedUpdateWithoutUsers_specsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type Groups_IngredientsCreateWithoutGroupsInput = {
    ingredients: IngredientsCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateWithoutGroupsInput = {
    ingredient_id: number
  }

  export type Groups_IngredientsCreateOrConnectWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    create: XOR<Groups_IngredientsCreateWithoutGroupsInput, Groups_IngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type Groups_IngredientsCreateManyGroupsInputEnvelope = {
    data: Enumerable<Groups_IngredientsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type groups_modsCreateWithoutGroupsInput = {
    users: usersCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateWithoutGroupsInput = {
    user_id: number
  }

  export type groups_modsCreateOrConnectWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    create: XOR<groups_modsCreateWithoutGroupsInput, groups_modsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_modsCreateManyGroupsInputEnvelope = {
    data: Enumerable<groups_modsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type groups_specsCreateWithoutGroupsInput = {
    specs: specsCreateNestedOneWithoutGroups_specsInput
  }

  export type groups_specsUncheckedCreateWithoutGroupsInput = {
    spec_id: number
  }

  export type groups_specsCreateOrConnectWithoutGroupsInput = {
    where: groups_specsWhereUniqueInput
    create: XOR<groups_specsCreateWithoutGroupsInput, groups_specsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_specsCreateManyGroupsInputEnvelope = {
    data: Enumerable<groups_specsCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type groups_usersCreateWithoutGroupsInput = {
    users: usersCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateWithoutGroupsInput = {
    user_id: number
  }

  export type groups_usersCreateOrConnectWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    create: XOR<groups_usersCreateWithoutGroupsInput, groups_usersUncheckedCreateWithoutGroupsInput>
  }

  export type groups_usersCreateManyGroupsInputEnvelope = {
    data: Enumerable<groups_usersCreateManyGroupsInput>
    skipDuplicates?: boolean
  }

  export type Groups_IngredientsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    update: XOR<Groups_IngredientsUpdateWithoutGroupsInput, Groups_IngredientsUncheckedUpdateWithoutGroupsInput>
    create: XOR<Groups_IngredientsCreateWithoutGroupsInput, Groups_IngredientsUncheckedCreateWithoutGroupsInput>
  }

  export type Groups_IngredientsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: Groups_IngredientsWhereUniqueInput
    data: XOR<Groups_IngredientsUpdateWithoutGroupsInput, Groups_IngredientsUncheckedUpdateWithoutGroupsInput>
  }

  export type Groups_IngredientsUpdateManyWithWhereWithoutGroupsInput = {
    where: Groups_IngredientsScalarWhereInput
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput>
  }

  export type Groups_IngredientsScalarWhereInput = {
    AND?: Enumerable<Groups_IngredientsScalarWhereInput>
    OR?: Enumerable<Groups_IngredientsScalarWhereInput>
    NOT?: Enumerable<Groups_IngredientsScalarWhereInput>
    group_id?: IntFilter | number
    ingredient_id?: IntFilter | number
  }

  export type groups_modsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    update: XOR<groups_modsUpdateWithoutGroupsInput, groups_modsUncheckedUpdateWithoutGroupsInput>
    create: XOR<groups_modsCreateWithoutGroupsInput, groups_modsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_modsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: groups_modsWhereUniqueInput
    data: XOR<groups_modsUpdateWithoutGroupsInput, groups_modsUncheckedUpdateWithoutGroupsInput>
  }

  export type groups_modsUpdateManyWithWhereWithoutGroupsInput = {
    where: groups_modsScalarWhereInput
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyWithoutGroups_modsInput>
  }

  export type groups_modsScalarWhereInput = {
    AND?: Enumerable<groups_modsScalarWhereInput>
    OR?: Enumerable<groups_modsScalarWhereInput>
    NOT?: Enumerable<groups_modsScalarWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
  }

  export type groups_specsUpsertWithWhereUniqueWithoutGroupsInput = {
    where: groups_specsWhereUniqueInput
    update: XOR<groups_specsUpdateWithoutGroupsInput, groups_specsUncheckedUpdateWithoutGroupsInput>
    create: XOR<groups_specsCreateWithoutGroupsInput, groups_specsUncheckedCreateWithoutGroupsInput>
  }

  export type groups_specsUpdateWithWhereUniqueWithoutGroupsInput = {
    where: groups_specsWhereUniqueInput
    data: XOR<groups_specsUpdateWithoutGroupsInput, groups_specsUncheckedUpdateWithoutGroupsInput>
  }

  export type groups_specsUpdateManyWithWhereWithoutGroupsInput = {
    where: groups_specsScalarWhereInput
    data: XOR<groups_specsUpdateManyMutationInput, groups_specsUncheckedUpdateManyWithoutGroups_specsInput>
  }

  export type groups_specsScalarWhereInput = {
    AND?: Enumerable<groups_specsScalarWhereInput>
    OR?: Enumerable<groups_specsScalarWhereInput>
    NOT?: Enumerable<groups_specsScalarWhereInput>
    group_id?: IntFilter | number
    spec_id?: IntFilter | number
  }

  export type groups_usersUpsertWithWhereUniqueWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    update: XOR<groups_usersUpdateWithoutGroupsInput, groups_usersUncheckedUpdateWithoutGroupsInput>
    create: XOR<groups_usersCreateWithoutGroupsInput, groups_usersUncheckedCreateWithoutGroupsInput>
  }

  export type groups_usersUpdateWithWhereUniqueWithoutGroupsInput = {
    where: groups_usersWhereUniqueInput
    data: XOR<groups_usersUpdateWithoutGroupsInput, groups_usersUncheckedUpdateWithoutGroupsInput>
  }

  export type groups_usersUpdateManyWithWhereWithoutGroupsInput = {
    where: groups_usersScalarWhereInput
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyWithoutGroups_usersInput>
  }

  export type groups_usersScalarWhereInput = {
    AND?: Enumerable<groups_usersScalarWhereInput>
    OR?: Enumerable<groups_usersScalarWhereInput>
    NOT?: Enumerable<groups_usersScalarWhereInput>
    user_id?: IntFilter | number
    group_id?: IntFilter | number
  }

  export type GroupsCreateWithoutGroups_ingredientsInput = {
    group_name: string
    date_created: Date | string
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_ingredientsInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_ingredientsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type IngredientsCreateWithoutGroups_ingredientsInput = {
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    quantities?: quantitiesCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsUncheckedCreateWithoutGroups_ingredientsInput = {
    id?: number
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    quantities?: quantitiesUncheckedCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsCreateOrConnectWithoutGroups_ingredientsInput = {
    where: IngredientsWhereUniqueInput
    create: XOR<IngredientsCreateWithoutGroups_ingredientsInput, IngredientsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type GroupsUpsertWithoutGroups_ingredientsInput = {
    update: XOR<GroupsUpdateWithoutGroups_ingredientsInput, GroupsUncheckedUpdateWithoutGroups_ingredientsInput>
    create: XOR<GroupsCreateWithoutGroups_ingredientsInput, GroupsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type GroupsUpdateWithoutGroups_ingredientsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type IngredientsUpsertWithoutGroups_ingredientsInput = {
    update: XOR<IngredientsUpdateWithoutGroups_ingredientsInput, IngredientsUncheckedUpdateWithoutGroups_ingredientsInput>
    create: XOR<IngredientsCreateWithoutGroups_ingredientsInput, IngredientsUncheckedCreateWithoutGroups_ingredientsInput>
  }

  export type IngredientsUpdateWithoutGroups_ingredientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    quantities?: quantitiesUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientsUncheckedUpdateWithoutGroups_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    quantities?: quantitiesUncheckedUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type GroupsCreateWithoutGroups_modsInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_modsInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_modsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
  }

  export type usersCreateWithoutGroups_modsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutUsersInput
    users_specs?: users_specsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGroups_modsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutUsersInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGroups_modsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGroups_modsInput, usersUncheckedCreateWithoutGroups_modsInput>
  }

  export type GroupsUpsertWithoutGroups_modsInput = {
    update: XOR<GroupsUpdateWithoutGroups_modsInput, GroupsUncheckedUpdateWithoutGroups_modsInput>
    create: XOR<GroupsCreateWithoutGroups_modsInput, GroupsUncheckedCreateWithoutGroups_modsInput>
  }

  export type GroupsUpdateWithoutGroups_modsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_modsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type usersUpsertWithoutGroups_modsInput = {
    update: XOR<usersUpdateWithoutGroups_modsInput, usersUncheckedUpdateWithoutGroups_modsInput>
    create: XOR<usersCreateWithoutGroups_modsInput, usersUncheckedCreateWithoutGroups_modsInput>
  }

  export type usersUpdateWithoutGroups_modsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGroups_modsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type GroupsCreateWithoutGroups_specsInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_specsInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_specsInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_specsInput, GroupsUncheckedCreateWithoutGroups_specsInput>
  }

  export type specsCreateWithoutGroups_specsInput = {
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipes?: recipesCreateNestedOneWithoutSpecsInput
    quantities?: quantitiesCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsCreateNestedManyWithoutSpecsInput
  }

  export type specsUncheckedCreateWithoutGroups_specsInput = {
    id?: number
    recipe_id?: number | null
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    quantities?: quantitiesUncheckedCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutSpecsInput
  }

  export type specsCreateOrConnectWithoutGroups_specsInput = {
    where: specsWhereUniqueInput
    create: XOR<specsCreateWithoutGroups_specsInput, specsUncheckedCreateWithoutGroups_specsInput>
  }

  export type GroupsUpsertWithoutGroups_specsInput = {
    update: XOR<GroupsUpdateWithoutGroups_specsInput, GroupsUncheckedUpdateWithoutGroups_specsInput>
    create: XOR<GroupsCreateWithoutGroups_specsInput, GroupsUncheckedCreateWithoutGroups_specsInput>
  }

  export type GroupsUpdateWithoutGroups_specsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_specsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type specsUpsertWithoutGroups_specsInput = {
    update: XOR<specsUpdateWithoutGroups_specsInput, specsUncheckedUpdateWithoutGroups_specsInput>
    create: XOR<specsCreateWithoutGroups_specsInput, specsUncheckedCreateWithoutGroups_specsInput>
  }

  export type specsUpdateWithoutGroups_specsInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: recipesUpdateOneWithoutSpecsNestedInput
    quantities?: quantitiesUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateWithoutGroups_specsInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipe_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    quantities?: quantitiesUncheckedUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutSpecsNestedInput
  }

  export type GroupsCreateWithoutGroups_usersInput = {
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsCreateNestedManyWithoutGroupsInput
  }

  export type GroupsUncheckedCreateWithoutGroups_usersInput = {
    id?: number
    group_name: string
    date_created: Date | string
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutGroupsInput
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutGroupsInput
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupsCreateOrConnectWithoutGroups_usersInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
  }

  export type usersCreateWithoutGroups_usersInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutUsersInput
    users_specs?: users_specsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGroups_usersInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutUsersInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGroups_usersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGroups_usersInput, usersUncheckedCreateWithoutGroups_usersInput>
  }

  export type GroupsUpsertWithoutGroups_usersInput = {
    update: XOR<GroupsUpdateWithoutGroups_usersInput, GroupsUncheckedUpdateWithoutGroups_usersInput>
    create: XOR<GroupsCreateWithoutGroups_usersInput, GroupsUncheckedCreateWithoutGroups_usersInput>
  }

  export type GroupsUpdateWithoutGroups_usersInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateWithoutGroups_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_mods?: groups_modsUncheckedUpdateManyWithoutGroupsNestedInput
    groups_specs?: groups_specsUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type usersUpsertWithoutGroups_usersInput = {
    update: XOR<usersUpdateWithoutGroups_usersInput, usersUncheckedUpdateWithoutGroups_usersInput>
    create: XOR<usersCreateWithoutGroups_usersInput, usersUncheckedCreateWithoutGroups_usersInput>
  }

  export type usersUpdateWithoutGroups_usersInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGroups_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type Groups_IngredientsCreateWithoutIngredientsInput = {
    groups: GroupsCreateNestedOneWithoutGroups_ingredientsInput
  }

  export type Groups_IngredientsUncheckedCreateWithoutIngredientsInput = {
    group_id: number
  }

  export type Groups_IngredientsCreateOrConnectWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    create: XOR<Groups_IngredientsCreateWithoutIngredientsInput, Groups_IngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type Groups_IngredientsCreateManyIngredientsInputEnvelope = {
    data: Enumerable<Groups_IngredientsCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type quantitiesCreateWithoutIngredientsInput = {
    amount?: number | null
    unit?: string | null
    specs?: specsCreateNestedOneWithoutQuantitiesInput
  }

  export type quantitiesUncheckedCreateWithoutIngredientsInput = {
    id?: number
    spec_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type quantitiesCreateOrConnectWithoutIngredientsInput = {
    where: quantitiesWhereUniqueInput
    create: XOR<quantitiesCreateWithoutIngredientsInput, quantitiesUncheckedCreateWithoutIngredientsInput>
  }

  export type quantitiesCreateManyIngredientsInputEnvelope = {
    data: Enumerable<quantitiesCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type users_ingredientsCreateWithoutIngredientsInput = {
    users: usersCreateNestedOneWithoutUsers_ingredientsInput
  }

  export type users_ingredientsUncheckedCreateWithoutIngredientsInput = {
    user_id: number
  }

  export type users_ingredientsCreateOrConnectWithoutIngredientsInput = {
    where: users_ingredientsWhereUniqueInput
    create: XOR<users_ingredientsCreateWithoutIngredientsInput, users_ingredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type users_ingredientsCreateManyIngredientsInputEnvelope = {
    data: Enumerable<users_ingredientsCreateManyIngredientsInput>
    skipDuplicates?: boolean
  }

  export type Groups_IngredientsUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    update: XOR<Groups_IngredientsUpdateWithoutIngredientsInput, Groups_IngredientsUncheckedUpdateWithoutIngredientsInput>
    create: XOR<Groups_IngredientsCreateWithoutIngredientsInput, Groups_IngredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type Groups_IngredientsUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: Groups_IngredientsWhereUniqueInput
    data: XOR<Groups_IngredientsUpdateWithoutIngredientsInput, Groups_IngredientsUncheckedUpdateWithoutIngredientsInput>
  }

  export type Groups_IngredientsUpdateManyWithWhereWithoutIngredientsInput = {
    where: Groups_IngredientsScalarWhereInput
    data: XOR<Groups_IngredientsUpdateManyMutationInput, Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput>
  }

  export type quantitiesUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: quantitiesWhereUniqueInput
    update: XOR<quantitiesUpdateWithoutIngredientsInput, quantitiesUncheckedUpdateWithoutIngredientsInput>
    create: XOR<quantitiesCreateWithoutIngredientsInput, quantitiesUncheckedCreateWithoutIngredientsInput>
  }

  export type quantitiesUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: quantitiesWhereUniqueInput
    data: XOR<quantitiesUpdateWithoutIngredientsInput, quantitiesUncheckedUpdateWithoutIngredientsInput>
  }

  export type quantitiesUpdateManyWithWhereWithoutIngredientsInput = {
    where: quantitiesScalarWhereInput
    data: XOR<quantitiesUpdateManyMutationInput, quantitiesUncheckedUpdateManyWithoutQuantitiesInput>
  }

  export type quantitiesScalarWhereInput = {
    AND?: Enumerable<quantitiesScalarWhereInput>
    OR?: Enumerable<quantitiesScalarWhereInput>
    NOT?: Enumerable<quantitiesScalarWhereInput>
    id?: IntFilter | number
    spec_id?: IntNullableFilter | number | null
    ingredient_id?: IntNullableFilter | number | null
    amount?: FloatNullableFilter | number | null
    unit?: StringNullableFilter | string | null
  }

  export type users_ingredientsUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: users_ingredientsWhereUniqueInput
    update: XOR<users_ingredientsUpdateWithoutIngredientsInput, users_ingredientsUncheckedUpdateWithoutIngredientsInput>
    create: XOR<users_ingredientsCreateWithoutIngredientsInput, users_ingredientsUncheckedCreateWithoutIngredientsInput>
  }

  export type users_ingredientsUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: users_ingredientsWhereUniqueInput
    data: XOR<users_ingredientsUpdateWithoutIngredientsInput, users_ingredientsUncheckedUpdateWithoutIngredientsInput>
  }

  export type users_ingredientsUpdateManyWithWhereWithoutIngredientsInput = {
    where: users_ingredientsScalarWhereInput
    data: XOR<users_ingredientsUpdateManyMutationInput, users_ingredientsUncheckedUpdateManyWithoutUsers_ingredientsInput>
  }

  export type users_ingredientsScalarWhereInput = {
    AND?: Enumerable<users_ingredientsScalarWhereInput>
    OR?: Enumerable<users_ingredientsScalarWhereInput>
    NOT?: Enumerable<users_ingredientsScalarWhereInput>
    user_id?: IntFilter | number
    ingredient_id?: IntFilter | number
  }

  export type IngredientsCreateWithoutQuantitiesInput = {
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsUncheckedCreateWithoutQuantitiesInput = {
    id?: number
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsCreateOrConnectWithoutQuantitiesInput = {
    where: IngredientsWhereUniqueInput
    create: XOR<IngredientsCreateWithoutQuantitiesInput, IngredientsUncheckedCreateWithoutQuantitiesInput>
  }

  export type specsCreateWithoutQuantitiesInput = {
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipes?: recipesCreateNestedOneWithoutSpecsInput
    groups_specs?: groups_specsCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsCreateNestedManyWithoutSpecsInput
  }

  export type specsUncheckedCreateWithoutQuantitiesInput = {
    id?: number
    recipe_id?: number | null
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutSpecsInput
  }

  export type specsCreateOrConnectWithoutQuantitiesInput = {
    where: specsWhereUniqueInput
    create: XOR<specsCreateWithoutQuantitiesInput, specsUncheckedCreateWithoutQuantitiesInput>
  }

  export type IngredientsUpsertWithoutQuantitiesInput = {
    update: XOR<IngredientsUpdateWithoutQuantitiesInput, IngredientsUncheckedUpdateWithoutQuantitiesInput>
    create: XOR<IngredientsCreateWithoutQuantitiesInput, IngredientsUncheckedCreateWithoutQuantitiesInput>
  }

  export type IngredientsUpdateWithoutQuantitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientsUncheckedUpdateWithoutQuantitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type specsUpsertWithoutQuantitiesInput = {
    update: XOR<specsUpdateWithoutQuantitiesInput, specsUncheckedUpdateWithoutQuantitiesInput>
    create: XOR<specsCreateWithoutQuantitiesInput, specsUncheckedCreateWithoutQuantitiesInput>
  }

  export type specsUpdateWithoutQuantitiesInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: recipesUpdateOneWithoutSpecsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateWithoutQuantitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipe_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groups_specs?: groups_specsUncheckedUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutSpecsNestedInput
  }

  export type specsCreateWithoutRecipesInput = {
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groups_specs?: groups_specsCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsCreateNestedManyWithoutSpecsInput
  }

  export type specsUncheckedCreateWithoutRecipesInput = {
    id?: number
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesUncheckedCreateNestedManyWithoutSpecsInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutSpecsInput
  }

  export type specsCreateOrConnectWithoutRecipesInput = {
    where: specsWhereUniqueInput
    create: XOR<specsCreateWithoutRecipesInput, specsUncheckedCreateWithoutRecipesInput>
  }

  export type specsCreateManyRecipesInputEnvelope = {
    data: Enumerable<specsCreateManyRecipesInput>
    skipDuplicates?: boolean
  }

  export type specsUpsertWithWhereUniqueWithoutRecipesInput = {
    where: specsWhereUniqueInput
    update: XOR<specsUpdateWithoutRecipesInput, specsUncheckedUpdateWithoutRecipesInput>
    create: XOR<specsCreateWithoutRecipesInput, specsUncheckedCreateWithoutRecipesInput>
  }

  export type specsUpdateWithWhereUniqueWithoutRecipesInput = {
    where: specsWhereUniqueInput
    data: XOR<specsUpdateWithoutRecipesInput, specsUncheckedUpdateWithoutRecipesInput>
  }

  export type specsUpdateManyWithWhereWithoutRecipesInput = {
    where: specsScalarWhereInput
    data: XOR<specsUpdateManyMutationInput, specsUncheckedUpdateManyWithoutSpecsInput>
  }

  export type specsScalarWhereInput = {
    AND?: Enumerable<specsScalarWhereInput>
    OR?: Enumerable<specsScalarWhereInput>
    NOT?: Enumerable<specsScalarWhereInput>
    id?: IntFilter | number
    recipe_id?: IntNullableFilter | number | null
    created_by?: StringFilter | string
    instructions?: StringNullableFilter | string | null
    glassware?: StringNullableFilter | string | null
    ice?: StringNullableFilter | string | null
  }

  export type recipesCreateWithoutSpecsInput = {
    name: string
    created_by: string
    history?: string | null
  }

  export type recipesUncheckedCreateWithoutSpecsInput = {
    id?: number
    name: string
    created_by: string
    history?: string | null
  }

  export type recipesCreateOrConnectWithoutSpecsInput = {
    where: recipesWhereUniqueInput
    create: XOR<recipesCreateWithoutSpecsInput, recipesUncheckedCreateWithoutSpecsInput>
  }

  export type groups_specsCreateWithoutSpecsInput = {
    groups: GroupsCreateNestedOneWithoutGroups_specsInput
  }

  export type groups_specsUncheckedCreateWithoutSpecsInput = {
    group_id: number
  }

  export type groups_specsCreateOrConnectWithoutSpecsInput = {
    where: groups_specsWhereUniqueInput
    create: XOR<groups_specsCreateWithoutSpecsInput, groups_specsUncheckedCreateWithoutSpecsInput>
  }

  export type groups_specsCreateManySpecsInputEnvelope = {
    data: Enumerable<groups_specsCreateManySpecsInput>
    skipDuplicates?: boolean
  }

  export type quantitiesCreateWithoutSpecsInput = {
    amount?: number | null
    unit?: string | null
    ingredients?: IngredientsCreateNestedOneWithoutQuantitiesInput
  }

  export type quantitiesUncheckedCreateWithoutSpecsInput = {
    id?: number
    ingredient_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type quantitiesCreateOrConnectWithoutSpecsInput = {
    where: quantitiesWhereUniqueInput
    create: XOR<quantitiesCreateWithoutSpecsInput, quantitiesUncheckedCreateWithoutSpecsInput>
  }

  export type quantitiesCreateManySpecsInputEnvelope = {
    data: Enumerable<quantitiesCreateManySpecsInput>
    skipDuplicates?: boolean
  }

  export type users_specsCreateWithoutSpecsInput = {
    users: usersCreateNestedOneWithoutUsers_specsInput
  }

  export type users_specsUncheckedCreateWithoutSpecsInput = {
    user_id: number
  }

  export type users_specsCreateOrConnectWithoutSpecsInput = {
    where: users_specsWhereUniqueInput
    create: XOR<users_specsCreateWithoutSpecsInput, users_specsUncheckedCreateWithoutSpecsInput>
  }

  export type users_specsCreateManySpecsInputEnvelope = {
    data: Enumerable<users_specsCreateManySpecsInput>
    skipDuplicates?: boolean
  }

  export type recipesUpsertWithoutSpecsInput = {
    update: XOR<recipesUpdateWithoutSpecsInput, recipesUncheckedUpdateWithoutSpecsInput>
    create: XOR<recipesCreateWithoutSpecsInput, recipesUncheckedCreateWithoutSpecsInput>
  }

  export type recipesUpdateWithoutSpecsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type recipesUncheckedUpdateWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    history?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type groups_specsUpsertWithWhereUniqueWithoutSpecsInput = {
    where: groups_specsWhereUniqueInput
    update: XOR<groups_specsUpdateWithoutSpecsInput, groups_specsUncheckedUpdateWithoutSpecsInput>
    create: XOR<groups_specsCreateWithoutSpecsInput, groups_specsUncheckedCreateWithoutSpecsInput>
  }

  export type groups_specsUpdateWithWhereUniqueWithoutSpecsInput = {
    where: groups_specsWhereUniqueInput
    data: XOR<groups_specsUpdateWithoutSpecsInput, groups_specsUncheckedUpdateWithoutSpecsInput>
  }

  export type groups_specsUpdateManyWithWhereWithoutSpecsInput = {
    where: groups_specsScalarWhereInput
    data: XOR<groups_specsUpdateManyMutationInput, groups_specsUncheckedUpdateManyWithoutGroups_specsInput>
  }

  export type quantitiesUpsertWithWhereUniqueWithoutSpecsInput = {
    where: quantitiesWhereUniqueInput
    update: XOR<quantitiesUpdateWithoutSpecsInput, quantitiesUncheckedUpdateWithoutSpecsInput>
    create: XOR<quantitiesCreateWithoutSpecsInput, quantitiesUncheckedCreateWithoutSpecsInput>
  }

  export type quantitiesUpdateWithWhereUniqueWithoutSpecsInput = {
    where: quantitiesWhereUniqueInput
    data: XOR<quantitiesUpdateWithoutSpecsInput, quantitiesUncheckedUpdateWithoutSpecsInput>
  }

  export type quantitiesUpdateManyWithWhereWithoutSpecsInput = {
    where: quantitiesScalarWhereInput
    data: XOR<quantitiesUpdateManyMutationInput, quantitiesUncheckedUpdateManyWithoutQuantitiesInput>
  }

  export type users_specsUpsertWithWhereUniqueWithoutSpecsInput = {
    where: users_specsWhereUniqueInput
    update: XOR<users_specsUpdateWithoutSpecsInput, users_specsUncheckedUpdateWithoutSpecsInput>
    create: XOR<users_specsCreateWithoutSpecsInput, users_specsUncheckedCreateWithoutSpecsInput>
  }

  export type users_specsUpdateWithWhereUniqueWithoutSpecsInput = {
    where: users_specsWhereUniqueInput
    data: XOR<users_specsUpdateWithoutSpecsInput, users_specsUncheckedUpdateWithoutSpecsInput>
  }

  export type users_specsUpdateManyWithWhereWithoutSpecsInput = {
    where: users_specsScalarWhereInput
    data: XOR<users_specsUpdateManyMutationInput, users_specsUncheckedUpdateManyWithoutUsers_specsInput>
  }

  export type users_specsScalarWhereInput = {
    AND?: Enumerable<users_specsScalarWhereInput>
    OR?: Enumerable<users_specsScalarWhereInput>
    NOT?: Enumerable<users_specsScalarWhereInput>
    user_id?: IntFilter | number
    spec_id?: IntFilter | number
  }

  export type usersCreateWithoutUser_dataInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutUsersInput
    users_specs?: users_specsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_dataInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutUsersInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_dataInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_dataInput, usersUncheckedCreateWithoutUser_dataInput>
  }

  export type usersUpsertWithoutUser_dataInput = {
    update: XOR<usersUpdateWithoutUser_dataInput, usersUncheckedUpdateWithoutUser_dataInput>
    create: XOR<usersCreateWithoutUser_dataInput, usersUncheckedCreateWithoutUser_dataInput>
  }

  export type usersUpdateWithoutUser_dataInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUser_dataInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type groups_modsCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroups_modsInput
  }

  export type groups_modsUncheckedCreateWithoutUsersInput = {
    group_id: number
  }

  export type groups_modsCreateOrConnectWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    create: XOR<groups_modsCreateWithoutUsersInput, groups_modsUncheckedCreateWithoutUsersInput>
  }

  export type groups_modsCreateManyUsersInputEnvelope = {
    data: Enumerable<groups_modsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type groups_usersCreateWithoutUsersInput = {
    groups: GroupsCreateNestedOneWithoutGroups_usersInput
  }

  export type groups_usersUncheckedCreateWithoutUsersInput = {
    group_id: number
  }

  export type groups_usersCreateOrConnectWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    create: XOR<groups_usersCreateWithoutUsersInput, groups_usersUncheckedCreateWithoutUsersInput>
  }

  export type groups_usersCreateManyUsersInputEnvelope = {
    data: Enumerable<groups_usersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type user_dataCreateWithoutUsersInput = {
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataUncheckedCreateWithoutUsersInput = {
    id?: number
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type user_dataCreateOrConnectWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    create: XOR<user_dataCreateWithoutUsersInput, user_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_dataCreateManyUsersInputEnvelope = {
    data: Enumerable<user_dataCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type users_ingredientsCreateWithoutUsersInput = {
    ingredients: IngredientsCreateNestedOneWithoutUsers_ingredientsInput
  }

  export type users_ingredientsUncheckedCreateWithoutUsersInput = {
    ingredient_id: number
  }

  export type users_ingredientsCreateOrConnectWithoutUsersInput = {
    where: users_ingredientsWhereUniqueInput
    create: XOR<users_ingredientsCreateWithoutUsersInput, users_ingredientsUncheckedCreateWithoutUsersInput>
  }

  export type users_ingredientsCreateManyUsersInputEnvelope = {
    data: Enumerable<users_ingredientsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type users_specsCreateWithoutUsersInput = {
    specs: specsCreateNestedOneWithoutUsers_specsInput
  }

  export type users_specsUncheckedCreateWithoutUsersInput = {
    spec_id: number
  }

  export type users_specsCreateOrConnectWithoutUsersInput = {
    where: users_specsWhereUniqueInput
    create: XOR<users_specsCreateWithoutUsersInput, users_specsUncheckedCreateWithoutUsersInput>
  }

  export type users_specsCreateManyUsersInputEnvelope = {
    data: Enumerable<users_specsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type groups_modsUpsertWithWhereUniqueWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    update: XOR<groups_modsUpdateWithoutUsersInput, groups_modsUncheckedUpdateWithoutUsersInput>
    create: XOR<groups_modsCreateWithoutUsersInput, groups_modsUncheckedCreateWithoutUsersInput>
  }

  export type groups_modsUpdateWithWhereUniqueWithoutUsersInput = {
    where: groups_modsWhereUniqueInput
    data: XOR<groups_modsUpdateWithoutUsersInput, groups_modsUncheckedUpdateWithoutUsersInput>
  }

  export type groups_modsUpdateManyWithWhereWithoutUsersInput = {
    where: groups_modsScalarWhereInput
    data: XOR<groups_modsUpdateManyMutationInput, groups_modsUncheckedUpdateManyWithoutGroups_modsInput>
  }

  export type groups_usersUpsertWithWhereUniqueWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    update: XOR<groups_usersUpdateWithoutUsersInput, groups_usersUncheckedUpdateWithoutUsersInput>
    create: XOR<groups_usersCreateWithoutUsersInput, groups_usersUncheckedCreateWithoutUsersInput>
  }

  export type groups_usersUpdateWithWhereUniqueWithoutUsersInput = {
    where: groups_usersWhereUniqueInput
    data: XOR<groups_usersUpdateWithoutUsersInput, groups_usersUncheckedUpdateWithoutUsersInput>
  }

  export type groups_usersUpdateManyWithWhereWithoutUsersInput = {
    where: groups_usersScalarWhereInput
    data: XOR<groups_usersUpdateManyMutationInput, groups_usersUncheckedUpdateManyWithoutGroups_usersInput>
  }

  export type user_dataUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    update: XOR<user_dataUpdateWithoutUsersInput, user_dataUncheckedUpdateWithoutUsersInput>
    create: XOR<user_dataCreateWithoutUsersInput, user_dataUncheckedCreateWithoutUsersInput>
  }

  export type user_dataUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_dataWhereUniqueInput
    data: XOR<user_dataUpdateWithoutUsersInput, user_dataUncheckedUpdateWithoutUsersInput>
  }

  export type user_dataUpdateManyWithWhereWithoutUsersInput = {
    where: user_dataScalarWhereInput
    data: XOR<user_dataUpdateManyMutationInput, user_dataUncheckedUpdateManyWithoutUser_dataInput>
  }

  export type user_dataScalarWhereInput = {
    AND?: Enumerable<user_dataScalarWhereInput>
    OR?: Enumerable<user_dataScalarWhereInput>
    NOT?: Enumerable<user_dataScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    user_bio?: StringNullableFilter | string | null
    work_place?: StringNullableFilter | string | null
    profile_picture?: StringNullableFilter | string | null
  }

  export type users_ingredientsUpsertWithWhereUniqueWithoutUsersInput = {
    where: users_ingredientsWhereUniqueInput
    update: XOR<users_ingredientsUpdateWithoutUsersInput, users_ingredientsUncheckedUpdateWithoutUsersInput>
    create: XOR<users_ingredientsCreateWithoutUsersInput, users_ingredientsUncheckedCreateWithoutUsersInput>
  }

  export type users_ingredientsUpdateWithWhereUniqueWithoutUsersInput = {
    where: users_ingredientsWhereUniqueInput
    data: XOR<users_ingredientsUpdateWithoutUsersInput, users_ingredientsUncheckedUpdateWithoutUsersInput>
  }

  export type users_ingredientsUpdateManyWithWhereWithoutUsersInput = {
    where: users_ingredientsScalarWhereInput
    data: XOR<users_ingredientsUpdateManyMutationInput, users_ingredientsUncheckedUpdateManyWithoutUsers_ingredientsInput>
  }

  export type users_specsUpsertWithWhereUniqueWithoutUsersInput = {
    where: users_specsWhereUniqueInput
    update: XOR<users_specsUpdateWithoutUsersInput, users_specsUncheckedUpdateWithoutUsersInput>
    create: XOR<users_specsCreateWithoutUsersInput, users_specsUncheckedCreateWithoutUsersInput>
  }

  export type users_specsUpdateWithWhereUniqueWithoutUsersInput = {
    where: users_specsWhereUniqueInput
    data: XOR<users_specsUpdateWithoutUsersInput, users_specsUncheckedUpdateWithoutUsersInput>
  }

  export type users_specsUpdateManyWithWhereWithoutUsersInput = {
    where: users_specsScalarWhereInput
    data: XOR<users_specsUpdateManyMutationInput, users_specsUncheckedUpdateManyWithoutUsers_specsInput>
  }

  export type IngredientsCreateWithoutUsers_ingredientsInput = {
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsCreateNestedManyWithoutIngredientsInput
    quantities?: quantitiesCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsUncheckedCreateWithoutUsers_ingredientsInput = {
    id?: number
    name: string
    amount?: number | null
    unit?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    source?: string | null
    groups_ingredients?: Groups_IngredientsUncheckedCreateNestedManyWithoutIngredientsInput
    quantities?: quantitiesUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientsCreateOrConnectWithoutUsers_ingredientsInput = {
    where: IngredientsWhereUniqueInput
    create: XOR<IngredientsCreateWithoutUsers_ingredientsInput, IngredientsUncheckedCreateWithoutUsers_ingredientsInput>
  }

  export type usersCreateWithoutUsers_ingredientsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    users_specs?: users_specsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUsers_ingredientsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    users_specs?: users_specsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUsers_ingredientsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsers_ingredientsInput, usersUncheckedCreateWithoutUsers_ingredientsInput>
  }

  export type IngredientsUpsertWithoutUsers_ingredientsInput = {
    update: XOR<IngredientsUpdateWithoutUsers_ingredientsInput, IngredientsUncheckedUpdateWithoutUsers_ingredientsInput>
    create: XOR<IngredientsCreateWithoutUsers_ingredientsInput, IngredientsUncheckedCreateWithoutUsers_ingredientsInput>
  }

  export type IngredientsUpdateWithoutUsers_ingredientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUpdateManyWithoutIngredientsNestedInput
    quantities?: quantitiesUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientsUncheckedUpdateWithoutUsers_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amount?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    groups_ingredients?: Groups_IngredientsUncheckedUpdateManyWithoutIngredientsNestedInput
    quantities?: quantitiesUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type usersUpsertWithoutUsers_ingredientsInput = {
    update: XOR<usersUpdateWithoutUsers_ingredientsInput, usersUncheckedUpdateWithoutUsers_ingredientsInput>
    create: XOR<usersCreateWithoutUsers_ingredientsInput, usersUncheckedCreateWithoutUsers_ingredientsInput>
  }

  export type usersUpdateWithoutUsers_ingredientsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUsers_ingredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type specsCreateWithoutUsers_specsInput = {
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    recipes?: recipesCreateNestedOneWithoutSpecsInput
    groups_specs?: groups_specsCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesCreateNestedManyWithoutSpecsInput
  }

  export type specsUncheckedCreateWithoutUsers_specsInput = {
    id?: number
    recipe_id?: number | null
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
    groups_specs?: groups_specsUncheckedCreateNestedManyWithoutSpecsInput
    quantities?: quantitiesUncheckedCreateNestedManyWithoutSpecsInput
  }

  export type specsCreateOrConnectWithoutUsers_specsInput = {
    where: specsWhereUniqueInput
    create: XOR<specsCreateWithoutUsers_specsInput, specsUncheckedCreateWithoutUsers_specsInput>
  }

  export type usersCreateWithoutUsers_specsInput = {
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersCreateNestedManyWithoutUsersInput
    user_data?: user_dataCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUsers_specsInput = {
    id?: number
    user_name: string
    first_name?: string | null
    last_name?: string | null
    date_joined?: Date | string
    email: string
    password: string
    groups_mods?: groups_modsUncheckedCreateNestedManyWithoutUsersInput
    groups_users?: groups_usersUncheckedCreateNestedManyWithoutUsersInput
    user_data?: user_dataUncheckedCreateNestedManyWithoutUsersInput
    users_ingredients?: users_ingredientsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUsers_specsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsers_specsInput, usersUncheckedCreateWithoutUsers_specsInput>
  }

  export type specsUpsertWithoutUsers_specsInput = {
    update: XOR<specsUpdateWithoutUsers_specsInput, specsUncheckedUpdateWithoutUsers_specsInput>
    create: XOR<specsCreateWithoutUsers_specsInput, specsUncheckedCreateWithoutUsers_specsInput>
  }

  export type specsUpdateWithoutUsers_specsInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: recipesUpdateOneWithoutSpecsNestedInput
    groups_specs?: groups_specsUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateWithoutUsers_specsInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipe_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groups_specs?: groups_specsUncheckedUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUncheckedUpdateManyWithoutSpecsNestedInput
  }

  export type usersUpsertWithoutUsers_specsInput = {
    update: XOR<usersUpdateWithoutUsers_specsInput, usersUncheckedUpdateWithoutUsers_specsInput>
    create: XOR<usersCreateWithoutUsers_specsInput, usersUncheckedCreateWithoutUsers_specsInput>
  }

  export type usersUpdateWithoutUsers_specsInput = {
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUsers_specsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_name?: StringFieldUpdateOperationsInput | string
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    groups_mods?: groups_modsUncheckedUpdateManyWithoutUsersNestedInput
    groups_users?: groups_usersUncheckedUpdateManyWithoutUsersNestedInput
    user_data?: user_dataUncheckedUpdateManyWithoutUsersNestedInput
    users_ingredients?: users_ingredientsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type Groups_IngredientsCreateManyGroupsInput = {
    ingredient_id: number
  }

  export type groups_modsCreateManyGroupsInput = {
    user_id: number
  }

  export type groups_specsCreateManyGroupsInput = {
    spec_id: number
  }

  export type groups_usersCreateManyGroupsInput = {
    user_id: number
  }

  export type Groups_IngredientsUpdateWithoutGroupsInput = {
    ingredients?: IngredientsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateWithoutGroupsInput = {
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsUncheckedUpdateManyWithoutGroups_ingredientsInput = {
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsUpdateWithoutGroupsInput = {
    users?: usersUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateWithoutGroupsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsUncheckedUpdateManyWithoutGroups_modsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_specsUpdateWithoutGroupsInput = {
    specs?: specsUpdateOneRequiredWithoutGroups_specsNestedInput
  }

  export type groups_specsUncheckedUpdateWithoutGroupsInput = {
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_specsUncheckedUpdateManyWithoutGroups_specsInput = {
    spec_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUpdateWithoutGroupsInput = {
    users?: usersUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateWithoutGroupsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUncheckedUpdateManyWithoutGroups_usersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type Groups_IngredientsCreateManyIngredientsInput = {
    group_id: number
  }

  export type quantitiesCreateManyIngredientsInput = {
    id?: number
    spec_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type users_ingredientsCreateManyIngredientsInput = {
    user_id: number
  }

  export type Groups_IngredientsUpdateWithoutIngredientsInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_ingredientsNestedInput
  }

  export type Groups_IngredientsUncheckedUpdateWithoutIngredientsInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type quantitiesUpdateWithoutIngredientsInput = {
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    specs?: specsUpdateOneWithoutQuantitiesNestedInput
  }

  export type quantitiesUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec_id?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type quantitiesUncheckedUpdateManyWithoutQuantitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    spec_id?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type users_ingredientsUpdateWithoutIngredientsInput = {
    users?: usersUpdateOneRequiredWithoutUsers_ingredientsNestedInput
  }

  export type users_ingredientsUncheckedUpdateWithoutIngredientsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_ingredientsUncheckedUpdateManyWithoutUsers_ingredientsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type specsCreateManyRecipesInput = {
    id?: number
    created_by: string
    instructions?: string | null
    glassware?: string | null
    ice?: string | null
  }

  export type specsUpdateWithoutRecipesInput = {
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groups_specs?: groups_specsUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateWithoutRecipesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
    groups_specs?: groups_specsUncheckedUpdateManyWithoutSpecsNestedInput
    quantities?: quantitiesUncheckedUpdateManyWithoutSpecsNestedInput
    users_specs?: users_specsUncheckedUpdateManyWithoutSpecsNestedInput
  }

  export type specsUncheckedUpdateManyWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    glassware?: NullableStringFieldUpdateOperationsInput | string | null
    ice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type groups_specsCreateManySpecsInput = {
    group_id: number
  }

  export type quantitiesCreateManySpecsInput = {
    id?: number
    ingredient_id?: number | null
    amount?: number | null
    unit?: string | null
  }

  export type users_specsCreateManySpecsInput = {
    user_id: number
  }

  export type groups_specsUpdateWithoutSpecsInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_specsNestedInput
  }

  export type groups_specsUncheckedUpdateWithoutSpecsInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type quantitiesUpdateWithoutSpecsInput = {
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: IngredientsUpdateOneWithoutQuantitiesNestedInput
  }

  export type quantitiesUncheckedUpdateWithoutSpecsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ingredient_id?: NullableIntFieldUpdateOperationsInput | number | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    unit?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type users_specsUpdateWithoutSpecsInput = {
    users?: usersUpdateOneRequiredWithoutUsers_specsNestedInput
  }

  export type users_specsUncheckedUpdateWithoutSpecsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_specsUncheckedUpdateManyWithoutUsers_specsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_modsCreateManyUsersInput = {
    group_id: number
  }

  export type groups_usersCreateManyUsersInput = {
    group_id: number
  }

  export type user_dataCreateManyUsersInput = {
    id?: number
    user_bio?: string | null
    work_place?: string | null
    profile_picture?: string | null
  }

  export type users_ingredientsCreateManyUsersInput = {
    ingredient_id: number
  }

  export type users_specsCreateManyUsersInput = {
    spec_id: number
  }

  export type groups_modsUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_modsNestedInput
  }

  export type groups_modsUncheckedUpdateWithoutUsersInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type groups_usersUpdateWithoutUsersInput = {
    groups?: GroupsUpdateOneRequiredWithoutGroups_usersNestedInput
  }

  export type groups_usersUncheckedUpdateWithoutUsersInput = {
    group_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_dataUpdateWithoutUsersInput = {
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_dataUncheckedUpdateManyWithoutUser_dataInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_bio?: NullableStringFieldUpdateOperationsInput | string | null
    work_place?: NullableStringFieldUpdateOperationsInput | string | null
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type users_ingredientsUpdateWithoutUsersInput = {
    ingredients?: IngredientsUpdateOneRequiredWithoutUsers_ingredientsNestedInput
  }

  export type users_ingredientsUncheckedUpdateWithoutUsersInput = {
    ingredient_id?: IntFieldUpdateOperationsInput | number
  }

  export type users_specsUpdateWithoutUsersInput = {
    specs?: specsUpdateOneRequiredWithoutUsers_specsNestedInput
  }

  export type users_specsUncheckedUpdateWithoutUsersInput = {
    spec_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}