generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Groups {
  id                 Int                  @id @default(autoincrement())
  group_name         String               @db.VarChar(255)
  date_created       DateTime             @db.Date
  groups_ingredients Groups_Ingredients[]
  groups_mods        groups_mods[]
  group_version      Group_Version[]
  groups_users       groups_users[]
}

model Groups_Ingredients {
  group_id      Int
  ingredient_id Int
  groups        Groups     @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ingredients   Ingredient @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([group_id, ingredient_id])
}

model groups_mods {
  user_id  Int
  group_id Int
  groups   Groups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    Users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, group_id])
}

model Group_Version {
  groupId   Int
  versionId Int
  groups    Groups  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version   Version @relation(fields: [versionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupId, versionId])
}

model groups_users {
  user_id  Int
  group_id Int
  groups   Groups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    Users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, group_id])
}

model Ingredient {
  id                 Int                  @id @default(autoincrement())
  date_created       DateTime             @default(now())
  name               String               @db.VarChar(255)
  amount             Int?
  unit               String?              @db.VarChar(50)
  price              Decimal?             @db.Money
  source             String?              @db.VarChar(50)
  postedBy           Users?               @relation(fields: [postedById], references: [id])
  postedById         Int?
  groups_ingredients Groups_Ingredients[]
  spec               Spec[]
  user_ingredient    User_Ingredient[]
}

model Spec {
  id           Int         @id @default(autoincrement())
  ingredientId Int?
  order        Int?
  amount       Float?      @db.Real
  unit         String?     @db.VarChar(50)
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version      Version?    @relation(fields: [versionId], references: [id])
  versionId    Int?
  postedBy     Users?      @relation(fields: [postedById], references: [id])
  postedById   Int?
}

model Recipe {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  name       String    @db.VarChar(255)
  origin     String    @db.VarChar(255)
  history    String?
  postedBy   Users?    @relation(fields: [postedById], references: [id])
  postedById Int?
  version    Version[]
}

model Version {
  id            Int             @id @default(autoincrement())
  versionName   String
  postedBy      Users?          @relation(fields: [postedById], references: [id])
  postedById    Int?
  instructions  String?
  glassware     String?         @db.VarChar(50)
  ice           String?         @db.VarChar(25)
  group_version Group_Version[]
  user_version  UserVersion[]
  recipe        Recipe?         @relation(fields: [recipeId], references: [id])
  recipeId      Int?
  specs         Spec[]
}

model user_data {
  id              Int     @id @default(autoincrement())
  user_id         Int?
  user_bio        String?
  work_place      String? @db.VarChar(50)
  profile_picture String? @db.VarChar(255)
  users           Users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id              Int               @id @default(autoincrement())
  user_name       String            @db.VarChar(255)
  first_name      String?           @db.VarChar(25)
  last_name       String?           @db.VarChar(50)
  date_joined     DateTime          @default(now())
  email           String            @unique @db.VarChar(100)
  password        String            @db.VarChar(255)
  groups_mods     groups_mods[]
  groups_users    groups_users[]
  user_data       user_data[]
  user_ingredient User_Ingredient[]
  user_version    UserVersion[]
  recipes         Recipe[]
  version         Version[]
  ingredients     Ingredient[]
  spec            Spec[]
}

model User_Ingredient {
  userId       Int
  ingredientId Int
  ingredients  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        Users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, ingredientId])
}

model UserVersion {
  userId    Int
  versionId Int
  version   Version @relation(fields: [versionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     Users   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, versionId])
}
