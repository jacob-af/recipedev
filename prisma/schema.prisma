generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///User
///-Profile
///-RecipeBook
/// * UserRecipeBook
/// * RecipeBooksBuild
///--Build
/// * BuildUser
///---Recipe M-1
/// * RecipeBookBuild
///---Touch 
///----Ingredient
///-Inventory
/// * InventoryUser
///--Storage
/// * InventoryStorage
/// * IgredientStorage
/// * StorageUser
///---Ingredient
///-Crew
/// * UserCrew

model User {
  id                   String                 @id @default(uuid())
  userName             String                 @db.VarChar(255)
  firstName            String?                @db.VarChar(25)
  lastName             String?                @db.VarChar(50)
  dateJoined           DateTime               @default(now())
  lastEdited           DateTime               @default(now())
  email                String                 @unique @db.VarChar(100)
  password             String                 @db.VarChar(255)
  profile              Profile?
  recipeBookUser       RecipeBookUser[]
  recipeBook           RecipeBook[]
  recipeBookEditedById RecipeBook[]           @relation("recipeBookEditedById")
  recipe               Recipe[]
  buildUser            BuildUser[]
  build                Build[]
  buildEditedBy        Build[]                @relation("buildEditedById")
  userCrew             UserCrew[]
  crew                 Crew[]
  crewEditedBy         Crew[]                 @relation("crewEditedById")
  ingredient           SpecificIngredient[]
  ingredientPreference IngredientPreference[]
  storageUser          StorageUser[]
  storage              Storage[]
  storageEditedBy      Storage[]              @relation("storageEditedById")
  inventoryCreatedBy   Inventory[]            @relation("inventoryCreatedById")
  inventoryEditedBy    Inventory[]            @relation("inventoryEditedById")
  inventoryUser        InventoryUser[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  photo  String
}

model RecipeBook {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?
  createdAt       DateTime          @default(now())
  editedAt        DateTime          @default(now())
  createdById     String?
  editedById      String?
  createdBy       User?             @relation(fields: [createdById], references: [id])
  editedBy        User?             @relation("recipeBookEditedById", fields: [editedById], references: [id])
  recipeBookBuild RecipeBookBuild[]
  recipeBookUser  RecipeBookUser[]
}

model RecipeBookUser {
  userId       String
  recipeBookId Int
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permission   String

  @@id([userId, recipeBookId])
}

model Build {
  id              Int               @id @default(autoincrement())
  buildName       String            @default("")
  createdAt       DateTime          @default(now())
  editedAt        DateTime          @default(now())
  createdById     String
  editedById      String
  createdBy       User?             @relation(fields: [createdById], references: [id])
  editedBy        User?             @relation("buildEditedById", fields: [editedById], references: [id])
  recipe          Recipe?           @relation(fields: [recipeId], references: [id])
  recipeId        Int?
  instructions    String?
  notes           String?
  glassware       String?           @db.VarChar()
  ice             String?           @db.VarChar(100)
  touch           Touch[]
  RecipeBookBuild RecipeBookBuild[]
  buildUser       BuildUser[]
}

model BuildUser {
  userId     String
  buildId    Int
  user       User   @relation(fields: [userId], references: [id])
  build      Build  @relation(fields: [buildId], references: [id])
  permission String

  @@id([userId, buildId])
}

model Recipe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  origin      String?  @db.VarChar(255)
  history     String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  build       Build[]
}

model RecipeBookBuild {
  buildId      Int
  recipeBookId Int
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  build        Build      @relation(fields: [buildId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([buildId, recipeBookId])
}

model Touch {
  id                   Int                 @id @default(autoincrement())
  build                Build?              @relation(fields: [buildId], references: [id])
  buildId              Int?
  order                Int?
  amount               Float?              @db.Real
  unit                 String?             @db.VarChar(50)
  genericIngredientID  Int
  genericIngredient    GenericIngredient   @relation(fields: [genericIngredientID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  specificIngredientID Int?
  specificIngredient   SpecificIngredient? @relation(fields: [specificIngredientID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model GenericIngredient {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?
  touch                Touch[]
  specificIngredient   SpecificIngredient[]
  ingredientPreference IngredientPreference[]
}

model SpecificIngredient {
  id                   Int                    @id @default(autoincrement())
  dateCreated          DateTime               @default(now())
  createdBy            User?                  @relation(fields: [createdById], references: [id])
  createdById          String?
  genericIngredientId  Int
  genericIngredient    GenericIngredient      @relation(fields: [genericIngredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name                 String                 @default("") @db.VarChar(255)
  description          String
  price                Float?                 @db.Real
  amount               Float?                 @db.Real
  unit                 String?
  source               String?
  touch                Touch[]
  ingredientStorage    IngredientStorage[]
  ingredientPreference IngredientPreference[] @relation("userSpecPreference")
}

model IngredientPreference {
  genericIngredientID  Int
  genericIngredient    GenericIngredient  @relation(fields: [genericIngredientID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  specificIngredientID Int
  specificIngredient   SpecificIngredient @relation("userSpecPreference", fields: [specificIngredientID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@id([genericIngredientID, specificIngredientID])
}

model Inventory {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  createdAt        DateTime           @default(now())
  editedAt         DateTime           @default(now())
  createdById      String
  editedById       String
  createdBy        User?              @relation("inventoryCreatedById", fields: [createdById], references: [id])
  editedBy         User?              @relation("inventoryEditedById", fields: [editedById], references: [id])
  inventoryStorage InventoryStorage[]
  inventoryUser    InventoryUser[]
}

model InventoryUser {
  userId      String
  inventoryId Int
  user        User      @relation(fields: [userId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  permission  String

  @@id([userId, inventoryId])
}

model Storage {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  editedAt          DateTime            @default(now())
  createdById       String
  editedById        String
  createdBy         User?               @relation(fields: [createdById], references: [id])
  editedBy          User?               @relation("storageEditedById", fields: [editedById], references: [id])
  inventoryStorage  InventoryStorage[]
  ingredientStorage IngredientStorage[]
  storageUser       StorageUser[]
}

model InventoryStorage {
  inventoryId Int
  storageId   Int
  storage     Storage   @relation(fields: [storageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([inventoryId, storageId])
}

model IngredientStorage {
  ingredientId Int
  ingredient   SpecificIngredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storageId    Int
  Storage      Storage            @relation(fields: [storageId], references: [id])
  quantity     Float?

  @@id([ingredientId, storageId])
}

model StorageUser {
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storageId  Int
  Storage    Storage @relation(fields: [storageId], references: [id])
  permission String

  @@id([userId, storageId])
}

model Crew {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime   @default(now())
  editedAt    DateTime   @default(now())
  createdById String
  editedById  String
  createdBy   User?      @relation(fields: [createdById], references: [id])
  editedBy    User?      @relation("crewEditedById", fields: [editedById], references: [id])
  userCrew    UserCrew[]
}

model UserCrew {
  userId     String
  crewId     Int
  user       User   @relation(fields: [userId], references: [id])
  crew       Crew   @relation(fields: [crewId], references: [id])
  permission String

  @@id([userId, crewId])
}
