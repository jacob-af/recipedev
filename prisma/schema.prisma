generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminOnSpec {
  userId       String
  specId       Int
  assignedById String
  assignedAt   DateTime @default(now())

  spec Spec @relation(fields: [specId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user User @relation("admins", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  assignedBy User @relation("adminAssignedBy", fields: [assignedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, specId])
}

model AdminOnRecipeBook {
  userId       String
  recipeBookId Int
  assignedById String
  assignedAt   DateTime @default(now())

  recipeBook RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user User @relation("recipeBookAdmins", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  assignedBy User @relation("recipeBookAdminAssignedBy", fields: [assignedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, recipeBookId])
}

model AdminOnInventory {
  userId       String
  assignedById String
  assignedAt   DateTime  @default(now())
  user         User      @relation("inventoryAdmins", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedBy   User      @relation("inventoryAdminAssignedBy", fields: [assignedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  Int

  @@id([userId, inventoryId])
}

model Group {
  id              Int               @id @default(autoincrement())
  groupName       String            @db.VarChar(255)
  dateCreated     DateTime          @db.Date
  groupIngredient GroupIngredient[]
  GroupMod        GroupMod[]
  GroupSpec       GroupSpec[]
  GroupUser       GroupUser[]
}

model GroupIngredient {
  groupId          Int
  ingredientSpecId Int
  group            Group          @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ingredientSpec   IngredientSpec @relation(fields: [ingredientSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupId, ingredientSpecId])
}

model GroupMod {
  userId  String
  groupId Int
  groups  Group  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, groupId])
}

model GroupSpec {
  groupId Int
  specId  Int
  groups  Group @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spec    Spec  @relation(fields: [specId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupId, specId])
}

model GroupUser {
  userId  String
  groupId Int
  groups  Group  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, groupId])
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  name        String   @db.VarChar(255)
  postedBy    User?    @relation(fields: [postedById], references: [id])
  postedById  String

  touch Touch[]

  ingredientSpec IngredientSpec[]
}

model IngredientSpec {
  id                            Int                       @id @default(autoincrement())
  dateCreated                   DateTime                  @default(now())
  name                          String                    @db.VarChar(255)
  amount                        Int?
  unit                          String?                   @db.VarChar(50)
  price                         Decimal?                  @db.Money
  source                        String?                   @db.VarChar(50)
  postedBy                      User?                     @relation(fields: [postedById], references: [id])
  postedById                    String
  ingredient                    Ingredient?               @relation(fields: [ingredientId], references: [id])
  ingredientId                  Int?
  Inventory                     Inventory?                @relation(fields: [inventoryId], references: [id])
  inventoryId                   Int?
  sharedInventoryIngredientSpec InventoryIngredientSpec[] @relation("sharedInventoryIngredientSpec")
  GroupIngredient               GroupIngredient[]
  SharedIngredient              SharedIngredient[]
}

model Recipe {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  name       String   @db.VarChar(255)
  origin     String   @db.VarChar(255)
  history    String?
  postedBy   User?    @relation(fields: [postedById], references: [id])
  postedById String
  spec       Spec[]
}

model RecipeBook {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  createdById       String
  createdBy         User?               @relation(fields: [createdById], references: [id])
  sharedRecipeBook  SharedRecipeBook[]
  spec              Spec[]
  RecipeBookSpec    RecipeBookSpec[]
  AdminOnRecipeBook AdminOnRecipeBook[]
}

model Inventory {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  createdAt               DateTime                  @default(now())
  createdById             String
  createdBy               User?                     @relation(fields: [createdById], references: [id])
  sharedInventory         SharedInventory[]
  ingredientSpec          IngredientSpec[]
  inventoryIngredientSpec InventoryIngredientSpec[]
  adminOnInventory        AdminOnInventory[]
}

model RecipeBookSpec {
  recipeBookId Int
  specId       Int
  addedById    String
  sharedAt     DateTime   @default(now())
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spec         Spec       @relation("sharedRecipeBookSpec", fields: [specId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addeddBy     User       @relation("recipeBookSpecAddedBy", fields: [addedById], references: [id], onDelete: NoAction)

  @@id([recipeBookId, specId])
}

model InventoryIngredientSpec {
  inventoryId      Int
  ingredientSpecId Int
  addedById        String
  sharedAt         DateTime       @default(now())
  inventory        Inventory      @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ingredientSpec   IngredientSpec @relation("sharedInventoryIngredientSpec", fields: [ingredientSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addedBy          User           @relation("inventoryIngredientSpecAddedBy", fields: [addedById], references: [id], onDelete: NoAction)

  @@id([inventoryId, ingredientSpecId])
}

model Spec {
  id             Int              @id @default(autoincrement())
  specName       String           @default("")
  postedBy       User?            @relation(fields: [postedById], references: [id])
  postedById     String
  instructions   String?
  glassware      String?          @db.VarChar()
  ice            String?          @db.VarChar(100)
  groupSpec      GroupSpec[]
  sharedSpec     SharedSpec[]
  recipe         Recipe?          @relation(fields: [recipeId], references: [id])
  recipeId       Int?
  touch          Touch[]
  adminOnSpec    AdminOnSpec[]
  RecipeBook     RecipeBook?      @relation(fields: [recipeBookId], references: [id])
  recipeBookId   Int?
  recipeBookSpec RecipeBookSpec[] @relation("sharedRecipeBookSpec")
}

model UserData {
  id             Int     @id @default(autoincrement())
  userId         String?
  userBio        String?
  workPlace      String? @db.VarChar(50)
  profilePicture String? @db.VarChar(255)
  users          User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id                        String                    @id @default(uuid())
  userName                  String                    @db.VarChar(255)
  firstName                 String?                   @db.VarChar(25)
  lastName                  String?                   @db.VarChar(50)
  dateJoined                DateTime                  @default(now())
  email                     String                    @unique @db.VarChar(100)
  password                  String                    @db.VarChar(255)
  groupMod                  GroupMod[]
  groupUser                 GroupUser[]
  userData                  UserData[]
  sharedIngredient          SharedIngredient[]        @relation("sharedIngredient")
  ingredientSharedBy        SharedIngredient[]        @relation("ingredientSharedBy")
  sharedSpec                SharedSpec[]              @relation("sharedSpec")
  specSharedBy              SharedSpec[]              @relation("specSharedBy")
  recipes                   Recipe[]
  spec                      Spec[]
  ingredient                Ingredient[]
  touch                     Touch[]
  adminOnSpec               AdminOnSpec[]             @relation("admins")
  adminAssignedBy           AdminOnSpec[]             @relation("adminAssignedBy")
  recipeBook                RecipeBook[]
  sharedRecipeBook          SharedRecipeBook[]        @relation("sharedRecipeBook")
  recipeBookSharedBy        SharedRecipeBook[]        @relation("recipeBookSharedBy")
  adminOnRecipeBook         AdminOnRecipeBook[]       @relation("recipeBookAdmins")
  recipeBookAdminAssignedBy AdminOnRecipeBook[]       @relation("recipeBookAdminAssignedBy")
  RecipeBookSpec            RecipeBookSpec[]          @relation("recipeBookSpecAddedBy")
  ingredientSpec            IngredientSpec[]
  adminOnInventory          AdminOnInventory[]        @relation("inventoryAdmins")
  inventoryAdminAssignedBy  AdminOnInventory[]        @relation("inventoryAdminAssignedBy")
  inventory                 Inventory[]
  sharedInventory           SharedInventory[]         @relation("sharedInventory")
  inventorySharedBy         SharedInventory[]         @relation("inventorySharedBy")
  InventoryIngredientSpec   InventoryIngredientSpec[] @relation("inventoryIngredientSpecAddedBy")
}

model SharedIngredient {
  userId           String
  ingredientSpecId Int
  sharedById       String
  sharedAt         DateTime       @default(now())
  ingredientSpec   IngredientSpec @relation(fields: [ingredientSpecId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User           @relation("sharedIngredient", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedBy         User           @relation("ingredientSharedBy", fields: [sharedById], references: [id], onDelete: NoAction)

  @@id([userId, ingredientSpecId])
}

model SharedRecipeBook {
  userId       String
  recipeBookId Int
  sharedById   String
  sharedAt     DateTime   @default(now())
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User       @relation("sharedRecipeBook", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedBy     User       @relation("recipeBookSharedBy", fields: [sharedById], references: [id], onDelete: NoAction)

  @@id([userId, recipeBookId])
}

model SharedInventory {
  userId      String
  inventoryId Int
  sharedById  String
  sharedAt    DateTime  @default(now())
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User      @relation("sharedInventory", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedBy    User      @relation("inventorySharedBy", fields: [sharedById], references: [id], onDelete: NoAction)

  @@id([userId, inventoryId])
}

model SharedSpec {
  userId     String
  specId     Int
  sharedById String
  sharedAt   DateTime @default(now())
  spec       Spec     @relation(fields: [specId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User     @relation("sharedSpec", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedBy   User     @relation("specSharedBy", fields: [sharedById], references: [id], onDelete: NoAction)

  @@id([userId, specId])
}

model Touch {
  id           Int         @id @default(autoincrement())
  ingredientId Int?
  order        Int?
  amount       Float?      @db.Real
  unit         String?     @db.VarChar(50)
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  spec         Spec?       @relation(fields: [specId], references: [id])
  specId       Int?
  postedBy     User?       @relation(fields: [postedById], references: [id])
  postedById   String
}
