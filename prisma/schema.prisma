generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///User
///-Profile 1-1
///-Recipe Books M-M
///--Builds M-M
///---Recipes M-1
///---Touchs 1-M
///----Ingredient 1-1
///-Inventory M-M
///--StorageSpace M-M
///---Ingredient 1-M
///-Crews M-M
///--Users M-M

model User {
  id                   String           @id @default(uuid())
  userName             String           @db.VarChar(255)
  firstName            String?          @db.VarChar(25)
  lastName             String?          @db.VarChar(50)
  dateJoined           DateTime         @default(now())
  lastEdited           DateTime         @default(now())
  email                String           @unique @db.VarChar(100)
  password             String           @db.VarChar(255)
  profile              Profile?
  recipeBookUser       RecipeBookUser[]
  recipeBook           RecipeBook[]
  recipeBookEditedById RecipeBook[]     @relation("recipeBookEditedById")
  userCrew             UserCrew[]
  crew                 Crew[]
  crewEditedBy         Crew[]           @relation("crewEditedById")
  userBuild            UserBuild[]
  build                Build[]
  buildEditedBy        Build[]          @relation("buildEditedById")
  recipe               Recipe[]
  ingredient           Ingredient[]
  userStorage          UserStorage[]
  storage              Storage[]
  storageEditedBy      Storage[]        @relation("storageEditedById")
  inventoryCreatedBy   Inventory[]      @relation("inventoryCreatedById")
  inventoryEditedBy    Inventory[]      @relation("inventoryEditedById")
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  photo  String
}

model RecipeBook {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdAt       DateTime          @default(now())
  editedAt        DateTime          @default(now())
  createdById     String?
  editedById      String?
  createdBy       User?             @relation(fields: [createdById], references: [id])
  editedBy        User?             @relation("recipeBookEditedById", fields: [editedById], references: [id])
  recipeBookBuild RecipeBookBuild[]
  recipeBookUser  RecipeBookUser[]
}

model RecipeBookUser {
  id           Int        @id @default(autoincrement())
  userId       String
  recipeBookId Int
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partner      Boolean
  manager      Boolean
}

model Build {
  id              Int               @id @default(autoincrement())
  buildName       String            @default("")
  createdAt       DateTime          @default(now())
  editedAt        DateTime          @default(now())
  createdById     String
  editedById      String
  createdBy       User?             @relation(fields: [createdById], references: [id])
  editedBy        User?             @relation("buildEditedById", fields: [editedById], references: [id])
  recipe          Recipe?           @relation(fields: [recipeId], references: [id])
  recipeId        Int?
  instructions    String?
  notes           String?
  glassware       String?           @db.VarChar()
  ice             String?           @db.VarChar(100)
  touch           Touch[]
  RecipeBookBuild RecipeBookBuild[]
  userBuild       UserBuild[]
}

model UserBuild {
  id      Int     @id @default(autoincrement())
  userId  String
  buildId Int
  user    User    @relation(fields: [userId], references: [id])
  build   Build   @relation(fields: [buildId], references: [id])
  partner Boolean
  manager Boolean
}

model Recipe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  origin      String?  @db.VarChar(255)
  history     String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  build       Build[]
}

model RecipeBookBuild {
  id           Int        @id @default(autoincrement())
  buildId      Int
  recipeBookId Int
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  build        Build      @relation(fields: [buildId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Touch {
  id             Int         @id @default(autoincrement())
  ingredientName String      @default("")
  ingredientId   Int?
  ingredient     Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  build          Build?      @relation(fields: [buildId], references: [id])
  buildId        Int?
  order          Int?
  amount         Float?      @db.Real
  unit           String?     @db.VarChar(50)
}

model Ingredient {
  id                Int                 @id @default(autoincrement())
  dateCreated       DateTime            @default(now())
  createdBy         User?               @relation(fields: [createdById], references: [id])
  createdById       String?
  name              String              @default("") @db.VarChar(255)
  price             Float?              @db.Real
  amount            Float?              @db.Real
  unit              String?
  touch             Touch[]
  ingredientStorage ingredientStorage[]
}

model Inventory {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  createdAt        DateTime           @default(now())
  editedAt         DateTime           @default(now())
  createdById      String
  editedById       String
  createdBy        User?              @relation("inventoryCreatedById", fields: [createdById], references: [id])
  editedBy         User?              @relation("inventoryEditedById", fields: [editedById], references: [id])
  InventoryStorage InventoryStorage[]
}

model InventoryStorage {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  storageId   Int
  storage     Storage   @relation(fields: [storageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Storage {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  editedAt          DateTime            @default(now())
  createdById       String
  editedById        String
  createdBy         User?               @relation(fields: [createdById], references: [id])
  editedBy          User?               @relation("storageEditedById", fields: [editedById], references: [id])
  inventoryStorage  InventoryStorage[]
  ingredientStorage ingredientStorage[]
  userStorage       UserStorage[]
}

model ingredientStorage {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  editedAt     DateTime    @default(now())
  ingredientId Int?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quantity     Float?
  Storage      Storage?    @relation(fields: [storageId], references: [id])
  storageId    Int?
}

model UserStorage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  editedAt  DateTime @default(now())
  userId    String
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quantity  Float?
  Storage   Storage? @relation(fields: [storageId], references: [id])
  storageId Int?
  partner   Boolean
  manager   Boolean
}

model Crew {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  editedAt    DateTime   @default(now())
  createdById String
  editedById  String
  createdBy   User?      @relation(fields: [createdById], references: [id])
  editedBy    User?      @relation("crewEditedById", fields: [editedById], references: [id])
  userCrew    UserCrew[]
}

model UserCrew {
  id      Int     @id @default(autoincrement())
  userId  String
  crewId  Int
  user    User    @relation(fields: [userId], references: [id])
  crew    Crew    @relation(fields: [crewId], references: [id])
  partner Boolean
  manager Boolean
}
