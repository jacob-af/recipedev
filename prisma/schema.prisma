generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Groups {
  id                Int                 @id @default(autoincrement())
  groupName         String              @db.VarChar(255)
  dateCreated       DateTime            @db.Date
  groupsIngredients GroupsIngredients[]
  GroupsMods        GroupsMods[]
  GroupVersion      GroupVersion[]
  GroupsUsers       GroupsUsers[]
}

model GroupsIngredients {
  groupId      Int
  ingredientId Int
  groups       Groups     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ingredients  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupId, ingredientId])
}

model GroupsMods {
  userId  Int
  groupId Int
  groups  Groups @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   Users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, groupId])
}

model GroupVersion {
  groupId   Int
  versionId Int
  groups    Groups  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version   Version @relation(fields: [versionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupId, versionId])
}

model GroupsUsers {
  userId  Int
  groupId Int
  groups  Groups @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   Users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, groupId])
}

model Ingredient {
  id                Int                 @id @default(autoincrement())
  date_created      DateTime            @default(now())
  name              String              @db.VarChar(255)
  amount            Int?
  unit              String?             @db.VarChar(50)
  price             Decimal?            @db.Money
  source            String?             @db.VarChar(50)
  postedBy          Users?              @relation(fields: [postedById], references: [id])
  postedById        Int?
  groupsIngredients GroupsIngredients[]
  spec              Spec[]
  sharedIngredient  SharedIngredient[]
}

model Spec {
  id           Int         @id @default(autoincrement())
  ingredientId Int?
  order        Int?
  amount       Float?      @db.Real
  unit         String?     @db.VarChar(50)
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  version      Version?    @relation(fields: [versionId], references: [id])
  versionId    Int?
  postedBy     Users?      @relation(fields: [postedById], references: [id])
  postedById   Int?
}

model Recipe {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  name       String    @db.VarChar(255)
  origin     String    @db.VarChar(255)
  history    String?
  postedBy   Users?    @relation(fields: [postedById], references: [id])
  postedById Int?
  version    Version[]
}

model Version {
  id             Int              @id @default(autoincrement())
  versionName    String
  postedBy       Users?           @relation(fields: [postedById], references: [id])
  postedById     Int?
  instructions   String?
  glassware      String?          @db.VarChar(50)
  ice            String?          @db.VarChar(25)
  groupVersion   GroupVersion[]
  sharedVersion  SharedVersion[]
  recipe         Recipe?          @relation(fields: [recipeId], references: [id])
  recipeId       Int?
  specs          Spec[]
  adminOnVersion AdminOnVersion[]
}

model UserData {
  id             Int     @id @default(autoincrement())
  userId         Int?
  userBio        String?
  workPlace      String? @db.VarChar(50)
  profilePicture String? @db.VarChar(255)
  users          Users?  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id               Int                @id @default(autoincrement())
  user_name        String             @db.VarChar(255)
  first_name       String?            @db.VarChar(25)
  last_name        String?            @db.VarChar(50)
  date_joined      DateTime           @default(now())
  email            String             @unique @db.VarChar(100)
  password         String             @db.VarChar(255)
  groupsMods       GroupsMods[]
  groupsUsers      GroupsUsers[]
  userData         UserData[]
  sharedIngredient SharedIngredient[]
  sharedVersion    SharedVersion[]
  recipes          Recipe[]
  version          Version[]
  ingredients      Ingredient[]
  spec             Spec[]
  adminOnVersion   AdminOnVersion[]
}

model SharedIngredient {
  userId       Int
  ingredientId Int
  ingredients  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        Users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, ingredientId])
}

model SharedVersion {
  userId    Int
  versionId Int
  version   Version @relation(fields: [versionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     Users   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, versionId])
}

model AdminOnVersion {
  userId       Int
  versionId    Int
  assignedById Int
  assignedAt   DateTime @default(now())
  version      Version  @relation(fields: [versionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, versionId])
}
